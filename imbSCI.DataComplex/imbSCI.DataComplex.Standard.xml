<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imbSCI.DataComplex</name>
    </assembly>
    <members>
        <member name="T:imbSCI.DataComplex.converters.DataTableConverterASCII">
            <summary>
            Converts <see cref="T:System.Data.DataTable"/> to tab separated ASCII
            </summary>
            <seealso cref="!:imbSCI.DataComplex.converters.core.ConverterBase&lt;System.Data.DataTable, System.String, imbSCI.DataComplex.converters.DataTableConverterASCIISettings&gt;" />
        </member>
        <member name="M:imbSCI.DataComplex.converters.DataTableConverterASCII.Convert(System.String,imbSCI.DataComplex.converters.DataTableConverterASCIISettings)">
            <summary>
            Converts the textual input into datatable with string values
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">There is no row at index[" + settings.columnNameRowIndex + "] - where column name row expected - input</exception>
        </member>
        <member name="P:imbSCI.DataComplex.converters.DataTableConverterASCII.autoEncoding">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.converters.DataTableConverterASCIISettings.separatorReplacement">
            <summary>
            What value to use as replacement for <see cref="P:imbSCI.DataComplex.converters.DataTableConverterASCIISettings.columnSeparator"/> and <see cref="P:imbSCI.DataComplex.converters.DataTableConverterASCIISettings.rowSeparator"/> if found in cell value
            </summary>
            <value>
            The separator replacement.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.converters.DataTableConverterASCIISettings.columnNameRowIndex">
            <summary>
            Index of row with column name. To disable, set: -1
            </summary>
            <value>
            The index of the column name row.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.converters.maps.columnMapSet`1.RecognizeSet(System.Collections.Generic.List{System.String})">
            <summary>
            Returns column map having the highest crosssection with given column labels
            </summary>
            <param name="columnLabels">The column labels.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.DataComplexExamples">
            <summary>Example, demonstrating data annotation with reporting, using generic, DataTable based, collection</summary>
            <seealso cref="T:imbSCI.DataComplex.data.TestMicroEnvironmentBase" />
        </member>
        <!-- Badly formed XML comment ignored for member "T:imbSCI.DataComplex.DataComplexExamples.DataEntryTest" -->
        <member name="M:imbSCI.DataComplex.DataComplexExamples.DataEntryTest.#ctor">
            <summary>
            Constructor, setting some random values
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.DataComplexExamples.DataEntryTest.myProperty">
            <summary>  </summary>
        </member>
        <member name="P:imbSCI.DataComplex.DataComplexExamples.DataEntryTest.isInState">
            <summary> Example of boolean property </summary>
        </member>
        <member name="P:imbSCI.DataComplex.DataComplexExamples.DataEntryTest.BigNumber">
            <summary> Example of integer property </summary>
        </member>
        <member name="P:imbSCI.DataComplex.DataComplexExamples.DataEntryTest.SomeNumber">
            <summary> Example of integer property </summary>
        </member>
        <member name="P:imbSCI.DataComplex.DataComplexExamples.DataEntryTest.myPropertyRatio">
            <summary> Ratio </summary>
        </member>
        <member name="M:imbSCI.DataComplex.DataComplexExamples.ExampleOne_DataTableDataAnnotation">
            <summary>
            Creates generic DataTable collection, adds 5 rows and generates Excel and CSV file
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitAgregator`1">
            <summary>
            The agregator data units have ability to process an external <see cref="!:DataTable"/> and to populate their fields according to <see cref="F:imbSCI.Core.attributes.imbAttributeName.reporting_agregate_function"/>
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:imbReportingCore.data.dataUnits.core.dataUnitBase" />
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitAgregator`1.complete_Table">
            <complete>Defines Table that is showint all properties having "complete" in Category description</complete>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase">
            <summary>
            dataUnit contains a set of properties that should be extracted and delivered to reporting module
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.complete_Table">
            <complete>Defines Table that is showint all properties having "complete" in Category description</complete>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.presenters">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.globalAttachmentProvider">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.globalAttachmentTable">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.map">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.lastIteration">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.buildCustomDataTable(System.Collections.IEnumerable,imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter,System.Boolean)">
            <summary>
            Builds the custom data table.
            </summary>
            <param name="instance_items">The instance items.</param>
            <param name="presenter">The presenter.</param>
            <param name="isPreviewTable">if set to <c>true</c> [is preview table].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.getDataTable(System.Collections.IEnumerable,imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter,System.Boolean,System.Boolean)">
            <summary>
            Gets the data table fpr presenter
            </summary>
            <param name="items">The items.</param>
            <param name="presenter">The presenter.</param>
            <param name="isPreviewTable">if set to <c>true</c> [is preview table].</param>
            <param name="runMonitorCheck">if set to <c>true</c> [run monitor check].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.selectDataTableShema(System.Data.DataTable,imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter)">
            <summary>
            Selects the data table shema.
            </summary>
            <param name="shema">The shema.</param>
            <param name="presenter">The presenter.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.buildDataTableShema(imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter)">
            <summary>
            Builds the data table shema.
            </summary>
            <param name="presenter">The presenter.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.tableShema">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.unitType">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.instanceType">
            <summary>Instance that will transfer property valus into dataUnit</summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase.dataAcquireFlags">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitComparativeCollection`2.crossItems">
            <summary>
            Instaces of items to cross table with
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitComparativeCollection`2.crossItemColumns">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitComparativeCollection`2.crossItemType">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitComparativeCollection`2.complete_Table">
            <complete>Defines Table that is showint all properties having "complete" in Category description</complete>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitIntegratedModel">
            <summary>
            Integrated data deliveryInstance model keeping deliveryInstance unit and data in the same object
            </summary>
            <seealso cref="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitBase" />
            <seealso cref="T:imbSCI.DataComplex.data.dataUnits.core.IDataUnitRow" />
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitIntegratedModel.parent">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitIntegratedModel.checkData(imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring)">
            <summary>
            Checks the data.
            </summary>
            <param name="monitor">The monitor.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitIntegratedModel.prepare(imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring,imbSCI.DataComplex.data.dataUnits.core.dataUnitBase)">
            <summary>
            Prepares the specified monitor.
            </summary>
            <param name="__monitor">The monitor.</param>
            <param name="__parent">The parent.</param>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitIntegratedModel.setAgregateResult(System.Collections.IEnumerable)">
            <summary>
            Sets the agregate result.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitIntegratedModel.setDataRow(System.Object)">
            <summary>
            Sets the data row.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter">
            <summary>
            Describes a way to render dataUnit to Table, Graph or text
            </summary>
            <typeparam name="TUnit">The type of the unit.</typeparam>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.parent">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.filenamebase">
            <summary>filename without extension</summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.key">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.name">
            <summary>
            Name for this instance
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.attachmentFlags">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.presentationType">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.extraColumns">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.formatFlags">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.propertyNameRegex">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter.fields">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenterDictionary">
            <summary>
            Collection of dataUnitPresenter instances
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenterDictionary.items">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitRow`1">
            <summary>
            Base data unit for simple representation of an object, without being processed as table
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRow`1.rowCreated">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRow`1.sinceLastMin">
            <summary>
            Time in minutes since last entry created
            </summary>
            <value>
            The since last minimum.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRow`1.parent">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRow`1.monitor">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRow`1.iteration">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitRow`1.OnPropertyChanged(System.String)">
            <summary>
            Kreira event koji obaveštava da je promenjen neki parametar
            </summary>
            <remarks>
            Neće biti kreiran event ako nije spremna aplikacija: imbSettingsManager.current.isReady
            </remarks>
            <param name="name"></param>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring">
            <summary>
            Monitors for change in the associated Row
            </summary>
            <seealso cref="!:imbSCI.DataComplex.special.instanceCountCollection&lt;T&gt;.String&gt;" />
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring.checkData(imbSCI.DataComplex.data.dataUnits.core.IDataUnitRow)">
            <summary>
            Checks if data were received on every property
            </summary>
            <returns>
            TRUE if data input ok, otherwise FALSE/EXCEPTION
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring.prepare">
            <summary>
            Prepares this instance.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring.targets">
            <summary>
            Gets or sets the targets.
            </summary>
            <value>
            The targets.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring.runFunctions(System.Object)">
            <summary>
            Runs the functions.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoring.unlock">
            <summary>
            Unlocks monitoring for data overrite
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.freqCount">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.readValueAndResolveInt32(System.Object,System.Boolean)">
            <summary>
            Reads the value and resolves
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.newValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.storedValue">
            <summary> Last value</summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.storedResult">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.newResult">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.pi_toWatch">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.pi_toStore">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitRowMonitoringDefinition.function">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.dataUnitSeries`2">
            <summary>
            Base data unit for time/ordinal series representation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitSeries`2.items">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitSeries`2.currentEntry">
            <summary>
            Gets the current entry - if exists
            </summary>
            <value>
            The current entry.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitSeries`2.lastEntry">
            <summary>
            Gets the last entry - if there are less then two entries it will return null
            </summary>
            <value>
            The last entry.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.dataUnitSeries`2.Item(System.Int32)">
            <summary>
            Gets the <see cref="!:T"/> with the specified iteration.
            </summary>
            <value>
            The <see cref="!:T"/>.
            </value>
            <param name="iteration">The iteration.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">iteration - Larger then timeseries</exception>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.IDataUnitIntegrated">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.DataComplex.data.dataUnits.core.IDataUnitRow" />
             <seealso cref="T:imbSCI.DataComplex.data.dataUnits.core.IDataUnit" />
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.IdataUnitSeries.complete_Table">
            <complete>Defines Table that is showint all properties having "complete" in Category description</complete>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.IdataUnitSeries.map">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.IdataUnitSeries.lastIteration">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.IdataUnitSeries.buildCustomDataTable(System.Collections.IEnumerable,imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter,System.Boolean)">
            <summary>
            Builds the custom data table.
            </summary>
            <param name="instance_items">The instance items.</param>
            <param name="presenter">The presenter.</param>
            <param name="isPreviewTable">if set to <c>true</c> [is preview table].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.core.IdataUnitSeries.buildDataTableShema(imbSCI.DataComplex.data.dataUnits.core.dataUnitPresenter)">
            <summary>
            Builds the data table shema.
            </summary>
            <param name="presenter">The presenter.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.core.IDataUnitSeriesEntry.sinceLastMin">
            <summary>
            Time in minutes since last entry created
            </summary>
            <value>
            The since last minimum.
            </value>
        </member>
        <member name="F:imbSCI.DataComplex.data.dataUnits.core.monitoringFunctionEnum.stability">
            <summary>
            The stability: adds +1 if value is above 0 and didn't change
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.dataUnits.core.monitoringFunctionEnum.change">
            <summary>
            The change: calculates difference between earlier value and the current
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.dataUnits.core.NamespaceDoc">
            <summary>
            Data structures for data visualization and reporting. TODO: Early stage of development
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.dataUnitExtensions.getMonitoringFunction(imbSCI.Core.data.settingsPropertyEntryWithContext,System.Type)">
            <summary>
            Gets the monitoring function.
            </summary>
            <param name="propertyEntry">The property entry.</param>
            <param name="instanceType">Type of the instance.</param>
            <returns>null if function not found or set to none</returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.dataUnits.dataUnitMap.getDataUnitMap(System.Type,System.Type)">
            <summary>
            Gets the data unit map.
            </summary>
            <param name="instanceType">Type of the instance.</param>
            <param name="unitType">Type of the unit.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.dataUnitMap.registry">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.dataUnitMap.monitor">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.dataUnitMap.typePropertyDictionary">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.dataUnitMap.fieldsByNeedle">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.dataUnits.dataUnitMap.columns">
             <summary>
            
             </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.dataUnits.enums.dataDeliverAttachmentEnum.attachSidePage">
            <summary>
            It will create side-page in report, with all data shown
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.dataUnits.enums.dataDeliverFormatEnum.collectionLimitForAttachment">
            <summary>
            Attachment will also have limited number of rows
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.dataUnits.enums.dataDeliverFormatEnum.sourceForGlobalAttachment">
            <summary>
            When flagen this presenter is source of global attachment
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.dataUnits.enums.dataDeliverFormatEnum.includeLegend">
            <summary>
            At bottom of table/chart it will write name of properties and their descriptions
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelDataSet.VAR_AllowInstanceToOutputToConsole">
             <summary>
            
             </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelDataSet.DATANAME_Summary">
            <summary>
            Summary statistics inside <see cref="P:imbSCI.DataComplex.data.modelDataSet.dataCollectionExtendedList"/> and <see cref="!:dataSet"/>
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelDataSet.DATANAME_Children">
            <summary>
            Children statistics inside <see cref="P:imbSCI.DataComplex.data.modelDataSet.dataCollectionExtendedList"/> and <see cref="!:dataSet"/>
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelDataSet.DATANAME_Instance">
            <summary>
            Instance statistics inside <see cref="P:imbSCI.DataComplex.data.modelDataSet.dataCollectionExtendedList"/> and <see cref="!:dataSet"/>
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelDataSet.dataCollectionExtendedList">
            <summary>DataField sets stored at record Finish call</summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelDataSet.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelDataSet.imbSCI#Core#reporting#IAppendDataFields#AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>
            Updated or newly created property collection
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelDataSet.logBuilder">
            <summary>
            Log creator
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.IModelRecord">
            <summary>
            Data model objects -- with records of <see cref="!:imbFramework.tests.testDefinition"/> execution
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.IModelRecordSerializable.modelNote">
            <summary>
            Special string note about parameters not available at <see cref="T:imbSCI.DataComplex.data.modelRecords.modelRecordBase"/> level
            </summary>
            <value>
            The model note.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.IModelRecordSummary.summaryFinished">
            <summary>
            Finishes this summary record
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollection`2.FinishAllStarted">
            <summary>
            Finishes all started children
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollection`2.MoveNext">
            <summary>
            Moves the child index to next position.
            </summary>
            <returns>Returns false if childIntex is at end</returns>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollection`2.childIndexCurrent">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollectionBase`2">
            <summary>
            Collection of algorithm instances with coresponding <see cref="!:modelRecordParentBase"/> records, indexed by algorithm <see cref="T:imbSCI.Data.interfaces.IObjectWithNameAndDescription"/> that produces it
            </summary>
            <typeparam name="T">Any object with name and description properties</typeparam>
            <typeparam name="TRecord">The type of the record.</typeparam>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollectionBase`2.#ctor(System.String,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollectionBase`2"/> class.
            </summary>
            <param name="__testRunStamp">The test run stamp.</param>
            <param name="Algorithms">The items to create records for.</param>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollectionBase`2.SeachForRecord(`0,System.String)">
            <summary>
            Gets the record using one of supplied arguments.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="instanceID">Instance identifier - it will be tested against algorithm's <see cref="P:imbSCI.Data.interfaces.IObjectWithName.name"/>, <see cref="T:System.Type"/> name and against <see cref="P:imbSCI.DataComplex.data.modelRecords.IModelRecord.instanceID"/>, <see cref="P:imbSCI.DataComplex.data.modelRecords.IModelRecord.UID"/> </param>
            <param name="__UID">The uid.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.instanceWithRecordCollectionBase`2.GetAlgorithm``1">
            <summary>
            Gets instance of specified type
            </summary>
            <typeparam name="TSearch">The type of the search.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Algorithm of type: " + typeof(TSearch).Name + " not found in the collection</exception>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.SetLogSerializable(imbSCI.DataComplex.data.modelRecords.IModelRecordSerializable)">
            <summary>
            Dumps its data into Serializable tween
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.childIndexCurrent">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.VAR_AllowInstanceToOutputToConsole">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.#ctor(System.String,System.Object)">
            <summary>
            IT WILL NOT ATTACH <c>__instance</c> into <c>instance</c> property. Reads meta data about the instance and does some preparations.
            </summary>
            <param name="__instance">The instance.</param>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.VAR_RegisterForAutosave">
            <summary>
            Gets a value indicating whether the instance should be registered for autosave call on application close
            </summary>
            <value>
            <c>true</c> if [variable register for autosave]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.VAR_FilenamePrefix">
            <summary>
            Gets the variable filename prefix to be used
            </summary>
            <value>
            The variable filename prefix.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.VAR_FilenameExtension">
            <summary>
            Gets the variable filename extension.
            </summary>
            <value>
            The variable filename extension.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.VAR_FolderPathForAutosave">
            <summary>
            Gets the variable folder path for autosave.
            </summary>
            <value>
            Path (from app. root) to store the record on autosave. Also used as default on regular save call.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.VAR_FilenameBase">
            <summary>
            The root base of filename (without extension) for autosave.
            </summary>
            <value>
            The variable filename base.
            </value>
            <remarks>
            This should be an abstract property in abstract base classes
            </remarks>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.log(System.String)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordBase._modelRecordGlobalCount">
            <summary>
            The model record global count
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.modelRecordGlobalCount">
            <summary>
            Gets the model record global count.
            </summary>
            <value>
            The model record global count.
            </value>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordBase.DO_EXCEPTIONS">
            <summary>
            TRUE: it sill throw exceptions on iregular condition
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.id_global">
            <summary>
            Global universal ID based on number of instances
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.iTI">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.learnAboutInstance(System.Object)">
            <summary>
            Learns the about related instance/key object
            </summary>
            <param name="instanceOrKey">The instance or key.</param>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.instanceOrKeyData">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.instanceTypeInfo">
            <summary>
            Type information about instance that this <see cref="T:imbSCI.DataComplex.data.modelRecords.IModelRecord"/> describes. Has to be trough <see cref="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.learnAboutInstance(System.Object)"/>
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.state">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.remarkFlags">
            <summary>
            Remarks about algorithm execution and/or results
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.duration">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.startCallCount">
            <summary>
            Number of start calls
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.timeStart">
            <summary>
            The moment of <see cref="!:recordStart"/> call.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.timeFinish">
            <summary>
            The moment of <see cref="!:recordFinish"/> call.
            </summary>
            <value>
            The time finish.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.UID">
            <summary>
            Auto-generated UID based on <see cref="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.instanceID"/>, typesignature and start time
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.instanceID">
            <summary>
            Human readable instanceID before generation of UID
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.testRunStamp">
            <summary>
            Runstamp of test being recorded
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.logContent">
            <summary>
            Gets the content of the log. Make sure that <see cref="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.state"/> is <see cref="F:imbSCI.DataComplex.data.modelRecords.modelRecordStateEnum.finished"/> before trying to get the log content
            </summary>
            <value>
            The content of the log.
            </value>
            <exception cref="T:System.Exception">The record [" + instanceID + ":" + this.GetType().Name + "] is not finished. Call finish method to have log content available. (UID:" + UID + ")</exception>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended,imbSCI.DataComplex.data.modelRecords.modelRecordFieldToAppendFlags)">
            <summary>
            Appends the data fields.
            </summary>
            <param name="data">The data.</param>
            <param name="whatToAppend">The what to append.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.startingThread">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase._recordStart(System.String,System.String)">
            <summary>
            Records the start.
            </summary>
            <param name="__testRunStamp">The test run stamp.</param>
            <param name="__instanceID">The instance identifier.</param>
            <param name="">The .</param>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinish">
            <summary>
            Override this method with instructions to update <see cref="!:dataCollectionExtendedList"/>
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinishDefault">
            <summary>
            Default dataset build - intended for mid-level class overload
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase._recordFinish">
            <summary>
            Records the finish.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordBase.reallyFinished">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase._doOnRealFinish(System.Boolean)">
            <summary>
            Builds data sets --- calls <see cref="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinishDefault"/> and after that <see cref="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinish"/>
            </summary>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">DataSet is empty for record [" + instanceID + "] in test run [" + testRunStamp + "] - null - DataSet not populated</exception>
            <exception cref="!:aceCommonTypes.core.exceptions.aceObligationException"></exception>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2">
            <summary>
            Dictionary of <see cref="T:imbSCI.DataComplex.data.modelRecords.IModelRecord"/> records, indexed by key of any type <see cref="T:System.Object"/>
            </summary>
            <typeparam name="T">Any object - String preferably</typeparam>
            <typeparam name="TRecord">The type of the record.</typeparam>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.DO_EXCEPTIONS">
            <summary>
            TRUE: it will throw exceptions on iregular condition
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.testRunStamp">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.Item(`0)">
            <summary>
            Gets test (global) level of <see cref="T:imbSCI.DataComplex.data.modelRecords.IModelRecord"/> for the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.DataComplex.data.modelRecords.IModelRecord"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.GetRecord(`0,System.Boolean)">
            <summary>
            Gets the record using one of supplied arguments.
            </summary>
            <param name="key">The key.</param>
            <param name="autoCreateOnMissing">if set to <c>true</c> [automatic create on missing].</param>
            <returns>Record associated with the key</returns>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">No valid arguments supplied: autoCreateOnMissing[" + autoCreateOnMissing + "] but " + nameof(key) + " not found.</exception>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.SeachForRecord(`0,System.String)">
            <summary>
            Seaches for record using supplied <c>key</c> or <c>instanceID</c>
            </summary>
            <param name="key">The key.</param>
            <param name="instanceID">Instance identifier - it will be tested against key's <see cref="P:imbSCI.Data.interfaces.IObjectWithName.name"/>, <see cref="T:System.Type"/> name and against <see cref="P:imbSCI.DataComplex.data.modelRecords.IModelRecord.instanceID"/>, <see cref="P:imbSCI.DataComplex.data.modelRecords.IModelRecord.UID"/> </param>
            <returns></returns>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">No valid arguments supplied. At least one argument must be valid [null or empty string] to find the record in the collection</exception>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.recordsForTest">
            <summary>
            Gets or sets the records for test.
            </summary>
            <value>
            The records for test.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.records">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.items">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.GetInstance(`1)">
            <summary>
            Gets the instance of the record supplied
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.CreateRecord(`0)">
            <summary>
            Creating a record instance based on the instance.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">key instance is already part of collection - item</exception>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{T,TRecord}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordDataSetCategoriesEnum.master_record">
            <summary>
            The master record
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordFieldToAppendFlags.identification">
            <summary>
            The identification: record title, record description, instance classname, <see cref="P:imbSCI.DataComplex.data.modelRecords.IModelRecord.state"/>, runstamp, UID, instace-ID, log size...
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordFieldToAppendFlags.modelRecordCommonData">
            <summary>
            The model record common data, <see cref="T:imbSCI.DataComplex.data.modelRecords.IModelRecord"/> properties: i.e. start time, end time, duration, <see cref="P:imbSCI.DataComplex.data.modelRecords.IModelRecord.remarkFlags"/>
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordFieldToAppendFlags.modelRecordLogData">
            <summary>
            Data from <see cref="!:imbACE.Core.core.builderForLog.AppendDataFields(imbSCI.Data.collection.PropertyCollectionExtended)"/> : log size statistics and exceptions detected
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordFieldToAppendFlags.modelRecordInstanceData">
            <summary>
            The model record instance data
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordFieldToAppendFlags.commonData">
            <summary>
            The common data:
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordFieldToAppendFlags.algorithmShared">
            <summary>
            The algorithm shared:
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.modelRecordMode">
            <summary>
            Enumeration used by model execution records
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordMode.obligationOnStart">
            <summary>
            The obligation related to RecordStart operation
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordMode.obligationOnInit">
            <summary>
            The obligation related to RecordInit operation
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordMode.obligationOnFinish">
            <summary>
            The obligation related to RecordFinish operation
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3">
            <summary>
            Base class for <see cref="T:imbSCI.DataComplex.data.modelRecords.IModelRecord"/> data model reports about an algorithm execution
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="T:imbSCI.Core.reporting.IAppendDataFields" />
            <seealso cref="T:imbSCI.Core.reporting.IAppendDataFieldsExtended" />
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.instance">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.parent">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.children">
            <summary>The sub instance record collection. Collection index is -1 late to the real <see cref="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.childRecord"/> and <see cref="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.childInstance"/></summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.GetChildRecords">
            <summary>
            Collects all first-level children and sends as <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.childRecord">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.childInstance">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.startNextChildRecord">
            <summary>
            Starts the next child record - method for iterative call
            </summary>
            <remarks>Use only if the <c>children</c> collection is immutable and <c>instanceID</c></remarks>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.getChildRecord(`1,System.String)">
            <summary>
            Gets the child record - without starting it and without setting the <see cref="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.childRecord"/> nor <see cref="P:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.childInstance"/>. It is thread safe.
            </summary>
            <param name="instance">The instance.</param>
            <param name="__instanceID">The instance identifier.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.startChildRecord(`1,System.String)">
            <summary>
            Starts the child record -- creates instance, record and sets parent
            </summary>
            <param name="instance">The instance.</param>
            <param name="__instanceID">The instance identifier.</param>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.recordStart(System.String,System.String,System.Object[])">
            <summary>
            Records the start. Make sure to call <see cref="!:_recordStart"/> at beginning of the method
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordParentBase`3.recordFinish(System.Object[])">
            <summary>
            Records the finish. Make sure to call <see cref="!:_recordFinish"/> at the end of the method
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.modelRecordRemarkFlags">
            <summary>
            Pointing to important events and/or facts of this record
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordRemarkFlags.irregularOperation">
            <summary>
            Irregular operation: the algorithm this record is following had minor irregularities during operation
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordRemarkFlags.broken">
            <summary>
            Broken: one or more major errors occoured during operation of this algorithm
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordRemarkFlags.significant">
            <summary>
            Significant: result this algorithm achieved is significant
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordRemarkFlags.insteresting">
            <summary>
            Insteresting: algorithm log should be examined by researched
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordRemarkFlags.testCriteriaFail">
            <summary>
            The algorithm failed on the evaluation criteria
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordRemarkFlags.testCriteriaPass">
            <summary>
            The algorithm passed the evaluation criteria
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.modelRecordStandaloneBase`1">
            <summary>
            Model for Record that is allowed to be started and finished with direct call, have no childen -- use it for the end nodes
            </summary>
            <typeparam name="TInstance">The type of the instance.</typeparam>
            <seealso cref="T:imbSCI.DataComplex.data.modelRecords.modelRecordBase" />
            <seealso cref="T:imbSCI.Core.reporting.IAppendDataFields" />
            <seealso cref="T:imbSCI.Core.reporting.IAppendDataFieldsExtended" />
            <seealso cref="T:imbSCI.DataComplex.data.modelRecords.IModelRecord" />
            <seealso cref="!:aceCommonTypes.interfaces.IAutosaveEnabled" />
            <seealso cref="T:imbSCI.Core.interfaces.ILogable" />
            <seealso cref="T:imbSCI.Core.reporting.IConsoleControl" />
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordStandaloneBase`1.#ctor(System.String,`0)">
            <summary>
            Sets testrunstamp and the instance referece <see cref="T:imbSCI.DataComplex.data.modelRecords.modelRecordStandaloneBase`1"/> class.
            </summary>
            <param name="__testRunStamp">The test run stamp.</param>
            <param name="__instance">The instance.</param>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordStandaloneBase`1.instance">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordStandaloneBase`1.parent">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordStandaloneBase`1.recordStart(System.String,System.String,System.Object[])">
            <summary>
            Records the start. Make sure to call <see cref="!:_recordStart"/> at beginning of the method
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordStandaloneBase`1.recordFinish(System.Object[])">
            <summary>
            Records the finish. Make sure to call <see cref="!:_recordFinish"/> at the end of the method
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.modelRecordStateEnum">
            <summary>
            State of the record
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordStateEnum.notStarted">
            <summary>
            Not started: the record is still unactive, waiting for <see cref="!:modelRecordParentBase.recordStart"/> call
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordStateEnum.started">
            <summary>
            Started: the record is running.
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.data.modelRecords.modelRecordStateEnum.finished">
            <summary>
            Finished: the record is closed on this algorithm.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordSummaryBase`3.summaryFinished">
            <summary>
            Finish this summary record
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordSummaryBase`3._summaryFinished">
            <summary>
            Boing to be executed before <see cref="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinish"/> and <see cref="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinishDefault"/>
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordSummaryBase`3.sideRecordSets">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordSummaryParentBase`5.summaryFinished">
            <summary>
            Finish this summary record
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.modelRecords.modelRecordSummaryParentBase`5._summaryFinished">
            <summary>
            Boing to be executed before <see cref="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinish"/> and <see cref="M:imbSCI.DataComplex.data.modelRecords.modelRecordBase.datasetBuildOnFinishDefault"/>
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelRecordSummaryParentBase`5.sideRecordSets">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.modelRecords.modelSideRecordSetCollection`2">
            <summary>
            Collection used to store side records tracked by <see cref="T:imbSCI.DataComplex.data.modelRecords.modelRecordSummaryBase`3"/>
            </summary>
            <typeparam name="TSideInstance">The type of the side instance.</typeparam>
            <typeparam name="TSideRecord">The type of the side record.</typeparam>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TSideInstance, System.Collections.Generic.List&lt;TSideRecord&gt;&gt;&gt;" />
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelSideRecordSetCollection`2.sideInstances">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.modelRecords.modelSideRecordSetCollection`2.items">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.data.TestMicroEnvironmentBase">
            <summary>
            Class with testing environment resources: <see cref="T:imbSCI.Core.files.folders.folderNode"/>s, log builder (<see cref="T:imbSCI.Core.reporting.render.builders.builderForLogBase"/> and <see cref="T:imbSCI.Core.data.aceAuthorNotation"/>
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.TestMicroEnvironmentBase.ExecuteTest(imbSCI.Core.files.folders.folderNode)">
            <summary>
            Call this method to execute all test methods, declared in child class
            </summary>
            <param name="resultsNode">The results node.</param>
        </member>
        <member name="F:imbSCI.DataComplex.data.TestMicroEnvironmentBase.notation">
            <summary>
            The notation
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.data.TestMicroEnvironmentBase.folder">
            <summary>
            Build output folder
            </summary>
            <value>
            The folder.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.TestMicroEnvironmentBase.folderResources">
            <summary>
            Gets or sets folder for resources.
            </summary>
            <value>
            The folder resources.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.data.TestMicroEnvironmentBase.folderResults">
            <summary>
            Gets or sets folder for results.
            </summary>
            <value>
            The folder results.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.data.TestMicroEnvironmentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.data.TestMicroEnvironmentBase"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.data.TestMicroEnvironmentBase.Done">
            <summary>
            Saves the log and generates directory readme files
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.linknode.linknodeBuilder">
            <summary>
            Static tree structure
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.linknode.linknodeBuilder._root">
            <summary>
            The root element of the tree
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeBuilder.root">
            <summary> </summary>
        </member>
        <member name="F:imbSCI.DataComplex.linknode.linknodeBuilder._sourceNodeList">
            <summary>
            The source node list
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeBuilder.sourceNodeList">
            <summary> </summary>
        </member>
        <member name="F:imbSCI.DataComplex.linknode.linknodeBuilder._sourceNodes">
            <summary>
            The source nodes
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeBuilder.sourceNodes">
            <summary>All source nodes (the ones used to build the structure) indexed by original path</summary>
        </member>
        <member name="F:imbSCI.DataComplex.linknode.linknodeBuilder._newpathNodes">
            <summary>
            The newpath nodes
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeBuilder.newpathNodes">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeBuilder.countExisting">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeBuilder.Add(System.String,System.Object,System.Int32)">
            <summary>
            Adds the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="metaObject">The meta object.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeBuilder.GetMetasByPath``1(System.String,System.Boolean)">
            <summary>
            Gets the metas by path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <param name="useNewPath">if set to <c>true</c> [use new path].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeBuilder.GetByMeta(System.Object)">
            <summary>
            Gets the by meta.
            </summary>
            <param name="meta">The meta.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeBuilder.GetByStructurePath(System.String)">
            <summary>
            Gets the by structure path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeBuilder.GetByOriginalPath(System.String)">
            <summary>
            Gets the by original path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.linknode.linknodeElement">
            <summary>
            Element of static tree structure built with <see cref="T:imbSCI.DataComplex.linknode.linknodeBuilder"/>
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithChildSelector" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithPath" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithParent" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithPathAndChildSelector" />
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeElement.setnode(System.String,System.String,imbSCI.DataComplex.linknode.linknodeElement,imbSCI.DataComplex.linknode.linknodeElement,System.Int32)">
            <summary>
            Setnodes the specified path.
            </summary>
            <param name="__path">The path.</param>
            <param name="__name">The name.</param>
            <param name="__parent">The parent.</param>
            <param name="__root">The root.</param>
            <param name="__level">The level.</param>
            <param name="__meta">The meta.</param>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeElement.setmeta(System.Object)">
            <summary>
            Setmetas the specified meta.
            </summary>
            <param name="__meta">The meta.</param>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.originalPath">
            <summary>
            Original path -- only for source nodes.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.meta">
            <summary>
            Gets or sets the meta.
            </summary>
            <value>
            The meta.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeElement.haveMeta(System.Boolean)">
            <summary>
            Check if any meta is assigned to this node and optionally> if any direct child has any meta object assigned
            </summary>
            <param name="checkChildrenToo">if set to <c>true</c> [check children too].</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.level">
            <summary>
            Depth level. 0 is root, 1+ are children
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.score">
            <summary>
            Gets or sets the score.
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.name">
            <summary>
            Ime koje je dodeljeno objektu
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.path">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeElement.Count">
            <summary>
            Number of child items
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeElement.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeElement.indexOf(imbSCI.Data.interfaces.IObjectWithChildSelector)">
            <summary>
            Index of supplied child - in his collection
            </summary>
            <param name="child"></param>
            <returns>
            -1 if not found
            </returns>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.parent">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.linknode.linknodeElement.root">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeTools.buildParentScoreCollection(imbSCI.DataComplex.linknode.linknodeElement)">
            <summary>
            Builds the parent score collection.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeTools.buildParentScoreTable(imbSCI.DataComplex.linknode.linknodeElement)">
            <summary>
            Builds the parent score table.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.linknode.linknodeTools.buildNode(imbSCI.DataComplex.linknode.linknodeElement,System.String,System.Object,System.Int32)">
            <summary>
            Processes the <c>path</c>, builds nodes if missing and adds scores to existing elements. Supplied meta object is attached to the last node
            </summary>
            <param name="root">The root.</param>
            <param name="path">The path.</param>
            <param name="meta">The meta.</param>
            <param name="score">The score.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.builders.diagramBuilderBase.childDepthLimit">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.builders.diagramBuilderForType`1">
            <summary>
            Builds diagram using Type reflection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.builders.diagramBuilderForType`1.childDepthLimit">
            <summary>
            Limit of depth allowed
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.builders.diagramBuilderUniversalTree">
            <summary>
            Universal diagram builder for parent->children hierarchical objects
            </summary>
            <seealso cref="T:imbSCI.DataComplex.diagram.builders.diagramBuilderBase" />
        </member>
        <member name="M:imbSCI.DataComplex.diagram.builders.diagramBuilderUniversalTree.buildModel(imbSCI.DataComplex.diagram.diagramModel,imbSCI.Data.interfaces.IObjectWithPathAndChildSelector)">
            <summary>
            Builds the diagram model from an object with children
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.builders.diagramBuilderUniversalTree.buildChildren(imbSCI.DataComplex.diagram.diagramModel,imbSCI.DataComplex.diagram.core.diagramNode,System.Collections.IEnumerable,imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum,imbSCI.DataComplex.diagram.enums.diagramLinkTypeEnum,System.Boolean)">
            <summary>
            Builds the children and returns newly built nodes
            </summary>
            <param name="model">The model.</param>
            <param name="parent">The parent.</param>
            <param name="source">The source.</param>
            <param name="defShapeType">Type of the definition shape.</param>
            <param name="defLinkType">Type of the definition link.</param>
            <param name="doDegradeImportance">if set to <c>true</c> [do degrade importance].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.builders.diagramBuilderUniversalTree.buildNode(imbSCI.DataComplex.diagram.diagramModel,imbSCI.Data.interfaces.IObjectWithPathAndChildSelector)">
            <summary>
            Builds a node.
            </summary>
            <param name="model">The diagram model.</param>
            <param name="source">The source object to build from</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.core.diagramElementBase">
            <summary>
            Base class for all elements within <see cref="T:imbSCI.DataComplex.diagram.diagramModel" />
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramElementBase.name">
            <summary>
            UID name of this diagram element - for Links no need to be unique
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramElementBase.description">
            <summary>
            Human-readable description text to appear inside or above diagram element
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramElementBase.color">
            <summary>
            Associated color role - good idea to be sinchronized with: <see cref="T:imbSCI.Core.reporting.colors.acePaletteRole"/>
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramElementBase.importance">
            <summary>
            Associated importance level - good idea to be sinchronized with: <see cref="T:imbSCI.Core.reporting.colors.acePaletteVariationRole"/>
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramElementBase.relatedObject">
            <summary>
            Object that is logicaly related to this diagram element
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramElementBase.parent">
            <summary>
            Reference to <see cref="T:imbSCI.DataComplex.diagram.diagramModel"/> that contains this element
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.core.diagramLink">
            <summary>
            Model element representing link between two nodes
            </summary>
            <seealso cref="T:imbSCI.DataComplex.diagram.core.diagramElementBase" />
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramLink.type">
            <summary>
            Link type
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramLink.isDoubleDirected">
            <summary>
            If link has arrow on both directions
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramLink.isToDirected">
            <summary>
            Should arrow appear next to <see cref="P:imbSCI.DataComplex.diagram.core.diagramLink.to"/> node
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramLink.isFromDirected">
            <summary>
            Should arrow appear next to <see cref="P:imbSCI.DataComplex.diagram.core.diagramLink.from"/> node
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramLink.from">
            <summary>
            The node link points from
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramLink.to">
            <summary>
            The node link points to
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.core.diagramNode">
            <summary>
            Node that is part of the <see cref="T:imbSCI.DataComplex.diagram.diagramModel"/>
            </summary>
            <seealso cref="!:imbReportingCore.diagram.diagramElementBase" />
        </member>
        <member name="P:imbSCI.DataComplex.diagram.core.diagramNode.shapeType">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.diagramModel">
            <summary>
            Abstract model of a diagram. Flowchart type of diagram is main purpose of this namespace
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.direction">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.diagramClassName">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.diagramModel.AddLink(imbSCI.DataComplex.diagram.core.diagramNode,imbSCI.DataComplex.diagram.core.diagramNode,imbSCI.DataComplex.diagram.enums.diagramLinkTypeEnum,System.String,System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Adds the link.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="type">The type.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.hashList">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.diagramModel.AddNode(System.String,imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum,System.String,System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Creates new node in the model
            </summary>
            <param name="__description">The description.</param>
            <param name="type">The type.</param>
            <param name="__name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.name">
            <summary>
            Human-readable title for this diagram
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.description">
            <summary>
            Human-readable description for this diagram
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.nodeByHash">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.linkByHash">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.links">
            <summary>
            Collection of links
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.nodes">
            <summary>
            Collection of nodes
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.linkCount">
            <summary>
            Gets the link count.
            </summary>
            <value>
            The link count.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.nodeCount">
            <summary>
            Gets the node count.
            </summary>
            <value>
            The node count.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.diagramModel.isNodeNameAcceptable(System.String)">
            <summary>
            Determines whether is specified name acceptable for new node.
            </summary>
            <param name="__name">Name to be attached to a <see cref="T:imbSCI.DataComplex.diagram.core.diagramNode"/></param>
            <returns>
              <c>true</c> if [is node name acceptable] [the specified name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:imbSCI.DataComplex.diagram.diagramModel.lastNamingIteration">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.diagramModel.getUID(imbSCI.DataComplex.diagram.core.diagramElementBase,System.Boolean,System.Boolean)">
            <summary>
            Gets the universal ID name for specified element
            </summary>
            <param name="element">The element.</param>
            <param name="autoSet">if set to <c>true</c> [automatic set].</param>
            <param name="useRelatedObject">if set to <c>true</c> [use related object].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.enums.diagramDirectionEnum">
            <summary>
            Direction of flowchart diagram
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramDirectionEnum.TB">
            <summary>
            Top to Bottom
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramDirectionEnum.BT">
            <summary>
            Bottom to top
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramDirectionEnum.RL">
            <summary>
            Right to left
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramDirectionEnum.LR">
            <summary>
            The lr
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramDirectionEnum.TD">
            <summary>
            Same as <see cref="F:imbSCI.DataComplex.diagram.enums.diagramDirectionEnum.TB"/>
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.enums.diagramLinkTypeEnum">
            <summary>
            Type of link between nodes
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramLinkTypeEnum.normal">
            <summary>
            The normal line
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramLinkTypeEnum.dotted">
            <summary>
            The dotted line
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramLinkTypeEnum.thick">
            <summary>
            The thick line
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum">
            <summary>
            Type of shape that node should be represendet
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum.normal">
            <summary>
            The normal rectangle
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum.rounded">
            <summary>
            The rounded rectangle
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum.circle">
            <summary>
            The circle shaped
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum.flagToRight">
            <summary>
            The flag to right:    ]
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum.flagToLeft">
            <summary>
            The flag to left: [
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.diagram.enums.diagramNodeShapeEnum.rhombus">
            <summary>
            The rhombus shape
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.diagram.output.diagramMermaidOutput">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.DataComplex.diagram.output.diagramOutputBase" />
        </member>
        <member name="M:imbSCI.DataComplex.diagram.output.diagramMermaidOutput.getOutput(imbSCI.DataComplex.diagram.diagramModel,imbSCI.Core.reporting.colors.acePaletteProvider)">
            <summary>
            Gets the output.
            </summary>
            <param name="model">The model.</param>
            <param name="colorProvider">The color provider.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.output.diagramMermaidOutput.getLinkDeclaration(imbSCI.DataComplex.diagram.core.diagramLink)">
            <summary>
            Gets the link declaration.
            </summary>
            <param name="link">The link.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.output.diagramMermaidOutput.getNodeDeclaration(imbSCI.DataComplex.diagram.core.diagramNode)">
            <summary>
            Gets the node declaration.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.output.diagramMermaidOutput.getOutputLinksDeclaration(imbSCI.DataComplex.diagram.diagramModel)">
            <summary>
            Gets the output links declaration.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.output.diagramMermaidOutput.getOutputNodesDeclaration(imbSCI.DataComplex.diagram.diagramModel)">
            <summary>
            Gets the output nodes declaration.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.diagram.output.diagramMermaidOutput.getOutputStyleDeclaration(imbSCI.DataComplex.diagram.diagramModel,imbSCI.Core.reporting.colors.acePaletteProvider)">
            <summary>
            Gets the output style declaration.
            </summary>
            <param name="model">The model.</param>
            <param name="colorProvider">The color provider.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.extensions.data.EpplusCsvConverter">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.EpplusCsvConverter.WriteRecordToFile(System.Collections.Generic.List{System.String},System.IO.StreamWriter,System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="record">List of cell values</param>
             <param name="sw">Open Writer to file</param>
             <param name="rowNumber">Current row num</param>
             <param name="totalRowCount"></param>
             <remarks>Avoiding writing final empty line so bulk import processes can work.</remarks>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.EpplusCsvConverter.GetCellText(OfficeOpenXml.ExcelRangeBase)">
            <summary>
            Can't use .Text: http://epplus.codeplex.com/discussions/349696
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.extensions.data.formats.csvFileExtensions">
            <summary>
            2017: Extensions for CSV reading and export
            </summary>
            <remarks>
            <para>Supports: CSV inline, files vs object collection, files vs DataTable</para>
            </remarks>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.csvFileExtensions.fromCsvFileToTable(System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Populates or creates DataTable from file supplied as path
            </summary>
            <param name="path"></param>
            <param name="table"></param>
            <param name="clearExistingRecords"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.csvFileExtensions.stringToCSVCell(System.String)">
            <summary>
            Turn a string into a CSV cell output
            </summary>
            <param name="str">String to output</param>
            <returns>The CSV cell formatted string</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.csvFileExtensions.toCsvFileFromTable(System.Data.DataTable,System.String,imbSCI.Data.enums.getWritableFileMode,System.String,System.String)">
            <summary>
            Saves content of DataTable to CSV file on supplied path
            </summary>
            <param name="table"></param>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="separator"></param>
            <param name="newlineSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.csvFileExtensions.fromCsvFile``1(System.Collections.Generic.IList{``0},System.String,System.Boolean)">
            <summary>
            Reads data from CSV file and returns collection of an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="path">The path.</param>
            <param name="clearExistingRecords">if set to <c>true</c> [clear existing records].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">path - File path can't be null nor empty</exception>
            <exception cref="T:System.ArgumentException">
            path - File at ["+path+"] does not exist.
            or
            path - File reading failed [" + path + "].
            </exception>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.csvFileExtensions.toCsvFile``1(System.Collections.Generic.IEnumerable{``0},System.String,imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            2017: Saves CSV to file from path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Typed IList to write CSV for. For properties with Display Name attribute it will use the attribute value</param>
            <param name="path">Relative or apsolute path where to store the file</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.csvFileExtensions.toCSV(System.Data.DataTable,System.Boolean,System.String,System.String,System.String[])">
            <summary>
            2017: CSV imbVeles implementation - Extract data from DataTable into CSV string
            </summary>
            <param name="data"></param>
            <param name="doIncludeCaption"></param>
            <param name="delimiter"></param>
            <param name="fieldsOrCategoriesToShow">Fields or Categories to include. If empty them all</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions">
            <summary>
            Extensions for DataTable creation and data manipulation
            </summary>
            \ingroup_disabled ace_ext_datastructs
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.AddListToColumn(System.Data.DataTable,System.Collections.IEnumerable,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds data from the <c>list</c> into new or existing column with specified <c>columnName</c>. Updates existing rows or creates new rows if required
            </summary>
            <param name="table">The table.</param>
            <param name="list">The list.</param>
            <param name="columnName">Name of the column - it will automatically give name if not specified</param>
            <param name="skipRows">Number of rows to skip before start with data insertation</param>
            <param name="description">The description of the column</param>
            <param name="letter">The letter or code associated with the column</param>
            <param name="displayName">The display name for the column</param>
            <returns>Number of newly created rows</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.getExportFormatByExtension(System.String)">
            <summary>
            Gets the format by filename extension.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.deserializeExcelFileToDataSet(System.String,System.Data.DataSet,imbSCI.Core.reporting.ILogBuilder,imbSCI.Data.enums.tableReporting.dataTableIOFlags)">
            <summary>
            Deserializes a excel file to the DataSet.
            </summary>
            <param name="path">The path.</param>
            <param name="target">The target.</param>
            <param name="log">The log.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.deserializeFolderExcelFilesToDataSet(System.IO.DirectoryInfo,System.Data.DataSet,imbSCI.Core.reporting.ILogBuilder,System.String)">
            <summary>
            Deserializes the folder excel files to data set.
            </summary>
            <param name="directory">The directory.</param>
            <param name="target">The target.</param>
            <param name="log">The log.</param>
            <param name="filenamePattern">The filename pattern.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.GetIOFlags(System.Object[])">
            <summary>
            Extracting Input Output flags from array of resources
            </summary>
            <param name="resources">The resources.</param>
            <returns>Detected flags</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.deserializeDataTable(System.String,imbSCI.Data.enums.reporting.dataTableExportEnum,imbSCI.Core.files.folders.folderNode,System.Data.DataTable,System.Object[])">
            <summary>
            Deserializes the data table.
            </summary>
            <param name="filename">The filename or filepath.</param>
            <param name="format">The format to read from</param>
            <param name="directory">The directory (if filename was supplied and not full filepath)</param>
            <param name="table">The table.</param>
            <param name="resources">Supports: IObjectWithNameAndDescription</param>
            <returns></returns>
            <exception cref="T:imbSCI.DataComplex.exceptions.dataException">
            File path not accessable: " + filepath - null - null - deserializeDataTable
            or
            Deserialization error - imbDataTableExtensions->deserialize
            </exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.serializeDataTable(System.Data.DataTable,imbSCI.Data.enums.reporting.dataTableExportEnum,System.String,imbSCI.Core.files.folders.folderNode,System.Object[])">
            <summary>
            Serializes the data table into choosed format and returns file path
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <param name="filename">The filename, without extension.</param>
            <param name="directory">The directory to save into.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.GetTotalRowsCount(System.Data.DataSet)">
            <summary>
            Gets the total rows count.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.ConstructTableWithRandomContent(System.Object,System.Int32,System.Int32)">
            <summary>
            Constructs the data table and populates with random content of the table with.
            </summary>
            <param name="host">Host actually has no role in this extension. It-s just there to make this function easier to find</param>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.AppendDataFields(System.Data.DataTable,System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.ToDataSet(OfficeOpenXml.ExcelPackage,System.Boolean)">
            <summary>
            Extracts a DataSet from the ExcelPackage.
            </summary>
            <param name="package">The Excel package.</param>
            <param name="firstRowContainsHeader">if set to <c>true</c> [first row contains header].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.ToDataSet(OfficeOpenXml.ExcelPackage,System.Int32)">
            <summary>
            Extracts a DataSet from the ExcelPackage.
            </summary>
            <param name="package">The Excel package.</param>
            <param name="headerRow">The header row. Use 0 if there is no header row. Value must be 0 or greater.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">headerRow must be 0 or greater.</exception>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.selectColumns(System.Data.DataTable,System.String[])">
            <summary>
            Selects columns from data table - if empty select all columns
            </summary>
            <param name="data"></param>
            <param name="fieldsOrCategoriesToShow"></param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.name_tokens">
            <summary>
            Lista tokena za filtriranje
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.name_description">
            <summary>
            Opis iz propertija
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.name_category">
            <summary>
            Opis iz propertija
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.name_property">
            <summary>
            Referenca prema propertiju iz kojeg se puni polje
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.name_object">
            <summary>
            Referenca prema objektu iz koga je napravljen red
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.renameColumnsDataTableToType(System.Data.DataTable,System.Type)">
            <summary>
            Renames the type of the columns data table to.
            </summary>
            <param name="table">The table.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.formats.imbDataTableExtensions.shiftColumnNames(System.Data.DataTable,System.String)">
            <summary>
            Shifts the column names: adds prefix in front of each column name
            </summary>
            <param name="table">The table.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="T:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions">
            <summary>
            Extensions for EPPlus
            </summary>
            \ingroup_disabled report_ll
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.setDataToHeaderFooter(OfficeOpenXml.ExcelWorksheet,System.Data.PropertyCollection)">
            <summary>
            Sets the data to header footer.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="dataMeta">The data meta.</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.setDataInfoStandard(OfficeOpenXml.ExcelWorkbook,System.Data.PropertyCollection)">
            <summary>
            Deploys meta information (properties and custom properties) into workbook.
            </summary>
            <param name="workbook">The workbook to apply data into</param>
            <param name="dataMeta">The data meta collection to use as data source</param>
            <param name="includeBasic">What fields from templateFieldBasic collection to add as CustomProperties of document</param>
            <param name="includeCP">What fields from templateFieldBasic collection to add as CustomProperties of document</param>
            <param name="extraFields">The extra fields to add as CustomProperties of the document</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.setDataInfoCustomProperties(OfficeOpenXml.ExcelWorkbook,System.Data.PropertyCollection,System.Object[])">
            <summary>
            Deploys custom meta information (custom properties) into workbook. If field not found in dataMeta it will not create custom property for it.
            </summary>
            <param name="workbook">The workbook to apply data into</param>
            <param name="dataMeta">The data meta collection to use as data source</param>
            <param name="extraFields">The extra fields to add as CustomProperties of the document</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.SetValue(OfficeOpenXml.ExcelWorksheet,imbSCI.Core.reporting.zone.cursor,System.Object,System.Boolean,imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Sets the value in cell on current cursor position
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="cur">The current.</param>
            <param name="value">The value.</param>
            <param name="doEnter">if set to <c>true</c> [do enter].</param>
            <param name="afterDirection">The after direction.</param>
            <returns>Returns <c>ExcelRange</c> pointing to cell affected</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.SetValues(OfficeOpenXml.ExcelWorksheet,imbSCI.Core.reporting.zone.cursor,System.Collections.IEnumerable,System.Boolean,imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Set values into cells, respecting <c>direction</c>. Returns <c>ExcelRange</c> pointing to cells affected.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="cur">The current.</param>
            <param name="value">The value.</param>
            <param name="doEnter">if set to <c>true</c> [do enter].</param>
            <param name="direction">The direction.</param>
            <returns>Returns <c>ExcelRange</c> pointing to cells affected</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.SetDataTable(OfficeOpenXml.ExcelWorksheet,imbSCI.Core.reporting.zone.cursor,System.Data.DataTable,imbSCI.Core.enums.cursorVariatorHeadFootFlags,imbSCI.Data.enums.cursorVariatorOddEvenFlags)">
            <summary>
            Inserts DataTable content at current currsor position. Options: doInsertCaptions, doInsertRowID columnprefix (this is abanded)
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="cur">The current.</param>
            <param name="data">The data.</param>
            <param name="doInsertCaptions">if set to <c>true</c> [do insert captions].</param>
            <param name="doInsertRowId">if set to <c>true</c> [do insert row identifier].</param>
            <returns>Range of newly populated cells, including automatically created extra row and column</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.getExcelRange(imbSCI.Core.reporting.zone.selectRangeArea,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Gets the Escel range from worksheet.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="area">The area.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.imbEPPlusExtensions.getUniqueName(OfficeOpenXml.ExcelWorksheets,System.String)">
            <summary>
            Gets the name of the unique.
            </summary>
            <param name="wks">The Worksheets collection to make name for</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.SetLetter(System.Data.DataRow,System.String)">
            <summary>
            Sets the letter column (dc_letter)
            </summary>
            <param name="dr">The dr.</param>
            <param name="letter">The letter.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.AddExtraRowInfo(System.Data.DataTable,imbSCI.Core.collection.PropertyEntryColumn,System.Int32)">
            <summary>
            Adds row with extra information
            </summary>
            <param name="dt">The dt.</param>
            <param name="columnInfo">The column information.</param>
            <param name="widthLimit">The width limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.AddExtraRowInfo(System.Data.DataTable,imbSCI.Data.enums.fields.templateFieldDataTable,System.Int32)">
            <summary>
            Adds row with extra information
            </summary>
            <param name="dt">The dt.</param>
            <param name="columnInfo">The column information.</param>
            <param name="widthLimit">The width limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.AddStringLine(System.Data.DataTable,System.String,System.Data.DataColumn)">
            <summary>
            Adds the string line into table
            </summary>
            <param name="dt">The dt.</param>
            <param name="text">The text.</param>
            <param name="col">The col.</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.AddExtraRow(System.Data.DataTable,imbSCI.Data.enums.fields.templateFieldDataTable,System.Int32)">
            <summary>
            Adds row with extra information
            </summary>
            <param name="dt">The dt.</param>
            <param name="columnInfo">The column information.</param>
            <param name="widthLimit">The width limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.AddExtraRow(System.Data.DataTable,imbSCI.Core.collection.PropertyEntryColumn,System.Int32)">
            <summary>
            Adds row with extra information
            </summary>
            <param name="dt">The dt.</param>
            <param name="columnInfo">The column information.</param>
            <param name="widthLimit">The width limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.AddExtraRow(System.Data.DataTable,System.Enum,System.Int32)">
            <summary>
            Adds row with information taken from the <see cref="P:System.Data.DataTable.ExtendedProperties" /> --- at the current position in the table
            </summary>
            <param name="dt">The dt.</param>
            <param name="extra">The extra.</param>
            <param name="widthLimit">The width limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.SetData(System.Data.DataRow,System.Object)">
            <summary>
            Sets data in the row by columnName vs property match
            </summary>
            <param name="dc">The dc.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.modify.dataRowForStats.SetPercentValueInCents(System.Data.DataRow,System.Int32)">
            <summary>
            Value is already in cents
            </summary>
            <param name="dr">The dr.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.collectionAggregation.GetAggregates``1(System.Collections.Generic.IEnumerable{``0},imbSCI.Core.math.aggregation.dataPointAggregationType,System.Boolean)">
            <summary>
            Gets aggregated version of the objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.extensions.data.operations.collectionAggregationResult`1">
            <summary>
            Results of collection aggregation
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:System.Collections.Generic.Dictionary&lt;aceCommonTypes.math.aggregation.dataPointAggregationType, T&gt;" />
        </member>
        <member name="T:imbSCI.DataComplex.extensions.data.operations.collectionAggregationResultSet`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.String, aceCommonTypes.extensions.data.collectionAggregationResult&lt;T&gt;&gt;" />
        </member>
        <member name="T:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations">
            <summary>
            Operations over data contained in single or multiple datatables
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.FilenameForTable(System.Data.DataTable,System.String)">
            <summary>
            Filenames for table.
            </summary>
            <param name="table">The table.</param>
            <param name="proposal">The proposal.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.ClearData(System.Data.DataTable,System.String[])">
            <summary>
            Clears the data (sets the default value) from columns named in the argument
            </summary>
            <param name="table">The table.</param>
            <param name="columnsToClear">The columns to clear.</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.AddTable(System.Data.DataSet,System.Data.DataTable)">
            <summary>
            Adds the table into dataset and performs auto rename if the table already exists there
            </summary>
            <param name="dataset">The dataset.</param>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetLegendDataTable(System.Data.DataTable,System.Collections.Generic.List{imbSCI.Data.enums.fields.templateFieldDataTable})">
            <summary>
            Creates Legend for a data table
            </summary>
            <param name="table">The table.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetTableVersionWithoutEmptyRows(System.Data.DataTable,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets a table version, without rows having default field value for all columns, except ones specified in <c>columnsToIgnore</c>
            </summary>
            <param name="table">The table.</param>
            <param name="columnsToIgnore">The columns to ignore.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetSubColumnTableByParams(System.Data.DataTable,System.Int32,System.String[])">
            <summary>
            Gets table with limited number of rows and with selected column groups. Params alias for <see cref="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetSubColumnTable(System.Data.DataTable,System.Int32,System.String[])"/>
            </summary>
            <param name="table">The table.</param>
            <param name="rowsLimit">The rows limit. -1 to disable row limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetSubColumnTable(System.Data.DataTable,System.Int32,System.String[])">
            <summary>
            Gets table with limited number of rows and with selected column groups
            </summary>
            <param name="table">The table.</param>
            <param name="rowsLimit">The rows limit. -1 to disable row limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetLimited(System.Data.DataTable,System.Int32)">
            <summary>
            Gets the limited.
            </summary>
            <param name="table">The table.</param>
            <param name="rowsLimit">The rows limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.CopyRowsFrom(System.Data.DataTable,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Copies the rows from <c>source</c> into <c>table</c>
            </summary>
            <param name="table">The table to copy into.</param>
            <param name="source">The source data table.</param>
            <param name="rowsSkip">Rows to skip.</param>
            <param name="rowsLimit">Rows limit</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetRowCollectionTable(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String)">
            <summary>
            Merges all table rows into single table with all rows
            </summary>
            <param name="tables">The tables.</param>
            <param name="tablename">The tablename.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetSumDataSet(System.Collections.Generic.IEnumerable{System.Data.DataSet},System.String)">
            <summary>
            Gets the sum data set.
            </summary>
            <param name="datasets">The datasets.</param>
            <param name="dataSetName">Name of the data set.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.CleanMeta(System.Data.DataTable)">
            <summary>
            Cleans the meta.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetAggregatedTable(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String,imbSCI.Core.math.aggregation.dataPointAggregationAspect,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the aggregated table> where values are computed as agregation from multi source tables. 
            </summary>
            <param name="tables">The tables.</param>
            <param name="tablename">The tablename.</param>
            <param name="aspect">The aspect.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.dataTableDataOperations.GetSumTable(System.Collections.Generic.IEnumerable{System.Data.DataTable},System.String)">
            <summary>
            Creates summary table by summing all matching cells of <see cref="T:System.Int32"/>  and <see cref="T:System.Double"/>
            </summary>
            <param name="tables">The tables.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.DataTableETL.ToDataTable``1(System.Collections.Generic.IList{``0},System.Reflection.BindingFlags)">
            <summary>
            To the data table: https://www.codeproject.com/Tips/784090/Conversion-Between-DataTable-and-List-in-Csharp
            Adjusted code: introduced custom flags
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.DataTableETL.CreateNestedDataTable``2(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates the nested data table. http://stackoverflow.com/questions/33823820/convert-generic-nested-list-to-datatable
            </summary>
            <typeparam name="TOuter">The type of the outer.</typeparam>
            <typeparam name="TInner">The type of the inner.</typeparam>
            <param name="list">The list.</param>
            <param name="innerListPropertyName">Name of the inner list property.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.DataTableETL.DataTableToList``1(System.Data.DataTable)">
            <summary>
            Converts a DataTable to a list with generic objects. credits: https://codereview.stackexchange.com/questions/30714/converting-datatable-to-list-of-class
            </summary>
            <typeparam name="T">Generic object</typeparam>
            <param name="table">DataTable</param>
            <returns>List with generic objects</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.DataTableETL.GetInversedDataTable(System.Data.DataTable,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a Inverted DataTable
            </summary>
            <param name="table">Provided DataTable</param>
            <param name="columnX">X Axis Column</param>
            <param name="columnY">Y Axis Column</param>
            <param name="columnZ">Z Axis Column (values)</param>
            <param name="columnsToIgnore">Whether to ignore some column, it must be
            provided here</param>
            <param name="nullValue">null Values to be filled</param>
            <returns>C# Pivot Table Method  - Felipe Sabino</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.operations.DataTableETL.GetInversedDataTable(System.Data.DataTable,System.String,System.String[])">
            <summary>
            Gets a Inverted DataTable
            </summary>
            <param name="table">DataTable do invert</param>
            <param name="columnX">X Axis Column</param>
            <param name="nullValue">null Value to Complete the Pivot Table</param>
            <param name="columnsToIgnore">Columns that should be ignored in the pivot
            process (X Axis column is ignored by default)</param>
            <returns>C# Pivot Table Method  - Felipe Sabino</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.BuildDataTableHor``1(``0,imbSCI.Core.collection.PropertyEntryColumn,System.String[])">
            <summary>
            Builds the data table hor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="extraColumn">The extra column.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.BuildDataTableHorDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.String,System.String,imbSCI.Core.collection.PropertyEntryColumn,System.String[])">
            <summary>
            Builds the data table hor dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="itemKeys">The item keys.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.BuildDataTableHorizontal(System.Collections.IEnumerable,System.String,System.String,imbSCI.Core.collection.PropertyEntryColumn,System.String[])">
            <summary>
            Builds the data table using reflection and selected columns. Supports formating instruction, expression and other advanced atributes
            </summary>
            <param name="items">The items.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.convertPEColumn(imbSCI.Core.collection.PropertyEntryColumn)">
            <summary>
            Converts the pe column.
            </summary>
            <param name="extras">The extras.</param>
            <returns>[0] extra rows before main paty, [1] extra rows after</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.BuildDataShema(System.Object,System.String[],imbSCI.Core.collection.PropertyEntryColumn,imbSCI.Core.data.settingsEntriesForObject,System.Data.DataTable)">
            <summary>
            Builds the data table.
            </summary>
            <param name="source">The source.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.columnsToSkip">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.AddToShema(System.Data.DataTable,System.String,System.Object,imbSCI.Core.data.settingsEntriesForObject)">
            <summary>
            Adds column using object <c>source</c> reflection information
            </summary>
            <param name="dt">The dt.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="source">The source.</param>
            <param name="seo">The seo.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.buildComparativeDataTable(System.Collections.Generic.IEnumerable{imbSCI.Core.collection.PropertyCollectionExtended},System.String,System.String,System.String,imbSCI.Core.collection.PropertyEntryDictionary)">
            <summary>
            Builds vertical data table - aka: comparative table
            </summary>
            <param name="items">The items.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.buildDataTableHorizontal(System.Collections.Generic.IEnumerable{imbSCI.Core.collection.PropertyCollectionExtended},System.String,System.String,imbSCI.Core.collection.PropertyEntryDictionary)">
            <summary>
            Builds the data table - from all entries inside the collection
            </summary>
            <param name="columns">The columns.</param>
            <returns>DataTable ready for output</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.addTableExtendedRows(System.Data.DataTable,System.Collections.Generic.IEnumerable{System.Data.PropertyCollection},imbSCI.Core.collection.PropertyEntryDictionary)">
            <summary>
            Adds the table extended rows.
            </summary>
            <param name="table">The table.</param>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <exception cref="T:System.ArgumentNullException">columns - Column shema never supplied -- and the table has no shema attached on templateFieldDataTable.shema_dictionary</exception>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.buildDataTableVertical(imbSCI.Core.collection.PropertyEntryDictionary,System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.PropertyCollection})">
            <summary>
            Builds vertical datatable
            </summary>
            <param name="columns">The columns.</param>
            <param name="__title">The title.</param>
            <param name="__description">The description.</param>
            <param name="rows">The rows.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.buildDataTableVertical(imbSCI.Core.collection.PropertyCollectionExtended,System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.PropertyCollection})">
            <summary>
            Builds the data table.
            </summary>
            <param name="shema">The shema.</param>
            <param name="__title">The title.</param>
            <param name="__description">The description.</param>
            <param name="rows">The rows.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.getColumnValue(imbSCI.Core.collection.PropertyEntry,System.Object,System.Int32,System.String)">
            <summary>
            Gets the right column value
            </summary>
            <param name="column">The column.</param>
            <param name="pce">The pce.</param>
            <param name="c">Row count - required if <see cref="F:imbSCI.Core.collection.PropertyEntryColumn.autocount_idcolumn"/> is the <c>column</c>.</param>
            <param name="autocount_format">The autocount format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.getColumnValue(imbSCI.Core.collection.PropertyEntry,imbSCI.Core.collection.PropertyCollectionExtended,System.Int32,System.String)">
            <summary>
            Gets the right column value
            </summary>
            <param name="column">The column.</param>
            <param name="pce">The pce.</param>
            <param name="c">Row count - required if <see cref="F:imbSCI.Core.collection.PropertyEntryColumn.autocount_idcolumn"/> is the <c>column</c>.</param>
            <param name="autocount_format">The autocount format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.buildConsolidatedColumnDictionary(System.Collections.Generic.IEnumerable{imbSCI.Core.collection.PropertyCollectionExtended},imbSCI.Core.collection.PropertyEntryColumn,System.Object[])">
            <summary>
            Builds the consolidated column dictionary scanning all <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/> items.
            </summary>
            <remarks>
            <para>If <c>__allowedColumns</c> are not specified it will include any newly column found inside collection</para>
            </remarks>
            <param name="obligatoryColumns">The obligatory columns.</param>
            <param name="__allowedColumns">The allowed columns.</param>
            <returns>Set of columns ready to be used for DataTable creation and for similar tasks</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.PropertyDataStructureTools.buildColumnDictionary(imbSCI.Core.collection.PropertyCollectionExtended,imbSCI.Core.collection.PropertyEntryColumn,System.Object[])">
            <summary>
            Builds the consolidated column dictionary scanning all <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/> items.
            </summary>
            <remarks>
            <para>If <c>__allowedColumns</c> are not specified it will include any newly column found inside collection</para>
            </remarks>
            <param name="obligatoryColumns">The obligatory columns.</param>
            <param name="__allowedColumns">The allowed columns.</param>
            <returns>Set of columns ready to be used for DataTable creation and for similar tasks</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.buildDataTableVerticalSummaryTable(System.Object,imbSCI.Core.reporting.globalMeasureUnitDictionary.globalTableEnum)">
            <summary>
            Builds the vertical table with all data
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.buildDataTable(System.Object,System.String,System.Boolean,System.Boolean,System.Boolean,imbSCI.Core.collection.PropertyCollectionExtended,System.String[])">
            <summary>
            Builds the horizontal data table
            </summary>
            <param name="firstItem">The first item.</param>
            <param name="__dataTable">The data table.</param>
            <param name="doInsertItem">if set to <c>true</c> [do insert item].</param>
            <param name="doOnlyWithDisplayName">if set to <c>true</c> [do only with display name].</param>
            <param name="doInherited">if set to <c>true</c> [do inherited].</param>
            <param name="dictionary">The dictionary.</param>
            <param name="fieldsOrCategoriesToShow">The fields or categories to show.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.AddDataTableRow(System.Data.DataTable,System.Object,imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.buildDataTableOptions)">
            <summary>
            Adds the data table row.
            </summary>
            <param name="table">The table.</param>
            <param name="item">The item.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.buildDataTable(System.Object,System.String,imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.buildDataTableOptions,imbSCI.Core.collection.PropertyCollectionExtended,System.String[],imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            2017:: Builds horizontal data table with columns mapping properties of the type.
            </summary>
            <remarks>
            <para>If fieldsCategoriesToShow[] parameters array is empty - filters are not applied</para>
            </remarks>
            <param name="firstItem">Type or Instance to be used for column estraction.</param>
            <param name="__dataTable">Name of data table. If empty or null = type name is used.</param>
            <param name="doInsertItem">If TRUE and first parametar was Instance - it will be transfered as the first row in the DataTable</param>
            <param name="doOnlyWithDisplayName">Only properties with DisplayName attribute. Value of attribute will be mapped to Caption of column</param>
            <param name="doInherited">Should inherited properties be included? FALSE to get only properties declared at class of the object</param>
            <param name="fieldsOrCategoriesToShow">Category or property name to include in DataTable. If its empty it will ignore this criteria. Entries ending with _ are prefix definisions</param>
            <returns>DataTable object with proper DataColumn shema made from Primitive, Enum and ToStrings</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.AddObject(System.Data.DataTable,System.Object)">
            <summary>
            Inserts new DataRow into table, based on input object and existing DataColumn shema of the table
            </summary>
            <param name="table">DataTable with proper DataColumn shema</param>
            <param name="input">Object to extract data from</param>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.DataTableBuilders.buildDataTable(System.Collections.IEnumerable,System.String,System.Boolean,System.Boolean,imbSCI.Core.collection.PropertyCollectionExtended,System.String[])">
            <summary>
            2017::Builds data table out of collection. Supported properties: primitives, enums and IGetFromToString interface types
            </summary>
            <remarks>
            <para>If fieldsCategoriesToShow[] parameters array is empty - filters are not applied</para>
            </remarks>
            <param name="firstItem">Type or Instance to be used for column estraction.</param>
            <param name="__dataTable">Name of data table. If empty or null = type name is used.</param>
            <param name="doOnlyWithDisplayName">Only properties with DisplayName attribute. Value of attribute will be mapped to Caption of column</param>
            <param name="doInherited">Should inherited properties be included? FALSE to get only properties declared at class of the object</param>
            <param name="fieldsOrCategoriesToShow">Category or property name to include in DataTable. If its empty it will ignore this criteria</param>
            <returns>DataTable object with proper DataColumn shema made from Primitive, Enum and ToStrings</returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.dataTableShemaExtensions.GetClonedShema``1(System.Data.DataTable,System.Boolean,System.String[])">
            <summary>
            Gets the cloned shema.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.data.schema.dataTableShemaExtensions.Add(System.Data.DataTable,imbSCI.Core.data.settingsPropertyEntry)">
            <summary>
            Adds column using meta information of <see cref="T:imbSCI.Core.data.settingsPropertyEntry"/>
            </summary>
            <param name="table">The table.</param>
            <param name="spe">The spe.</param>
            <returns>newly added column</returns>
        </member>
        <member name="T:imbSCI.DataComplex.extensions.text.imbStringCleaners">
             <summary>
             Clearing strnigs
             </summary>
            
        </member>
        <member name="P:imbSCI.DataComplex.extensions.text.imbStringCleaners.unicodeToDos">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.extensions.text.imbStringCleaners.unicodeToDosX">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.text.imbStringCleaners.isNonDosChars(System.String)">
            <summary>
            Determines whether it contains ć,ž,š,đ,č -- only small letters
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if [is non dos chars] [the specified input]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.text.imbStringCleaners.toDosCleanDirect(System.String)">
            <summary>
            Uses precompiled replacement - only small letters
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.extensions.text.imbStringCleaners.htmlContentProcess(System.String)">
            <summary>
            Brise sadržaj od nedozvoljenih karaktera i internog HTML-a
            </summary>
            <param name="innerHtml"></param>
            <returns>String without HTML tags and forbidden characters</returns>
            \ingroup_disabled ace_ext_strings
        </member>
        <member name="T:imbSCI.DataComplex.NamespaceGroupDoc">
            <summary>
            <para>
            Extended and typed DataTables, DataTable to Excel reporting, various graph structures, translation tables, trend estimation structures, path DOM, reporting extensions, TF-IDF corpus and document data structures, data structures for reporting and other stuff in context of imbSCI framework
            </para>
            </summary>
            <remarks>
            <example>
                <code source="G:\imbVelesOpenSource\imbSCI.Standard\imbSCI.DataComplex\DataComplexExamples.cs" title="How to use Data Annotation" language="cs" />
            </example>
            </remarks>
        </member>
        <member name="T:imbSCI.DataComplex.NamespaceDoc">
             <inheritdoc/>
        </member>
        <member name="T:imbSCI.DataComplex.path.pathElementFormat">
            <summary>
            2014c> Collection item: pathElementFormat, part of pathElementFormatCollection
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathElementFormat.field">
            <summary>
            FieldInfo objekat sa const vrednosti
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathElementFormat.cleanName">
            <summary>
            Naziv formatiranja
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathElementFormat._format">
            <summary>
            {0} - key trenutnog elementa, {1} - parent
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathElementFormat.prefix">
            <summary>
            prefiks u putanji, iliti element koji je separator
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathElementFormat.sufix">
            <summary>
            sufix u putanji
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathElementFormat.format">
            <summary>
            formatiranje u putanji
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.path.pathElementFormatCollection">
            <summary>
            imbCollectionMeta namenska kolekcija za  pathElementFormat
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.path.pathElementFormatCollection.allPrefixes">
            <summary>
            Vraca sve prefixe koji se pojavljuju u pathElementFormatiranju
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.path.pathFilterInstructions">
            <summary>
            Result of path string parsing
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.regex_allowedType">
            <summary>
            regex za izdvajanje dozvoljenih tipova
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.regex_relationType">
            <summary>
            regex za izdvajanje relation typea
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.isTypeInfoRequest">
            <summary>
            Da li je u pitanju putanja koja ce vratiti imbTypeInfo objekat
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.isExecutableRequest">
            <summary>
            Da li je u pitanju putanja koja poziva izvrsavanje nekog operationa?
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.specialMenuType">
            <summary>
            Tip specijalnog menija koji je zadat preko posebnih simbola u putanji
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.cleanPath">
            <summary>
            verzija putanje bez filtera
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.sourcePath">
            <summary>
            izvorna verzia putanje
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.isShowRelatedProperties">
            <summary>
            Govori da li je prosledjeni path imao instrukcije za AllRelated special sub menu
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.allowedRelations">
            <summary>
            Lista dozvoljenih relacija
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathFilterInstructions.allowedTypeNames">
            <summary>
            Lista dozvoljenih tipova
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.path.pathResolveFlag">
            <summary>
            Odredjuje na koji način se obradjuje path
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.returnPropertyInfo">
            <summary>
            Uvek ce vracati property info path umesto vrednosti - odnosno za resolve ce vracati propertyInfo objekat umesto vrednosti
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.preferPropertyName">
            <summary>
            Preferira koriscenje property-namea
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.preferObjectName">
            <summary>
            Preferira koriscenje imena objekta umesto propertyRealName-a
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.preferIntegerIndexer">
            <summary>
            Preferira koriscenje integer ID indexera [5]
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.preferStringNameIndexer">
            <summary>
            Preferira koriscenje String name indexera - ["ime"]
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.debugMode">
            <summary>
            Aktivira debug mode
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.nullIsAcceptable">
            <summary>
            null je prihvatljiva vrednost -- nece praviti gresku
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.disableDoomyObject">
            <summary>
            iskljucuje pravljenje DebugDoomyObjekta
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.none">
            <summary>
            Normalno radi
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolveFlag.startFromProjectRoot">
            <summary>
            Putanja pocinje da se izvrsava od imbProject objekta -- analogno postavljanju : simbola na pocetku putanje
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathResolverResult.sucess">
            <summary>
            da li su svi segmenti upita pronadjeni
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathResolverResult.nodeFound">
            <summary>
            node koji je pronadjen preko upita
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathResolverResult.parent">
            <summary>
            objekat nad kojim je vrsen upit
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathResolverResult.missing">
            <summary>
            Segmenti putanje koji nisu pronadjeni
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathResolverResult.segments">
            <summary>
            segmenti upita koji je postavljen
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathResolverResult.path">
            <summary>
            Query koji je postavljen
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.unknown">
            <summary>
            nepoznat je rezultat pretrage
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.foundOne">
            <summary>
            Pronasao je tacno trazeni item
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.foundMany">
            <summary>
            Pronasao je vise od jednog itema
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.folderFoundButItemMissing">
            <summary>
            Folder je pronadjen ali fali item
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.folderFoundButFoldersMissing">
            <summary>
            Folder je pronadjen ali fali vise pod foldera koje je trazio path
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.nothingFound">
            <summary>
            nista nije pronadjeno
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.errorInTreeResolve">
            <summary>
            Doslo je do greske prilikom resavanja putanje
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathResolverResultType.errorInResolverResult">
            <summary>
            Greska je u samom resolver rezultatu
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.path.pathSegment">
            <summary>
            Jedan path segment
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathSegment.position">
            <summary>
            Pozicija u pathSegments kolekciji
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathSegment.needle">
            <summary>
            needle deo path segmenta - - bez element format prefix-a
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathSegment.prefix">
            <summary>
            prefix deo path segmenta
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathSegment.isDefined">
            <summary>
            Da li je segment prihvatljiv za primenu
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathSegment.elementPrefix">
            <summary>
            Detektovan format koji je primenjen u segmentu
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.path.pathSegment.create(System.String,System.String,System.Int32)">
            <summary>
            Pravi path segment
            </summary>
            <param name="__needle"></param>
            <param name="__prefix"></param>
            <param name="__position"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.path.pathSegments">
            <summary>
            Kolekcija segmenata
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathSegments._select_CollectionIndexer">
            <summary>
            Regex select CollectionIndexer : [\[]{1}(\d)*[\]]{1}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.DataComplex.path.pathSegments.#ctor(System.String,imbSCI.DataComplex.path.pathResolveFlag)">
            <summary>
            Konstruktor koji u isto vreme pravi kolekciju
            </summary>
            <param name="__path"></param>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathSegments.path">
            <summary>
            Putanja na osnovu koje je napravljena kolekcija segmenta
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.path.pathSegments.isThisLastSegment(imbSCI.DataComplex.path.pathSegment)">
            <summary>
            Da li je u pitanju poslednji segment
            </summary>
            <param name="seg"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.pathSegments.getSegmentsAfterThis(imbSCI.DataComplex.path.pathSegment,System.Boolean)">
            <summary>
            Vraca sve segmente posle ovog
            </summary>
            <param name="seg">Segment od koga na dalje treba da se odsece deo</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.pathSegments._replace_CollectionIndexer(System.Text.RegularExpressions.Match)">
            <summary>
            Match Evaluation for CollectionIndexer : _select_CollectionIndexer
            </summary>
            <param name="m">Match with value to process</param>
            <returns>For m.value "something" returns "SOMETHING"</returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.pathSegments.deployPath(System.String,imbSCI.DataComplex.path.pathResolveFlag)">
            <summary>
            Na osnovu dobijenog stringa pravi konstruise kolekciju
            </summary>
            <param name="__path"></param>
        </member>
        <member name="P:imbSCI.DataComplex.path.pathSegments.lastSegment">
            <summary>
            Poslednji segment
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.path.pathSegmentsFlag">
            <summary>
            Flagovi - pathSegmentsFlag
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.pathSegmentsFlag.disableCollectionIndexers">
            <summary>
            Path elementi kao sto su indekseri nece raditi>
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathGenerator.getPathForObject(System.Object)">
            <summary>
            2014c: Univerzalni konstruktor putanje
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathGenerator.getPathForProperty(imbSCI.Data.interfaces.IObjectWithParent,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Vraca putanju za property
            </summary>
            <param name="input">objekat za koji se vraca putanja ka propertiju</param>
            <param name="iPI"></param>
            <param name="returnPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathGenerator.getPathForObjectAndParent(System.Object,System.Object)">
            <summary>
            Univerzalni konstruktor putanje za bilo koji tip i parent
            </summary>
            <param name="input"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathGenerator.getPathForObjectWithParent(imbSCI.Data.interfaces.IObjectWithParent,System.String)">
            <summary>
            konstruise Path string za prosledjeni objekat
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.DataComplex.path.imbProjectResourceBase.prefix_NOPARENT_PATH">
            <summary>
            Kada nema parent-a
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.imbProjectResourceBase.prefix_TYPEBYNAME">
            <summary>
            * -- pristupa imbTypeInfo objektu preko njegovog imena, moze se pozivati i Enum type
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.imbProjectResourceBase.prefix_OPERATIONENUM">
            <summary>
            ^ -- oznacava konretan operation enum item, podrzava i Enum path !!!
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.imbProjectResourceBase.prefix_INTEGRATED_PATH">
            <summary>
            $ -- property real name ili object name
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.imbProjectResourceBase.prefix_PROPERTY_PATH">
            <summary>
            . -- obican pristup propertiju, ili Enum memberu
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.imbProjectResourceBase.prefix_COLLECTION_INDEX_ACCESS">
            <summary>
            Koristi se samo za detekciju - format se koristi za pravljenje
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.imbProjectResourceBase.format_COLLECTION_INDEX_ACCESS">
             <summary>
             Format - nije prefix
             </summary>
            
        </member>
        <member name="T:imbSCI.DataComplex.path.resourcePathResolver">
            <summary>
            Staticki alati za dobijanje objekta/resursa na osnovu imb putanje
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.resourcePathResolver.regex_pathToSegments">
            <summary>
            Regex iskaz koji vraca sve segmente putanje, grupisane> [0] prefix, [1] needle
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.resourcePathResolver.cached_pathSegments">
            <summary>
            kesirani path segmenti prema ulaznim putanjama
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourcePathResolver.pathFormat_THISINDEXER">
            <summary>
            0 - parent collection path, 1 - key to find with
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.path.resourcePathResolver.prefixVsFormat">
            <summary>
            kolekcija path formatiranja prema prefixu
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathResolver.toPathSegments(System.String)">
            <summary>
            2014> Deli putanju u segmente - prema najnovijem standardu - koristi kesiranje za putanje
            </summary>
            <param name="path">Putanja koja moze imati : / $ @ separatore</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathResolver.toPrefixString(imbSCI.DataComplex.path.resourceRelationTypes,System.String)">
            <summary>
            Vraca prefix string na osnovu tipa odnosa
            </summary>
            <param name="parentRealtionType"></param>
            <param name="def"></param>
            <returns>odgovarajuci prefix string</returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathResolver.resolvePath(System.String,imbSCI.DataComplex.path.pathResolveFlag)">
            <summary>
            2014 Maj> Univerzalni alat za resavanje putanje - uzima project kao source i poziva resolvePathSegment() metod - podrzava sve vrste linkova
            </summary>
            <param name="path">Univerzalni path - podrzava sve specijalne prefikse: / # . : # _ @</param>
            <param name="returnPropertyInfo">Da li da vrati imbPropertyInfo umesto vrednosti - vazi za> @ $ . : ,</param>
            <returns>Objekat koji se nalazi na putanji</returns>
            <remarks>
            <para>Upit preko stringa - bez korenskog objekta -- koristi ga debugTools i providerCase</para>
            </remarks>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathResolver.resolvePath(System.Object,System.String,imbSCI.DataComplex.path.pathResolveFlag)">
            <summary>
            Najčešće korišćen metod za upit nad putanjom i objektom
            </summary>
            <param name="source"></param>
            <param name="path"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathResolver.resolvePath``1(System.Object,System.String,imbSCI.DataComplex.path.pathResolveFlag)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="source"></param>
             <param name="path"></param>
             <param name="flags"></param>
             <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathResolver._resolvePath(System.Object,System.String,imbSCI.DataComplex.path.pathResolveFlag)">
            <summary>
            Pronalazi pod resurs na osnovu date putanje
            </summary>
            <param name="source"></param>
            <param name="path"></param>
            <param name="returnNullIfPathEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathSegmentResolver.resolvePathSegments(System.Object,imbSCI.DataComplex.path.pathSegments,imbSCI.DataComplex.path.pathResolveFlag)">
            <summary>
            Izvrsava kolekciju path segmenata nad prosledjenim objektom
            </summary>
            <param name="source"></param>
            <param name="segments"></param>
            <param name="_flagList"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathSegmentResolver.resolvePathSegment(System.Object,imbSCI.DataComplex.path.pathSegment,imbSCI.DataComplex.path.pathResolveFlag)">
            <summary>
            2014> resava kompleksne putanje
            </summary>
            <param name="source">Izvorni objekat. Moze biti imbTypeInfo - onda ce uvek vracati imbPropertyInfo</param>
            <param name="pathSegment">Putanja ili deo putanje koji treba da se resi</param>
            <param name="returnPropertyInfo">Vraca imbPropertyInfo umesto vrednosti - vazi za> @ $ . : , </param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.path.resourcePathSegmentResolver.executeCollectionQuery(System.Object,System.String)">
            <summary>
            2014c > izvrsava deo putanje koji se odnosi na upit nad kolekcijom
            </summary>
            <param name="source"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.path.resourceRelationTypes">
            <summary>
            Tip odnosa property-a i objekta
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.integratedResource">
            <summary>
            Property koji je ujedno i pod objekat
            ovo može da se koristi kada je potrebno da se koriste tipizirani Childrens
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.nestedResource">
            <summary>
            Property je read-only interfejs prema objektu koji se smesta u Childrens
            koristi se kada objekat ne treba da koristi svoj childrens
            Veoma je korisno jer se automatski izvrsava loadDeploy i slicne operacije
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.linkedResource">
            <summary>
            Property koji predstavlja ustvari pointer ka drugom resursu unutar projekta
            Kada je resurs linkovan on se nece snimati dva puta u save fajlu
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.childResource">
            <summary>
            Predstavlja children item
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.integratedSimpleObject">
            <summary>
            Property koji je klasa ali nije imbProjectResource naslednik
            obradjuje ga kao simpleObject ako je XmlIgnore odsutan
            editor ce biti PropertyGrid
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.temporaryObjects">
            <summary>
            Privremeni simple object i imbProjectResource object
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.simpleProperties">
            <summary>
            Property koji je osnovnog tipa
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.indexerItem">
            <summary>
            Item u generickoj kolekciji
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.resourceRelationTypes.integratedEntityCollection">
            <summary>
            Integrisana Entity kolekcija
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.specialSubMenuType.subOperationMenuForType">
            <summary>
            Bilo koji tip, otvara pod menu
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.specialSubMenuType.resourceAllRelated">
            <summary>
            Pod resurse -- prema path filterima
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.specialSubMenuType.primitiveSwitches">
            <summary>
            Toggle menu za sve public Boolean propertije koji imaju DisplayName
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.path.specialSubMenuType.primitiveEnums">
            <summary>
            Toggle menu za sve public propertije koji su enumeracije
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.bagOfWords">
            <summary>
            Words are stored in First capital letter variation
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.calculate(imbSCI.DataComplex.special.bagOfWords,imbSCI.Core.enums.operation)">
            <summary>
            Calculates the specified second.
            </summary>
            <param name="second">The second.</param>
            <param name="op">The op.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.calculate(System.Object,imbSCI.Core.enums.operation)">
            <summary>
            Calculates the specified second.
            </summary>
            <param name="second">The second.</param>
            <param name="op">The op.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.calculate(System.String,imbSCI.Core.enums.operation)">
            <summary>
            Calculates the specified second.
            </summary>
            <param name="second">The second.</param>
            <param name="op">The op.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.special.bagOfWords"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.special.bagOfWords"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:imbSCI.DataComplex.special.bagOfWords.Item(System.String)">
            <summary>
            Gets or sets the count/score <see cref="T:System.Int32"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Int32"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.ToPropertyCollection(System.Int32)">
            <summary>
            Builds an property collection with limited or all entries (-1 for limitless)
            </summary>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.AddBan(System.String[])">
            <summary>
            Adds words to banned list: the same words will be ignored in any future Add call
            </summary>
            <param name="words">The words.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.Reduce(System.String,System.Int32)">
            <summary>
            Reduces the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.Remove(System.String)">
            <summary>
            Removes the specified word or all words from the line.
            </summary>
            <param name="wordOrLine">The word or line.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.Add(System.String)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.bagOfWords.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.bagOfWords.bannedWords">
            <summary>
            Words banned from the bag
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.IInstanceCountCollection">
            <summary>
            Interface to statistical results
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.instanceCountCollection`1">
            <summary>
            Collection that counts how many same instances were "added"
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.buildDataTableSummaryRow(System.String)">
            <summary>
            Builds the data table summary row.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.buildDataTableSummaryTable(System.String)">
            <summary>
            Builds the vertical table with all data
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.buildSampleFequencyTableSorted(System.Object,System.Int32,System.String)">
            <summary>
            Builds the data table with statistics
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.reCalculate(imbSCI.DataComplex.special.instanceCountCollection{`0}.preCalculateTasks)">
            <summary>
            Recalculates frequency statistics
            </summary>
            <param name="tasks">The tasks.</param>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.diversityRatio">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.diversityAntiRatio">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.diversityAntiValue">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.range">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.maxFreq">
            <summary>
            The highest frequency
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.minFreq">
            <summary>
            The lowest frequency
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.TotalScore">
            <summary>
            Gets the total score - sum of all frequencies. It is total count of all instance in the sample.
            </summary>
            <value>
            The total number of instances observed
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.avgFreq">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.medianFreq">
            <summary>
            The median of frequency
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.entropyFreq">
            <summary>
            Entropy of the sample
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.varianceFreq">
            <summary>
            Variance of the frequencies
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.standardDeviation">
            <summary>
            Standard deviation in the fequencies
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.compareModeDefault">
            <summary>
            Default compare mode used when compared against another instance
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.CompareTo(imbSCI.DataComplex.special.instanceCountCollectionFormulae,imbSCI.DataComplex.special.IInstanceCountCollection)">
            <summary>
            Compares to.
            </summary>
            <param name="compareMode">The compare mode.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.AddInstanceRange(imbSCI.DataComplex.special.instanceCountCollection{`0})">
            <summary>
            Adds all instances and their existing score
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.Reduce(imbSCI.DataComplex.special.instanceCountCollection{`0})">
            <summary>
            Reduces this scores by specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.ReduceFreqAll(System.Int32)">
            <summary>
            Reduces the freq to all items for the number specified
            </summary>
            <param name="reduction">The reduction.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.RemoveUnderFreg(System.Int32)">
            <summary>
            Removes the entries having frequency under specified value
            </summary>
            <param name="removeUnder">The remove under.</param>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.items">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.GetRFreqArray">
            <summary>
            Returns Array of relative frequencies
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.GetInstancesWithFrequency(System.Int32)">
            <summary>
            Gets the instances with frequency.
            </summary>
            <param name="frequency">The frequency.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.GetRFreq(`0)">
            <summary>
            Returns relative frequency calculated as follows: absolute frequency divided by maximum frequency: rF = aF / maxF
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountCollection`1.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.getSorted(System.Int32)">
            <summary>
            Gets the sorted list with all instances
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.AddInstance(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.AddInstance(`0,System.String)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:imbSCI.DataComplex.special.instanceCountCollectionFormulae">
            <summary>
            Supported comparison modes
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.special.instanceCountCollectionFormulae.totalScore">
            <summary>
            sum of all frequencies
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.special.instanceCountCollectionFormulae.avgFrequency">
            <summary>
            [Total score] / [word count]
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.special.instanceCountCollectionFormulae.significance">
            <summary>
            1 - [Total score] divided by [average score square]
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.instanceCountPipeLine`1">
            <summary>
            Parent-connected instance counter with ability to "pump" all new counts trough upstram parent chain
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbSCI.DataComplex.special.instanceCountCollection`1" />
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.HasAnyRecord">
            <summary>
            Gets a value indicating whether this instance has any record.
            </summary>
            <value>
            <c>true</c> if this instance has any record; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.Count">
            <summary>
            Gets the count of <see cref="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.self"/>
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.self">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountPipeLine`1.LockSource(System.String)">
            <summary>
            Locks the source.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.propagationPaused">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountPipeLine`1.HoldOn">
            <summary>
            Sets pipe-line to pause
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountPipeLine`1.FlushAndLock(System.String)">
            <summary>
            To be called after all instances were passed to <see cref="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.self"/>
            </summary>
            <param name="sourceID">The source identifier.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountPipeLine`1.Add(imbSCI.DataComplex.special.instanceCountCollection{`0},System.String)">
            <summary>
            Prefered way of piping Copies complete score list to <see cref="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.self"/> and automatically lock this source
            </summary>
            <param name="source">The source: spider record model element that sent these count results</param>
            <param name="sourceID">The source (origin of these statistics) identifier.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceCountPipeLine`1.Add(`0,System.String,System.Int32)">
            <summary>
            Iterative way of pipeing. Use <see cref="!:Add(instanceCountCollection&lt;T&gt;"/> if possible
            </summary>
            <param name="item">The item.</param>
            <param name="sourceID">The source identifier.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.lockedSourceIds">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceCountPipeLine`1.parent">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.instanceEnumPipeLines`2">
            <summary>
            Pipe-chain of instance counters with sourceID locking mechanism.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <seealso cref="!:aceEnumDictionary&lt;TEnum,TObject&gt;.primitives.instanceCountPipeLine&lt;T&gt;&gt;" />
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceEnumPipeLines`2.propagationPaused">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceEnumPipeLines`2.HoldOn">
            <summary>
            Sets pipe-line to pause
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceEnumPipeLines`2.buildDataTable(System.String)">
            <summary>
            Builds the data table with statistics
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceEnumPipeLines`2.parents">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.instanceEnumPipeLines`2.connectParents(imbSCI.DataComplex.special.instanceEnumPipeLines{`0,`1})">
            <summary>
            Connects the complete counter socket to specified parent
            </summary>
            <param name="__parents">The parents.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.instanceFreqTable`1.items">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.numericSampleStatistics">
            <summary>
            Instance frequency and value stats
            </summary>
            <seealso cref="!:aceCommonTypes.collection.special.instanceCountCollection&lt;System.Int32&gt;" />
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.isLocked">
            <summary>TRUE if  the collection is locked to preserve input-type consistency</summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.kLevelApplied">
            <summary>TRUE if the <c>kLevel</c> was applied to (an) input value. </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.kLevel">
            <summary>
            Max K-level / factor applied to convert Double/Float value inputs to Int32, before accepted into this collection.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.name">
            <summary>
            Name for this instance collection, used for Table feneration
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatistics.getDataTableVertical">
            <summary>
            Gets the data table vertical.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatistics.getDataTableComparative(imbSCI.DataComplex.special.numericSampleStatisticsList)">
            <summary>
            Gets the data table comparative.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatistics.getDataTableHorizontal(imbSCI.DataComplex.special.numericSampleStatisticsList)">
            <summary>
            Gets the data table horizontal.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.index">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatistics.Add(System.Double,System.String)">
            <summary>
            Adds the specified <c>Double</c> value by applying <see cref="P:imbSCI.DataComplex.special.numericSampleStatistics.kLevel"/> factor
            </summary>
            <param name="valueInSample">The value in sample.</param>
            <param name="originHash">The origin hash.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatistics.Add(System.Int32,System.String)">
            <summary>
            Adds the specified value in sample.
            </summary>
            <param name="valueInSample">The value in sample.</param>
            <param name="originHash">The origin hash.</param>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">The origin already have value into this sample statistics - null - Bad application - origin exists</exception>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatistics.reCalculate(imbSCI.DataComplex.special.instanceCountCollection{System.Int32}.preCalculateTasks)">
            <summary>
            Recalculates frequency statistics
            </summary>
            <param name="tasks">The tasks.</param>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.Item(System.String)">
            <summary>
            Gets sampled value <see cref="T:System.Int32"/> for the origin object identified via hash ID
            </summary>
            <value>
            The <see cref="T:System.Int32"/>.
            </value>
            <param name="originHash">The origin hash.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.sumOfValues">
            <summary>
            Direct sum of values
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.originHashVsValue">
            <summary>UID as key, sampled value as Value</summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.minValue">
            <summary>
            The lowest value in the sample
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.maxValue">
            <summary>
            The highest value in the sample
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.avgValue">
            <summary>
            Arithmetic mean of sampled values
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatistics.distinctValues">
            <summary>
            Count of distinct values in the sample
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.numericSampleStatisticsList">
            <summary>
            Ordinal collection of entries
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;aceCommonTypes.collection.special.numericSampleStatistics&gt;" />
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatisticsList.name">
            <summary>
            Name for this instance
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.numericSampleStatisticsList.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatisticsList.StartNew">
            <summary>
            Starts new record in the list
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.numericSampleStatisticsList.GetSummary(imbSCI.Data.enums.tableReporting.dataTableSummaryRowEnum)">
            <summary>
            Makes new <see cref="T:imbSCI.DataComplex.special.numericSampleStatistics"/> by aggregating values designated by <c>whatToSummarize</c> parameter
            </summary>
            <param name="whatToSummarize">The what to summarize.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.special.regexQuerySet`1">
            <summary>
            Resolver - returns aggregate results
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="!:aceCommonTypes.collection.special.translationTableMulti&lt;System.Text.RegularExpressions.Regex, TValue&gt;" />
        </member>
        <member name="P:imbSCI.DataComplex.special.regexQuerySet`1.minQL">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationEnumTable.GetKeysForValue(System.String)">
            <summary>
            Gets the keys for value.
            </summary>
            <param name="stringForm">The string form.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationEnumTable.GetEnum``1(System.String)">
            <summary>
            Gets the enum having the stringForm equal to the specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stringForm">The string form.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationEnumTable.GetEnums(System.Collections.Generic.IEnumerable{System.Type},System.String)">
            <summary>
            Gets the enums.
            </summary>
            <param name="types">The types</param>
            <param name="stringForm">The string form with multiple keys.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.special.translationForValuesAndTypes">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.DataComplex.special.translationEnumTable" />
        </member>
        <member name="T:imbSCI.DataComplex.special.translationTable`2">
             <summary>
            
             </summary>
             <typeparam name="TKey">The type of the key.</typeparam>
             <typeparam name="TValue">The type of the value.</typeparam>
             <seealso cref="T:imbSCI.Data.data.dataBindableBase" />
        </member>
        <member name="P:imbSCI.DataComplex.special.translationTable`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTable`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTable`2.getValue(`0,`1)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="notfound">The notfound.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTable`2.getKey(`1,`0)">
            <summary>
            Gets the key.
            </summary>
            <param name="value">The value.</param>
            <param name="notfound">The notfound.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.translationTable`2.byValues">
            <summary>
            recnik kljuceva prema objektima
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.special.translationTable`2.byKeys">
            <summary>
            recnik objekata prema kljucevima
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.translationTableMulti`2">
            <summary>
            Translation table with multiple key capability
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:imbSCI.Data.data.dataBindableBase" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey, TValue&gt;&gt;" />
        </member>
        <member name="P:imbSCI.DataComplex.special.translationTableMulti`2.entries">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.special.translationTextTable">
            <summary>
            Text simple replace-based translation table - dictionary
            </summary>
            <seealso cref="!:aceCommonTypes.collection.special.translationTable&lt;System.String, System.String&gt;" />
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.#ctor(imbSCI.DataComplex.special.autoTranslationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.special.translationTextTable"/> with conversion method specified, enabling auto conversion
            </summary>
            <param name="__conversionMethod">The conversion method.</param>
        </member>
        <member name="P:imbSCI.DataComplex.special.translationTextTable.isAutoConversionEnabled">
            <summary>
            Gets a value indicating whether this instance has automatic conversion enabled.
            </summary>
            <value>
            <c>true</c> if this instance is automatic conversion enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.checkForEntry(System.String)">
            <summary>
            Checks if this entry is inside the translation table, if it is then where: as value or as key, returns: <see cref="F:imbSCI.DataComplex.special.translationTextTableEntryEnum.unknownEntry"/> if it wasn't found at all.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.DataComplex.special.translationTextTable.ENTRYSEPARATOR">
            <summary>
            The semarator that is used between Key and Value in the string pair format
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.Clear(System.Boolean)">
            <summary>
            Clears all entries, optionally clears the associated file (via <see cref="!:Load(string)"/> or <see cref="M:imbSCI.DataComplex.special.translationTextTable.Save(System.String)"/> methods)
            </summary>
            <param name="clearFile">if set to <c>true</c> [clear file].</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.Load(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the table from the specified filepath
            </summary>
            <param name="filepath">The filepath.</param>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.Append(System.String)">
            <summary>
            Appends the file with the entries of the table
            </summary>
            <param name="filepath">The filepath.</param>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">The source file was never defined - cant use save without filepath - null - Save() failed, no filepath</exception>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.Save(System.String)">
            <summary>
            Saves the table to the specified filepath, overwriting the file content
            </summary>
            <param name="filepath">The filepath.</param>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">The source file was never defined - cant use save without filepath - null - Save() failed, no filepath</exception>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.GetEntriesAsStringPairs">
            <summary>
            Gets the entries as string pairs in format: <c>rečnik|dictionary</c> where | is <see cref="F:imbSCI.DataComplex.special.translationTextTable.ENTRYSEPARATOR"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.GetEntriesAsString">
            <summary>
            Gets the entries as string pairs, separated by <see cref="P:System.Environment.NewLine"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.GetEntryAsStringPair(System.String)">
            <summary>
            Gets the entry as string pair like: <c>rečnik|dictionary</c> either the <c>key</c> found as Key or Value in the table. Returns empty string if not found and autoconversion wasn't enabled
            </summary>
            <param name="key">The key or value to get pair for</param>
            <returns>Gets the entry as string pair like: <c>rečnik|dictionary</c> either the <c>key</c> found as Key or Value in the table. Returns empty string if not found and autoconversion wasn't enabled</returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.translationTextTable.LoadCount">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.SetEntriesFromString(System.String)">
            <summary>
            Sets the entries from string containing pairs like: <c>pasoš|pasos</c> separated by <see cref="P:System.Environment.NewLine"/>
            </summary>
            <param name="entryPairs">The entry pairs.</param>
            <returns>Number of new entries set</returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.SetEntryFromString(System.String)">
            <summary>
            Sets the entry from string pair like: <c>štetočina|stetocina</c> if <c>štetočina</c> not already defined. It will recognize automatically if its not single line but multiple lines
            </summary>
            <param name="entryLine">The entry line.</param>
            <returns><see cref="F:imbSCI.DataComplex.special.translationTextTableEntryEnum.newEntry"/> if new entry was created, <see cref="F:imbSCI.DataComplex.special.translationTextTableEntryEnum.none"/> if there was problem in the format, other if the entry was found</returns>
        </member>
        <member name="P:imbSCI.DataComplex.special.translationTextTable.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key - if not found as key then it searches the values and returns key, otherwise returns null
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="key">The key, either it is Key or Value in the dictionary</param>
            <returns>null if not found, value or key </returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.GetWord(System.String,imbSCI.DataComplex.special.translationTextTableEntryEnum@)">
            <summary>
            Gets the word pair either the specified <c>key</c> was found as Key or Value, otherwise returns the <c>key</c> or makes auto conversion if <see cref="P:imbSCI.DataComplex.special.translationTextTable.isAutoConversionEnabled" /> i.e. <see cref="P:imbSCI.DataComplex.special.translationTextTable.conversionMethod" /> provided with <see cref="T:imbSCI.DataComplex.special.translationTextTable" /> constructor
            </summary>
            <param name="key">The key.</param>
            <param name="oentry">Provides insight how word was found/converted</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.SetWord(System.String)">
            <summary>
            Sets the word using autoconversion method, if enabled
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.special.translationTextTable.translate(System.String,System.Boolean)">
            <summary>
            Translates the specified input replacing <c>key</c> with <c>value</c>, uses the complete table
            </summary>
            <param name="input">The input.</param>
            <param name="inverse">if set to <c>true</c> [inverse].</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.DataComplex.tables.DataColumnInReportTypeEnum.infoInMiddle">
            <summary>
            The general information
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tables.DataColumnMetaDictionary">
            <summary>
            Describes what columns shall be created once <see cref="T:System.Data.DataTable"/> is converted to <see cref="T:imbSCI.DataComplex.tables.DataTableForStatistics"/> output
            </summary>
            <seealso cref="!:aceCommonTypes.collection.nested.aceEnumListSet&lt;aceCommonTypes.data.tables.DataColumnInReportTypeEnum, aceCommonTypes.data.tables.DataColumnInReportDefinition&gt;" />
        </member>
        <member name="T:imbSCI.DataComplex.tables.DataRowMetaDictionary">
            <summary>
            Describes what rows shall be created once <see cref="!:DataTable"/> is converted to <see cref="T:imbSCI.DataComplex.tables.DataTableForStatistics"/> output
            </summary>
            <seealso cref="!:aceCommonTypes.collection.nested.aceEnumListSet&lt;aceCommonTypes.data.tables.DataRowInReportTypeEnum, aceCommonTypes.data.tables.DataRowMetaDefinition&gt;" />
        </member>
        <member name="P:imbSCI.DataComplex.tables.DataTableCategorySets.categoryZones">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tables.DataTableCategorySets.categoryList">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tables.DataTableExtended">
            <summary>
            Simple untyped object datatable implementation
            </summary>
            <seealso cref="T:System.Data.DataTable" />
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableExtended.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.tables.DataTableExtended"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableExtended.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.tables.DataTableExtended"/> class.
            </summary>
            <param name="tablename">The tablename.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableExtended.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.tables.DataTableExtended"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="primaryKeyName">Name of the primary key - optionally.</param>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableExtended.addRow(System.Object)">
            <summary>
            Adds the object as row in the table
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:imbSCI.DataComplex.tables.DataTableForStatistics">
            <summary>
            IDEJA SAMO
            </summary>
            <seealso cref="T:System.Data.DataTable" />
        </member>
        <member name="P:imbSCI.DataComplex.tables.DataTableForStatistics.RowStart">
            <summary>
            Row index position when data starts (after heading rows are created
            </summary>
            <value>
            The row start.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tables.DataTableForStatistics.RowsWithMaxAggregation">
            <summary>
            Rel address of the last aggregated row having maximum number of rows aggregated (i.e. number of common rows)
            </summary>
            <value>
            The row aggregation all.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tables.DataTableForStatistics.RowsWithDataCount">
            <summary>
            Number of rows with data in this report datatable
            </summary>
            <value>
            The rows with data count.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tables.DataTableForStatistics.lastFilePath">
            <summary>
            Last file path that used for save or load
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatistics.RenderDataTable">
            <summary>
            Renders the data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatistics.DeployStyle(System.Data.DataTable,OfficeOpenXml.ExcelWorksheet,System.Boolean)">
            <summary>
            Deploys the style.
            </summary>
            <param name="table">The table.</param>
            <param name="ws">The ws.</param>
            <param name="useMetaSetFromTheTable">if set to <c>true</c> it will use style set from the table specified.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatistics.DeployStyleToRow(OfficeOpenXml.ExcelRow,System.Data.DataRow,OfficeOpenXml.ExcelWorksheet,imbSCI.Core.extensions.table.core.tableStyleRowSetter)">
            <summary>
            Deploys the style to row.
            </summary>
            <param name="ex_row">The ex row.</param>
            <param name="in_row">The in row.</param>
            <param name="ws">The ws.</param>
            <param name="metaSet">The meta set.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatistics.InsertAggregation(OfficeOpenXml.ExcelWorksheet,System.Data.DataTable)">
            <summary>
            Inserts the aggregation.
            </summary>
            <param name="ws">The ws.</param>
            <param name="dataTable">The data table.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatistics.Save(imbSCI.Core.files.folders.folderNode,imbSCI.Core.data.aceAuthorNotation,System.String)">
            <summary>
            Saves the specified folder.
            </summary>
            <param name="folder">The folder.</param>
            <param name="notation">The notation.</param>
            <param name="filenamePrefix">The filename prefix.</param>
            <returns></returns>
            <exception cref="T:imbSCI.DataComplex.exceptions.dataException">Excell: " + ex.Message - Export to excell</exception>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatistics.ApplyObjectTableTemplate">
            <summary>
            Applies the object table template.
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tables.DataTableForStatisticsExportJob">
            <summary>
            Temporary object - handling report export process
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.GetReportAndSave(System.Collections.Generic.Dictionary{System.String,System.Data.DataTable},imbSCI.Core.files.folders.folderNode,imbSCI.Core.data.aceAuthorNotation,System.String,imbSCI.DataComplex.converters.DataTableConverterASCII)">
            <summary>
            Gets the report and save.
            </summary>
            <param name="input">The input.</param>
            <param name="folder">The folder.</param>
            <param name="notation">The notation.</param>
            <param name="fileprefix">The fileprefix.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.BuildDataTableSplits``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.String)">
            <summary>
            Builds the data table splits.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="numberOfSplits">The number of splits.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.SetStyle(OfficeOpenXml.Style.ExcelStyle,imbSCI.Core.extensions.table.style.dataTableStyleEntry,System.Boolean)">
            <summary>
            Sets the style.
            </summary>
            <param name="ExcelStyle">The excel style.</param>
            <param name="styleEntry">The style entry.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.SetStyle(OfficeOpenXml.Style.ExcelFill,imbSCI.Core.reporting.style.core.styleSurfaceColor)">
            <summary>
            Sets the style.
            </summary>
            <param name="Fill">The fill.</param>
            <param name="styleEntry">The style entry.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.SetStyle(OfficeOpenXml.Style.ExcelStyle,imbSCI.Core.reporting.style.core.styleSide)">
            <summary>
            Sets the style.
            </summary>
            <param name="Style">The style.</param>
            <param name="side">The side.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.SetStyle(OfficeOpenXml.Style.ExcelStyle,imbSCI.Core.reporting.style.shot.styleContainerShot)">
            <summary>
            Sets the style.
            </summary>
            <param name="Style">The style.</param>
            <param name="styleEntry">The style entry.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.checkIfDataTypeIsAllowed(System.Type)">
            <summary>
            Checks if data type is allowed for the DataTable
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.RenderPivoted(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Renders pivoted table
            </summary>
            <param name="source">The source.</param>
            <param name="rows">The rows.</param>
            <param name="rowsSkip">The rows skip.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.GetReportAndSave(System.Data.DataSet,imbSCI.Core.files.folders.folderNode,imbSCI.Core.data.aceAuthorNotation,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the report and save.
            </summary>
            <param name="source">The source.</param>
            <param name="folder">The folder.</param>
            <param name="notation">The notation.</param>
            <param name="filenamePrefix">The filename prefix.</param>
            <param name="disablePrimaryKey">if set to <c>true</c> [disable primary key].</param>
            <param name="allowAsyncCall">if set to <c>true</c> [allow asynchronous call].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.GetReportVersion(System.Data.DataSet,System.Boolean)">
            <summary>
            Gets the report version.
            </summary>
            <param name="source">The source.</param>
            <param name="disablePrimaryKey">if set to <c>true</c> [disable primary key].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableForStatisticsExtension.GetReportAndSave(System.Data.DataTable,imbSCI.Core.files.folders.folderNode,imbSCI.Core.data.aceAuthorNotation,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates report table version for the <c>source</c> and saves the report on specified <c>folder</c>
            </summary>
            <param name="source">The source.</param>
            <param name="folder">The folder.</param>
            <param name="notation">The notation.</param>
            <param name="filenamePrefix">The filename prefix.</param>
            <param name="disablePrimaryKey">if set to <c>true</c> [disable primary key].</param>
            <param name="allowAsyncCall">if set to <c>true</c> [allow asynchronous call].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Folder is null! at GetReportAndSave() for [" + source.TableName + "] at filename [" + filenamePrefix + "]</exception>
        </member>
        <member name="T:imbSCI.DataComplex.tables.DataTableTypeExtended`1">
            <summary>
            Simple typed data table implementation
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbSCI.DataComplex.tables.DataTableExtended" />
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableTypeExtended`1.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableTypeExtended`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.tables.DataTableTypeExtended`1"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="description">The description.</param>
            <param name="primaryKeyName">Name of the primary key.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.DataTableTypeExtended`1.AddRow(`0)">
            <summary>
            Adds new row into the table
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.extensions.DataTableReportTools.ColumnMeta(System.Data.DataTable,imbSCI.DataComplex.tables.DataColumnMetaDictionary)">
            <summary>
            Columns the meta.
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_table_metacolumns">The default table metacolumns.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.extensions.DataTableReportTools.RowMeta(System.Data.DataTable,imbSCI.DataComplex.tables.DataRowMetaDictionary)">
            <summary>
            The meta dictionary <see cref="T:imbSCI.DataComplex.tables.DataRowMetaDictionary"/> containing <see cref="T:imbSCI.DataComplex.tables.DataRowMetaDefinition"/> entries for extra rows in the table
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_table_metarows">The default table metarows.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.extensions.DataTableReportTools.AddRowNameColumn(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Adds the row title column as the first from left
            </summary>
            <param name="dt">The dt.</param>
            <param name="columnTitle">The column title.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry">
            <summary>
            Za kasniju implementaciju (ideja)
            </summary>
            <seealso cref="T:imbSCI.DataComplex.tables.IObjectTableEntry" />
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.GetParent">
            <summary>
            Linked to
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.SetParent(imbSCI.DataComplex.tables.objectTableBase)">
            <summary>
            Set the parent (do not c
            </summary>
            <param name="__parent">The parent.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.UpdateRow">
            <summary>
            Updates the row in the linked object table
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.Unlink">
            <summary>
            Unlinks this instance from the current parent
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.Link(imbSCI.DataComplex.tables.objectTableBase)">
            <summary>
            Links to the specified parent -- and removes link with the previous parent
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.Remove">
            <summary>
            Removes this instance from the linked parent
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.Clone(System.Boolean)">
            <summary>
            Clones the entry -- optionally transfering the link to the newly created
            </summary>
            <param name="linkWithNew">if set to <c>true</c> [link with new].</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.IObjectTableAdvancedEntry.GetTableKey">
            <summary>
            Gets the key for this entry
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.tables.objectDataSet`2">
            <summary>
            DataSet of object tables
            </summary>
            <typeparam name="TTable">The type of the table.</typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectDataSet`2.#ctor(System.String,System.String,imbSCI.Core.files.folders.folderNode)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.tables.objectDataSet`2"/> class.
            </summary>
            <param name="__dataSetName">Name of the data set.</param>
            <param name="__dataSetDescription">The data set description.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectDataSet`2.GetDataSet">
            <summary>
            Gets the data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectDataSet`2.GetNew(System.String)">
            <summary>
            Gets the new objectTable
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectDataSet`2.name">
            <summary>
            Name for this instance
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectDataSet`2.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectDataSet`2.objectTables">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tables.objectTable`1">
            <summary>
            Applied object table
            </summary>
            <typeparam name="T">Object type</typeparam>
            <seealso cref="T:imbSCI.DataComplex.tables.objectTableBase" />
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTable`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.#ctor(System.String,System.String)">
            <summary>
            New object table with unspecified filepath
            </summary>
            <param name="__keyProperty">The key property.</param>
            <param name="__tableName">Name of the table.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Loads the <see cref="T:imbSCI.DataComplex.tables.objectTable`1"/> from <c>__filePath</c> specified. Filename is set as tablename. In this scenario the primary key must be set in the T class via imbAttribute <see cref="F:imbSCI.Core.attributes.imbAttributeName.collectionPrimaryKey"/>
            </summary>
            <param name="__filePath">The file path.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.IndexOf(`0)">
            <summary>
            Index of the item
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.GetOrCreate(System.String)">
            <summary>
            Gets the instance under keyValue or create new instance if not existing
            </summary>
            <param name="keyValue">The key value.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.GetGroups``1(System.String,System.String)">
            <summary>
            Returns objects groupped by the same value of the specified column
            </summary>
            <typeparam name="TGroup">Value type of the column</typeparam>
            <param name="column">The column to use for groups</param>
            <param name="expression">Optional row filter expression</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.GetFirstWhere(System.String,System.String,imbSCI.DataComplex.tables.objectTableSortEnum)">
            <summary>
            Gets the first entry that meets the criteria from the expression
            </summary>
            <param name="expression">The expression like: "LastName = 'Jones'",  "Price = 50.00"</param>
            <param name="sortColumn">The sort column.</param>
            <param name="sortType">Type of the sort.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTable`1.Item(System.String)">
            <summary>
            Gets or creates <see cref="!:T"/>, alias of <see cref="M:imbSCI.DataComplex.tables.objectTable`1.GetOrCreate(System.String)"/> call
            </summary>
            <value>
            The <see cref="!:T"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.GetLastNEntries(System.Int32)">
            <summary>
            Gets the last n or less entries.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.GetLastEntry">
            <summary>
            Gets the last entry: last entry added
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.AddOrUpdate(`0,imbSCI.DataComplex.tables.objectTableUpdatePolicy)">
            <summary>
            Adds object or update if existing row was found. Returns true if new row was created
            </summary>
            <param name="input">The input.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.AddOrUpdate(System.Collections.Generic.IEnumerable{`0},imbSCI.DataComplex.tables.objectTableUpdatePolicy)">
            <summary>
            Adds the or updates data table with objects specified. Returns number of new items added into collection
            </summary>
            <param name="input">The input.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTable`1.GetList">
            <summary>
            Gets the list of object
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.tables.objectTableBase">
            <summary>
            Base class for typed DataTable collection
            </summary>
            <seealso cref="T:imbSCI.Data.data.changeBindableBase" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.description">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.ReadOnlyModeWarningIssued">
            <summary>
            Gets or sets a value indicating whether it already wrote warning when someone tried to write new data
            </summary>
            <value>
            <c>true</c> if [read only mode warning issued]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.ReadOnlyMode">
            <summary>
            If true it prevents updating the table but increases performances drastically and provides full thread-safety
            </summary>
            <value>
              <c>true</c> if [read only mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.WriteOnlyMode">
            <summary>
            If true avoids existing item check procedure - drastically increases performance
            </summary>
            <value>
              <c>true</c> if [write only mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.GetDataTable(System.Data.DataSet,System.String)">
            <summary>
            Gets the copy of DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.keyCache">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key is contained
            </summary>
            <param name="keyValue">The key value.</param>
            <returns>
              <c>true</c> if the specified key value contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.Load(System.Data.DataTable,imbSCI.Core.reporting.ILogBuilder,imbSCI.DataComplex.tables.objectTableUpdatePolicy)">
            <summary>
            Loads external <c>inputTable</c>
            </summary>
            <param name="inputTable">The input table.</param>
            <param name="loger">The loger.</param>
            <param name="policy">The policy.</param>
            <returns>True if any row was loaded</returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.Load(System.String,System.Boolean)">
            <summary>
            Loads the content from specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.SaveAs(System.String,imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            Saves the table on specified path. According to <see cref="!:aceCommonTypes.enums.getWritableFileMode"/> mode selected
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.SaveIfChanged">
            <summary>
            Saves if changed. Returns <c>true</c> if there were changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.UpdateBase(System.Object,System.String)">
            <summary>
            Updates the base.
            </summary>
            <param name="item">The item.</param>
            <param name="key">The key.</param>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">Instance [" + key + "] wasn't found in the instance collection - null - objectTableBase.UpdateBase() instance not found</exception>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.LinkBase(System.Object,System.String)">
            <summary>
            Links the <c>item</c> to the <see cref="P:imbSCI.DataComplex.tables.objectTableBase.instanceRegistry"/> (overwrite any existing)
            </summary>
            <param name="item">The item.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">item - The ObjectTable is not in linkable mode - IsInstanceLinkActive = false</exception>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.UnlinkBase(System.Object,System.String)">
            <summary>
            Removes the <c>item</c> from instanceRegistry but not from the table. Works only if <see cref="P:imbSCI.DataComplex.tables.objectTableBase.IsInstanceLinkActive"/> is true
            </summary>
            <param name="item">The item.</param>
            <param name="key">The key (optional)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">item - The ObjectTable is not in linkable mode - IsInstanceLinkActive = false</exception>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.Save(imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            Saves this instance. Returns <c>true</c> on success
            </summary>
            <returns>TRUE if saved sucessfully</returns>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">Can't just call Save() when no FileInfo instance ever set - null - Save() failed, call SaveAs() first</exception>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.info">
            <summary>
            Information about the file where table data is stored
            </summary>
            <value>
            The information.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.IndexOf(System.Object)">
            <summary>
            Indexes the of.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.Remove(System.Object)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.prepare(System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Prepares the collection table shema
            </summary>
            <param name="__type">The type.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.checkTableShema(System.Data.DataTable)">
            <summary>
            Checks the table shema: returns the table with right shema
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.IsInstanceLinkActive">
            <summary>
            If TRUE: instances stay linked to the object table, their properties are loaded back to the data table automatically on save
            </summary>
            <value>
            <c>true</c> if this instance is instance link active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.AddOrUpdate(System.Collections.Generic.IEnumerable{System.Object},imbSCI.DataComplex.tables.objectTableUpdatePolicy)">
            <summary>
            Adds the or updates data table with objects specified. Returns number of new items added into collection
            </summary>
            <param name="input">The input.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.GetOrCreate(System.String)">
            <summary>
            Gets the existing row or autocreates new. If <see cref="P:imbSCI.DataComplex.tables.objectTableBase.IsInstanceLinkActive"/> is true it returns registrated instance
            </summary>
            <param name="keyValue">The key value.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.GetWhere(System.String,System.Int32,System.String,imbSCI.DataComplex.tables.objectTableSortEnum)">
            <summary>
            Returns the list of instances for the specified expression <see cref="M:System.Data.DataTable.Select(System.String)"/>
            </summary>
            <param name="expression">The expression.</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.TransformKey(System.String)">
            <summary>
            Transforms the key (dummy)
            </summary>
            <param name="keyValue">The key value.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.AddOrUpdate(System.Object,imbSCI.DataComplex.tables.objectTableUpdatePolicy)">
            <summary>
            Adds the or updates. Returns <c>true</c> if new row was added
            </summary>
            <param name="input">The input.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.GetKeyValue(System.Object)">
            <summary>
            Gets the key value.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.SetRowWithObject(System.Data.DataRow,System.Object,imbSCI.DataComplex.tables.objectTableUpdatePolicy)">
            <summary>
            Sets the row with object. Specify row as <c>null</c> to create new row
            </summary>
            <param name="row">The row.</param>
            <param name="input">The input.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tables.objectTableBase.lastEntry">
            <summary>
            Gets or sets the last entry that was touched
            </summary>
            <value>
            The last entry.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.SetObjectByCustomRow(System.Data.DataRow,System.Object)">
            <summary>
            Sets the object by custom row (missing columns are also supported)
            </summary>
            <param name="row">The row.</param>
            <param name="item">The item.</param>
            <returns>The object provided through <c>item</c></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableBase.GetObjectFromRow(System.Data.DataRow)">
            <summary>
            Gets the object from row --- basic and low level stuff
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.tables.objectTableCustom`1">
            <summary>
            Object table that supports auto load and auto save, as called from the <see cref="M:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.LoadDataFile(System.String,imbSCI.Core.reporting.ILogBuilder,System.Type)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbSCI.DataComplex.tables.objectTable`1" />
            <seealso cref="T:imbSCI.Data.interfaces.ISupportLoadSave" />
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableCustom`1.#ctor(System.String)">
            <summary>
            Constructor for normal initialization
            </summary>
            <param name="__name">The name.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tables.objectTableCustom`1.#ctor">
            <summary>
            Constructor used only for automatic instance creation
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tests.testDefinition">
            <summary>
            2013c: LowLevel resurs
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tests.testDefinition.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbSCI.DataComplex.tests.testDefinition.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Definition of scientific test
            </summary>
            <param name="__caption"></param>
            <param name="__description"></param>
            <param name="_v">Version of the test</param>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testDefinition.testFinishTime">
            <summary>
            Span between test start time and test finished call
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testDefinition.testStartTime">
            <summary>
            Time at test start
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testDefinition.description">
            <summary>
            Opis testa - opciono
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testDefinition.caption">
            <summary>
            Naslov testa koji se izvrsava
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testDefinition.versionCount">
            <summary>
            Brojac koja je po redu verzija testa izvrsena
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testDefinition.currentRunStamp">
            <summary>
            Trenutan RunStamp
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tests.testDefinition.testFinished(System.Boolean)">
            <summary>
            Thread safe test finished update call
            </summary>
            <param name="successOrFail"></param>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testDefinition.status">
            <summary>
            Status of this test
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tests.testDefinition.getRunStamp(imbSCI.DataComplex.tests.testLabelingSettings)">
            <summary>
            Generise RunStamp prema prosledjenim podesavanjima - sobijen stamp postavlja u currentRunStamp i vraca dobijenu vrednost
            </summary>
            <param name="settings">Podesavanja na osnovu kojih definise RunStamp</param>
            <returns>Dobijeni runStamp  - kopija je ostala u currentRunStamp</returns>
        </member>
        <member name="T:imbSCI.DataComplex.tests.testLabelingEngine">
            <summary>
            2013c: LowLevel resurs
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tests.testLabelingSettings">
            <summary>
            2013c: LowLevel resurs
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.sampleBlockOrdinalNumber">
            <summary>
            Sample block that is subject of test run
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.separator">
            <summary>
            Separator koji se stavlja izmedju elemenata RunStampa
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.doAbbrevateTitle">
            <summary>
            Da li da skracuje naslov testa
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.titleAbbrevationLength">
            <summary>
            Broj karaktera - do koje duzine treba da bude skracen naziv testa
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.testCountDigitCount">
            <summary>
            Koliko cifara da odvoji za ispis: default je 3, sto znaci> 005 za peti test po redu
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.insertYear">
            <summary>
            Da li na kraju potpisa testa da ubaci godinu
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.insertMonthTreeLetters">
            <summary>
            Da li da ubacuje prva tri slova od naziva meseca
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tests.testLabelingSettings.insertDayInMonth">
            <summary>
            Da li da ubacuje dan u mesecu u potpis testa?
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tests.testStatus">
            <summary>
            Current status of test
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.IWeightTable">
            <summary>
            Table of terms and frequencies on the document level
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.Count(System.Boolean)">
            <summary>
            Number of terms defined in the document. If <c>expandedCount</c> is TRUE it will also count all instances defined within one semantic term
            </summary>
            <param name="expandedCount">if set to <c>true</c> [expanded count].</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTable.max">
            <summary>
            Gets the maximum frequency in the collection
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTable.sum">
            <summary>
            Gets the sum of all frequencies
            </summary>
            <value>
            The sum.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTable.maxWeight">
            <summary>
            Gets the maximum weight
            </summary>
            <value>
            The maximum c weight.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTable.sumWeight">
            <summary>
            Gets the sum weight. (no update check)
            </summary>
            <value>
            The sum weight.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.updateMaxValues">
            <summary>
            Updates the maximum AFreq and CWeight - if chagnes occured since last call.
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTable.parent">
            <summary>
            Gets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.Add(System.Object)">
            <summary>
            Implementation for serialization
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.Add(imbSCI.DataComplex.IWeightTableTerm,System.Int32)">
            <summary>
            Adds the specified term - or updates existing
            </summary>
            <param name="term">The term.</param>
            <param name="AFreqPoints">Absolute frequency to set. Leave -1 for default</param>
            <param name="DFPoints">The Document Frequency to set. Leave -1 for default</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.Add(System.String,System.Int32)">
            <summary>
            Adds the specified term given as string
            </summary>
            <param name="term">The term.</param>
            <param name="AFreqPoints">a freq points.</param>
            <param name="DFPoints">The df points.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.Add(System.Collections.Generic.IEnumerable{imbSCI.DataComplex.IWeightTableTerm})">
            <summary>
            Adds the specified terms into table
            </summary>
            <param name="terms">The terms.</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetMatchTermByName(imbSCI.DataComplex.IWeightTableTerm,System.Boolean)">
            <summary>
            Gets the match term by the name .
            </summary>
            <param name="term">The term.</param>
            <param name="termOnNotFound">if set to <c>true</c> [term on not found].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetMatchTermByName(System.String)">
            <summary>
            Gets  the match term by the name.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetDataTable(System.String,System.Data.DataSet,System.Boolean)">
            <summary>
            Gets the table.
            </summary>
            <param name="documentName">Name of the document.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetDataTableClean(System.String,System.Data.DataSet,System.Boolean)">
            <summary>
            Exports clean version of data table - more compatibile for later load
            </summary>
            <param name="tableName">Name of the table document -- if empty it will use document name</param>
            <param name="ds">The DataSet to include into</param>
            <param name="onlyTermAndFreq">Exporting only term and frequency</param>
            <returns>DataTable with TF_IDF information</returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetNFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the normalized frequency of the specified term
            </summary>
            <param name="term">The term to get frequency for</param>
            <returns>Double ratio number with value from 0 to 1</returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetNFreq(System.String)">
            <summary>
            Gets the cumulative weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetCWeight">
            <summary>
            Gets the cumulative weight (sum of all weights)
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetWeight(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetWeight(System.String)">
            <summary>
            Gets the weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetNWeight(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the normalized weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetNWeight(System.String)">
            <summary>
            Gets the normalized weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetAFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the absolute frequency of the specified term
            </summary>
            <param name="term">The term to get frequency for</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetAFreq(System.String)">
            <summary>
            Gets the absolute frequency for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.isMatch(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Determines whether the specified term is contained within the document
            </summary>
            <param name="term">The term.</param>
            <returns>
              <c>true</c> if the specified term is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.isMatchByName(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Heuristic method - comparing only the term name against the contained collection
            </summary>
            <param name="term">The term.</param>
            <returns>
              <c>true</c> if [is match by name] [the specified term]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.isMatchBySemantics(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Determines what kind of match this term might be to this table
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetBDFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the binary document frequency of the specified term, i.e.: number of documents containing the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetTF_IDF(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the tf idf (term frequency - inverse document frequency
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetIDF(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the idf - inverse document frequency
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetIDF(System.String)">
            <summary>
            Gets the idf.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetAllTermString">
            <summary>
            Returns list of all terms in nominal form or by name
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.GetCrossSection(imbSCI.DataComplex.IWeightTable,System.Boolean)">
            <summary>
            Gets the cross section of matched terms
            </summary>
            <param name="secondTable">The second table.</param>
            <param name="thisAgainstSecond">if set to <c>true</c> [this against second].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.AddExternalDataTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            Loads term definitions from the specified DataTable, interpreting <c>termName_column</c> and <c>termAFreq_column</c>. Leave * to use export default column names.
            </summary>
            <param name="table">The source data table</param>
            <param name="termName_column">The term name column.</param>
            <param name="termAFreq_column">The term a freq column.</param>
            <param name="termDF_column">The column with DocumentFrequency - optional</param>
            <returns></returns>
            <exception cref="!:dataException">Column for TermName not found! - null - AddExternalDataTable() failed - TermName column not found in the input table
            or
            Column for TermAFreq not found! - null - AddExternalDataTable() failed - TermAFreq column not found in the input table</exception>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.AddExternalDocument(imbSCI.DataComplex.IWeightTable,System.Boolean)">
            <summary>
            Copies matching terms from external document&gt; adds new if have to, rise the abs frequency if exists
            </summary>
            <param name="source">The source.</param>
            <param name="CopyFrequencies">if set to <c>true</c> [copy frequencies].</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.SetWeightTo_NominalFrequency">
            <summary>
            Sets the term weight = as nominal fequency
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.SetWeightTo_FrequencyRatio">
            <summary>
            Sets the weight of each term as proportion between absolute frequency and total sum of all frequencies
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.SetWeightTo_TF_IDF">
            <summary>
            Sets the weights according to current TF_IDF of a term
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.RemoveUnderWeight(System.Double)">
            <summary>
            Removes the terms under specified weight.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTable.RemoveZeroWeidht">
            <summary>
            Removes the terms with zero weidht.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.SetWeightTo_NominalFrequency">
            <summary>
            Sets the term weight = as nominal fequency
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.SetWeightTo_FrequencyRatio">
            <summary>
            Sets the weight of each term as proportion between absolute frequency and total sum of all frequencies
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.SetWeightTo_TF_IDF">
            <summary>
            Sets the weights according to current TF_IDF of a term
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.RemoveUnderWeight(System.Double)">
            <summary>
            Removes the terms under specified weight.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.RemoveZeroWeidht">
            <summary>
            Removes the terms with zero weidht.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.AddExternalDataTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            Loads term definitions from the specified DataTable, interpreting <c>termName_column</c> and <c>termAFreq_column</c>. Leave * to use export default column names.
            </summary>
            <param name="table">The table.</param>
            <param name="termName_column">The term name column.</param>
            <param name="termAFreq_column">The term a freq column.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.AddExternalDocument(imbSCI.DataComplex.IWeightTable,System.Boolean)">
            <summary>
            Copies matching terms from external document> adds new if have to, rise the abs frequency if exists
            </summary>
            <param name="source">The source.</param>
            <param name="CopyFrequencies">if set to <c>true</c> [copy frequencies].</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.GetScoreForMatch(System.Collections.Generic.IEnumerable{imbSCI.DataComplex.IWeightTableTerm},imbSCI.DataComplex.termTableColumns,imbSCI.Core.math.aggregation.dataPointAggregationType)">
            <summary>
            Queries table for specified terms and return aggregated score. The score source is specified by <see cref="F:imbSCI.DataComplex.termTableColumns.tf_idf"/> (only numeric columns are supported).
            </summary>
            <param name="queryTerms">Terms to test against the table, terms found are used in calculation.</param>
            <param name="scoreToUse">What numeric property of matched term to use for aggregation.</param>
            <param name="aggregation">The aggregation type</param>
            <returns>Any score information from the query terms is ignored.</returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.GetScoreForMatch(System.Collections.Generic.IEnumerable{System.String},imbSCI.DataComplex.termTableColumns,imbSCI.Core.math.aggregation.dataPointAggregationType)">
            <summary>
            Queries table for specified terms and return aggregated score. The score source is specified by <see cref="F:imbSCI.DataComplex.termTableColumns.tf_idf"/> (only numeric columns are supported).
            </summary>
            <param name="queryTerms">Terms to test against the table, terms found are used in calculation.</param>
            <param name="scoreToUse">What numeric property of matched term to use for aggregation.</param>
            <param name="aggregation">The aggregation type</param>
            <returns>Any score information from the query terms is ignored.</returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.GetMatches(System.Collections.Generic.IEnumerable{imbSCI.DataComplex.IWeightTableTerm})">
            <summary>
            Returns the matching term entries
            </summary>
            <param name="queryTerms">The query terms.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableOperations.GetMatches(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the matching term entries
            </summary>
            <param name="queryTerms">The query terms.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.IWeightTableSet">
            <summary>
            Set of documents that are subject of the <see cref="T:imbSCI.DataComplex.IWeightTable"/>
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.Add(imbSCI.DataComplex.IWeightTable)">
            <summary>
            Adds the specified document and processes all terms contained
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.AddTable(System.String,System.Collections.Generic.IEnumerable{imbSCI.DataComplex.IWeightTableTerm})">
            <summary>
            Adds new IWeightTable with name nad terms collection
            </summary>
            <param name="documentName">Name of the document.</param>
            <param name="terms">The terms.</param>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTableSet.AggregateDocument">
            <summary>
            Document with summary information on the terms
            </summary>
            <value>
            The aggregate document.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.Add(imbSCI.DataComplex.IWeightTable,imbSCI.DataComplex.IWeightTableTerm,System.Boolean)">
            <summary>
            Adds term to the table specified
            </summary>
            <param name="table">The table.</param>
            <param name="term">The term.</param>
            <param name="callTableLevelAdd">if set to <c>true</c> [call table level add].</param>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTableSet.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbSCI.DataComplex.IWeightTable"/> for the specified document name.
            </summary>
            <value>
            The <see cref="T:imbSCI.DataComplex.IWeightTable"/>.
            </value>
            <param name="documentName">Name of the document.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.updateMaxValues">
            <summary>
            Updates the maximum AFreq and CWeight - if chagnes occured since last call.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.GetDataTable(System.String)">
            <summary>
            Gets the table for the specified document
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.GetAggregateDataTable">
            <summary>
            Gets the aggregate table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.GetDataSet(System.Boolean)">
            <summary>
            Gets the data set with all tables made for each document contained. Optionally creates aggregate table as the first table in the dataset.
            </summary>
            <param name="includeAggregateTable">if set to <c>true</c> [include aggregate table].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.GetBDFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the binary document frequency of the specified term, i.e.: number of documents containing the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.GetIDF(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the tf idf (term frequency - inverse document frequency
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.GetBDFreq(System.String)">
            <summary>
            Gets the binary document frequency of the specified term, i.e.: number of documents containing the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSet.GetIDF(System.String)">
            <summary>
            Gets the idf - inverse document frequency
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSetOperations.SetWeightTo_NominalFrequency">
            <summary>
            Sets the term weight = as nominal fequency
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSetOperations.SetWeightTo_FrequencyRatio">
            <summary>
            Sets the weight of each term as proportion between absolute frequency and total sum of all frequencies
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableSetOperations.SetWeightTo_TF_IDF">
            <summary>
            Sets the weights according to current TF_IDF of a term
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.IWeightTableTerm">
            <summary>
            Term that is subject of <see cref="T:imbSCI.DataComplex.IWeightTable"/>
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableTerm.Define(System.String,System.String)">
            <summary>
            Defines term name and nominal form
            </summary>
            <param name="name">The name.</param>
            <param name="nominalForm">The nominal form.</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableTerm.SetOtherForms(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets semantic instances for this term
            </summary>
            <param name="instances">The instances.</param>
        </member>
        <member name="M:imbSCI.DataComplex.IWeightTableTerm.isMatch(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Determines whether the specified <c>other</c> <see cref="T:imbSCI.DataComplex.IWeightTableTerm"/> is match with this one (meaning their frequencies are summed)
            </summary>
            <param name="other">The other.</param>
            <returns>
              <c>true</c> if the specified other is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTableTerm.AFreqPoints">
            <summary>
            Frequency points that should be added to the term
            </summary>
            <value>
            a freq points.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.IWeightTableTerm.weight">
            <summary>
            Gets or sets the weight.
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="T:imbSCI.DataComplex.tf_idf.TFDFContainer">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFContainer.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.tf_idf.TFDFContainer"/> class.
            </summary>
            <param name="_indexForm">The index form.</param>
            <param name="_item">The item.</param>
            <param name="_documentID">The document identifier.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFContainer.AddCount(System.Int32,System.Object)">
            <summary>
            Adds the count.
            </summary>
            <param name="_documentID">The document identifier.</param>
        </member>
        <member name="P:imbSCI.DataComplex.tf_idf.TFDFContainer.Item(System.Int32)">
            <summary>
            Gets the term frequency at the specified document identifier.
            </summary>
            <value>
            The <see cref="T:System.Int32" />.
            </value>
            <param name="documentID">The document identifier.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tf_idf.TFDFContainer.indexForm">
            <summary>
            Gets or sets the index form.
            </summary>
            <value>
            The index form.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tf_idf.TFDFContainer.items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tf_idf.TFDFContainer.totalFrequency">
            <summary>
            Gets or sets the term frequency.
            </summary>
            <value>
            The term frequency.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tf_idf.TFDFContainer.documentFrequency">
            <summary>
            Gets or sets the document frequency.
            </summary>
            <value>
            The document frequency.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tf_idf.TFDFContainer.onDocumentFrequency">
            <summary>
            Gets or sets the on document frequency.
            </summary>
            <value>
            The on document frequency.
            </value>
        </member>
        <member name="T:imbSCI.DataComplex.tf_idf.TFDFCounter">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.GetContainers">
            <summary>
            Gets the containers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.Add(System.String,System.Object)">
            <summary>
            Increases the absolute fequency, at the current <c>document</c>, of a term associated with <c>indexForm</c>. If this is the first time the term was counted, it creates internal container, having <c>item</c> optionaly set
            </summary>
            <param name="indexForm">The index form.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.SetItemForTerm(System.String,System.Object)">
            <summary>
            Sets the item for term.
            </summary>
            <param name="indexForm">The index form.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.GetDocumentFrequency(System.String)">
            <summary>
            Gets the document frequency.
            </summary>
            <param name="indexForm">The index form.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.GetTermFrequency(System.String,System.Int32)">
            <summary>
            Gets the term frequency.
            </summary>
            <param name="indexForm">The index form.</param>
            <param name="documentID">The document identifier.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.GetTermTotalFrequency(System.String)">
            <summary>
            Gets the term total frequency.
            </summary>
            <param name="indexForm">The index form.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.NextDocument">
            <summary>
            Nexts the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.GetContainer(System.String)">
            <summary>
            Gets the container.
            </summary>
            <param name="indexForm">The index form.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.GetAllContainers">
            <summary>
            Gets all containers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.GetTableWithContainers">
            <summary>
            Gets the table with containers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tf_idf.TFDFCounter.AddIfNew(System.String,System.Object)">
            <summary>
            Adds if new.
            </summary>
            <param name="indexForm">The index form.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tf_idf.TFDFCounter.DocumentID">
            <summary>
            Gets or sets the document identifier.
            </summary>
            <value>
            The document identifier.
            </value>
        </member>
        <member name="F:imbSCI.DataComplex.tf_idf.TFDFCounter.items">
            <summary>
            The items
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.weightTable`1">
            <summary>
            Universal weight table (SVM / TF-IDF model)
            </summary>
            <seealso cref="T:imbSCI.Data.data.changeBindableBase" />
            <seealso cref="T:imbSCI.DataComplex.IWeightTable" />
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetMatchAgainst``1(imbSCI.DataComplex.weightTable{``0})">
            <summary>
            Gets the match against.
            </summary>
            <typeparam name="TSecondTableTerm">The type of the second table term.</typeparam>
            <param name="secondTable">The second table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetCrossSection(imbSCI.DataComplex.IWeightTable,System.Boolean)">
            <summary>
            Gets the cross section of matched terms
            </summary>
            <param name="secondTable">The second table.</param>
            <param name="thisAgainstSecond">if set to <c>true</c> [this against second].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.#ctor(imbSCI.DataComplex.IWeightTableSet,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:weightTable"/> class.
            </summary>
            <param name="__parent">The parent.</param>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.name">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.terms">
            <summary>
            Gets or sets the terms.
            </summary>
            <value>
            The terms.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.termsAFreq">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.buildFrequencyTable(System.String,System.Data.DataSet)">
            <summary>
            Builds the frequency table shema
            </summary>
            <param name="documentName">Name of the document.</param>
            <param name="tableDataSet">The table data set.</param>
            <returns></returns>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">Table name selection failed into stackoverflow - null - Table autoname failed [" + i.ToString() + "]</exception>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.termSingleAddAllowed">
            <summary>
            If TRUE allows only one add per table
            </summary>
            <value>
            <c>true</c> if [term single add allowed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetCompiledTable(imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Generates a compiled version of TF-IDF table. <see cref="T:imbSCI.DataComplex.weightTableCompiled"/>
            </summary>
            <param name="loger">The loger - for diagnostics</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetDataTableClean(System.String,System.Data.DataSet,System.Boolean)">
            <summary>
            Gets the data table clean.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="ds">The ds.</param>
            <param name="onlyTermAndFreq">if set to <c>true</c> [only term and freq].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.AddExternalDataTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            Loads term definitions from the specified DataTable, interpreting <c>termName_column</c> and <c>termAFreq_column</c>. Leave * to use export default column names.
            </summary>
            <param name="table">The source data table</param>
            <param name="termName_column">The term name column.</param>
            <param name="termAFreq_column">The term a freq column.</param>
            <param name="termDF_column">The column with DocumentFrequency - optional</param>
            <returns></returns>
            <exception cref="T:imbSCI.DataComplex.exceptions.dataException">Column for TermName not found! - null - AddExternalDataTable() failed - TermName column not found in the input table
            or
            Column for TermAFreq not found! - null - AddExternalDataTable() failed - TermAFreq column not found in the input table</exception>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.Add(System.String,System.Int32)">
            <summary>
            Adds the specified term string.
            </summary>
            <param name="term_str">The term string.</param>
            <param name="AFreqPoints">a freq points to be added. Leave -1 for default (1)</param>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.AddExternalDocument(imbSCI.DataComplex.IWeightTable,System.Boolean)">
            <summary>
            Copies matching terms from external document&gt; adds new if have to, rise the abs frequency if exists
            </summary>
            <param name="source">The source.</param>
            <param name="CopyFrequencies">if set to <c>true</c> [copy frequencies].</param>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.Add(System.Object)">
            <summary>
            Implementation for serialization
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.Add(System.Collections.Generic.IEnumerable{imbSCI.DataComplex.IWeightTableTerm})">
            <summary>
            Adds the specified terms into table
            </summary>
            <param name="terms">The terms.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.Add(imbSCI.DataComplex.IWeightTableTerm,System.Int32)">
            <summary>
            Adds the specified term - or updates existing
            </summary>
            <param name="term">The term.</param>
            <param name="AFreqPoints">a freq points.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.containsByName(System.String)">
            <summary>
            Determines whether [contains by name] [the specified term name].
            </summary>
            <param name="termName">Name of the term.</param>
            <returns>
              <c>true</c> if [contains by name] [the specified term name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetAFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the absolute frequency of the specified term
            </summary>
            <param name="term">The term to get frequency for</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.max">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.sum">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.maxWeight">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.updateMaxValues">
            <summary>
            Updates the maximum AFreq and CWeight - if chagnes occured since last call.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetNFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the normalized frequency of the specified term
            </summary>
            <param name="term">The term to get frequency for</param>
            <returns>
            Double ratio number with value from 0 to 1
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.isMatchBySemantics(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Determines what kind of match this term might be to this table
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.isMatch(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Determines whether the specified term is contained within the document
            </summary>
            <param name="term">The term.</param>
            <returns>
              <c>true</c> if the specified term is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.isMatchByName(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Heuristic method - comparing only the term name against the contained collection
            </summary>
            <param name="term">The term.</param>
            <returns>
              <c>true</c> if [is match by name] [the specified term]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetMatchTerm(imbSCI.DataComplex.IWeightTableTerm,System.Boolean)">
            <summary>
            Gets the match term.
            </summary>
            <param name="term">The term.</param>
            <param name="termOnNotFound">if set to <c>true</c> [term on not found].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetMatchTermByName(imbSCI.DataComplex.IWeightTableTerm,System.Boolean)">
            <summary>
            Gets the match term by the name .
            </summary>
            <param name="term">The term.</param>
            <param name="termOnNotFound">if set to <c>true</c> if will return the same term supplied</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetMatchTermByName(System.String)">
            <summary>
            Gets  the match term by the name.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetMatchByString(System.String)">
            <summary>
            Gets the match by string. The specified <c>term</c> must be lowercase, without spaces, interpunction etc. It tries with direct match (LemmaForm), then if fails tries with full search
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetNFreq(System.String)">
            <summary>
            Gets the normalized frequency by term name
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetWeight(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the cumulative weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetWeight(System.String)">
            <summary>
            Gets the cumulative weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetNWeight(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the normalized cumulative weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetNWeight(System.String)">
            <summary>
            Gets the normalized cumulative weight for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetAFreq(System.String)">
            <summary>
            Gets the absolute frequency for the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetBDFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the binary document frequency of the specified term, i.e.: number of documents containing the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetTF_IDF(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the tf idf (term frequency - inverse document frequency
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetIDF(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the idf - inverse document frequency
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetBDFreq(System.String)">
            <summary>
            Gets the bd freq.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetTF_IDF(System.String)">
            <summary>
            Gets the tf idf.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetIDF(System.String)">
            <summary>
            Gets the idf.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.SetWeightTo_NominalFrequency">
            <summary>
            Sets the term weight = as nominal fequency
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.SetWeightTo_FrequencyRatio">
            <summary>
            Sets the weight of each term as proportion between absolute frequency and total sum of all frequencies
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.SetWeightTo_TF_IDF">
            <summary>
            Sets the weights according to current TF_IDF of a term
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.RemoveUnderWeight(System.Double)">
            <summary>
            Removes the terms under specified weight.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.RemoveZeroWeidht">
            <summary>
            Removes the terms with zero weidht.
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.weightTable`1._sumWeights">
            <summary>
            The sum all weights
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTable`1.sumWeight">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetCWeight">
            <summary>
            Gets the cumulative weight (sum of all weights)
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTable`1.GetAllTermString">
            <summary>
            Returns list of all terms in nominal form or by name - term keys
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.weightTableCompiled">
            <summary>
            Precompiled version of a <see cref="T:imbSCI.DataComplex.weightTable`1"/>
            </summary>
            <seealso cref="!:aceCommonTypes.data.tables.objectTable&lt;aceCommonTypes.collection.tf_idf.weightTableTermCompiled&gt;" />
            <seealso cref="!:aceCommonTypes.collection.tf_idf.IWeightTable" />
        </member>
        <member name="M:imbSCI.DataComplex.weightTableCompiled.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.weightTableCompiled"/> class.
            </summary>
            <param name="__tableName">Name of the table.</param>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableCompiled.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.weightTableCompiled"/> class.
            </summary>
            <param name="__filePath">The file path.</param>
            <param name="autoLoad">if set to <c>true</c> [automatic load].</param>
            <param name="__tableName">Name of the table.</param>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableCompiled.GetIfExists(System.String,System.Boolean)">
            <summary>
            Gets the instance if exists
            </summary>
            <param name="termName">Name of the term.</param>
            <param name="matchForInflections">if set to <c>true</c> [match for inflections].</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableCompiled.max">
            <summary>
            Gets the maximum frequency in the collection
            </summary>
            <value>
            The maximum.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableCompiled.isMatchBySemantics(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Determines what kind of match this term might be to this table
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableCompiled.updateMaxValues">
            <summary>
            Updates the maximum AFreq and CWeight - if chagnes occured since last call.
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.weightTableGenericTerm">
            <summary>
            Generic - simple <see cref="T:System.String"/> wrapper for the <see cref="T:imbSCI.DataComplex.IWeightTableDocument"/> and <see cref="T:imbSCI.DataComplex.IWeightTable"/> applications
            </summary>
            <seealso cref="T:imbSCI.DataComplex.IWeightTableTerm" />
        </member>
        <member name="M:imbSCI.DataComplex.weightTableGenericTerm.op_Implicit(imbSCI.DataComplex.weightTableGenericTerm)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.DataComplex.weightTableGenericTerm"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="gt">The gt.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableGenericTerm.op_Implicit(System.String)~imbSCI.DataComplex.weightTableGenericTerm">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:imbSCI.DataComplex.weightTableGenericTerm"/>.
            </summary>
            <param name="st">The st.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableGenericTerm.isMatch(imbSCI.DataComplex.weightTableGenericTerm)">
            <summary>
            Determines whether the specified <c>other</c> <see cref="T:imbSCI.DataComplex.weightTableGenericTerm"/> is match with this one (meaning their frequencies are summed)
            </summary>
            <param name="other">The other.</param>
            <returns>
              <c>true</c> if the specified other is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableGenericTerm.#ctor">
            <summary>
            Constructor for Xml Serialization, do not use
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableGenericTerm.#ctor(System.String,System.Double)">
            <summary>
            Proper constructor for the generic term
            </summary>
            <param name="__name">The name.</param>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableGenericTerm.weight">
            <summary>
            The weight associated with the term
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableGenericTerm.name">
            <summary>
            The original content of the wrapped <see cref="T:System.String"/> word
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableMatch`2.match">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableMatch`2.key">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableMatch`2.subKey">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableMatchCollection`2.first">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableMatchCollection`2.second">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableMatchCollection`2.GetSemanticSimilarity">
            <summary>
            Gets the semantic similarity.
            </summary>
            <returns></returns>
        </member>
        <member name="F:imbSCI.DataComplex.weightTableMatchResultEnum.hostTermName_and_needleTermName">
            <summary>
            The host term name and needle term name: Lemma to Lemma match, i.e. match by name
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.weightTableMatchResultEnum.hostTermName_and_needleTermInstance">
            <summary>
            The host term name and needle term instance: Lemma to Instance match, i.e. match by semantic cloud
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.weightTableSet`2">
            <summary>
            Weight term table set
            </summary>
            <typeparam name="TWeightTable">The type of the weight table.</typeparam>
            <seealso cref="T:imbSCI.Data.data.changeBindableBase" />
            <seealso cref="T:imbSCI.DataComplex.IWeightTableSet" />
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSet`2.CountAllDocuments(System.Boolean)">
            <summary>
            Count all terms in all documents
            </summary>
            <param name="expanded">if set to <c>true</c> [expanded].</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableSet`2.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbSCI.DataComplex.IWeightTable"/> with the specified document name.
            </summary>
            <value>
            The <see cref="T:imbSCI.DataComplex.IWeightTable"/>.
            </value>
            <param name="documentName">Name of the document.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableSet`2.name">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableSet`2.description">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableSet`2.counter">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableSet`2.documents">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSet`2.Add(imbSCI.DataComplex.IWeightTable)">
            <summary>
            Adds the specified document and processes all terms contained
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSet`2.Add(imbSCI.DataComplex.IWeightTable,imbSCI.DataComplex.IWeightTableTerm,System.Boolean)">
            <summary>
            Non semantic matching
            </summary>
            <param name="table">The table.</param>
            <param name="term">The term.</param>
            <param name="callTableLevelAdd">Add supplied table, usully you don't want that</param>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableSet`2.dataSet">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSet`2.GetAggregateDataTable">
            <summary>
            Gets the aggregate table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSet`2.GetDataTable(System.String)">
            <summary>
            Gets the table for the specified document
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSetOperations.GetScoreForMatch(imbSCI.DataComplex.IWeightTable,System.Collections.Generic.IEnumerable{imbSCI.DataComplex.IWeightTableTerm},imbSCI.DataComplex.termTableColumns,imbSCI.Core.math.aggregation.dataPointAggregationType)">
            <summary>
            Queries table for specified terms and return aggregated score. The score source is specified by <see cref="F:imbSCI.DataComplex.termTableColumns.tf_idf"/> (only numeric columns are supported).
            </summary>
            <param name="queryTerms">Terms to test against the table, terms found are used in calculation.</param>
            <param name="scoreToUse">What numeric property of matched term to use for aggregation.</param>
            <param name="aggregation">The aggregation type</param>
            <returns>Any score information from the query terms is ignored.</returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSetOperations.GetScoreForMatch(imbSCI.DataComplex.IWeightTable,System.Collections.Generic.IEnumerable{System.String},imbSCI.DataComplex.termTableColumns,imbSCI.Core.math.aggregation.dataPointAggregationType)">
            <summary>
            Queries table for specified terms and return aggregated score. The score source is specified by <see cref="F:imbSCI.DataComplex.termTableColumns.tf_idf"/> (only numeric columns are supported).
            </summary>
            <param name="queryTerms">Terms to test against the table, terms found are used in calculation.</param>
            <param name="scoreToUse">What numeric property of matched term to use for aggregation.</param>
            <param name="aggregation">The aggregation type</param>
            <returns>Any score information from the query terms is ignored.</returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSetOperations.GetMatches(imbSCI.DataComplex.IWeightTable,System.Collections.Generic.IEnumerable{imbSCI.DataComplex.IWeightTableTerm})">
            <summary>
            Returns the matching term entries
            </summary>
            <param name="queryTerms">The query terms.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSetOperations.GetMatches(imbSCI.DataComplex.IWeightTable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the matching term entries
            </summary>
            <param name="queryTerms">The query terms.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableSetOperations.buildFrequencyTable(System.String,System.Data.DataSet)">
            <summary>
            Builds the frequency table shema
            </summary>
            <param name="documentName">Name of the document.</param>
            <param name="tableDataSet">The table data set.</param>
            <returns></returns>
            <exception cref="!:aceCommonTypes.core.exceptions.dataException">Table name selection failed into stackoverflow - null - Table autoname failed [" + i.ToString() + "]</exception>
        </member>
        <member name="T:imbSCI.DataComplex.weightTableTermCompiled">
            <summary>
            Compiled version of TF-IDF -- having no dynamic purpose. It serves in scenarios using precompiled TF-IDF data
            </summary>
            <seealso cref="T:imbSCI.DataComplex.IWeightTableTerm" />
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.termName">
            <summary>  </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableTermCompiled.buildTermInflectionList">
            <summary>
            Builds the term inflection list.
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableTermCompiled._termInflectionList_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the _termInflectionList collection
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.freqAbs">
            <summary> Absolute frequency of the term </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.freqNorm">
            <summary> Normalized frequency of the term - ratio with the maximum frequency </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.df">
            <summary> Document frequency - number of documents containing the term </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.idf">
            <summary> Inverse document frequency - logaritmicly normalized T_df </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.tf_idf">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.cw">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.ncw">
            <summary> Ratio </summary>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableTermCompiled.isMatch(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Determines whether the specified <c>other</c> <see cref="T:imbSCI.DataComplex.IWeightTableTerm" /> is match with this one (meaning their frequencies are summed)
            </summary>
            <param name="other">The other term to compare with</param>
            <returns>
              <c>true</c> if the specified other is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:imbSCI.DataComplex.weightTableTermCompiled.Count">
            <summary>
            Gets the count of inflected list + 1
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="T:imbSCI.DataComplex.weightTableTermInSetCounter`2">
            <summary>
            Counter - helper class keeping record of the term ocurrences
            </summary>
            <typeparam name="TWeightTableTerm">The type of the weight table term.</typeparam>
            <typeparam name="TWeightTable">The type of the weight table.</typeparam>
            <seealso cref="!:aceCommonTypes.collection.nested.aceDictionary2D&lt;aceCommonTypes.collection.tf_idf.IWeightTableTerm, aceCommonTypes.collection.tf_idf.IWeightTable, System.Int32&gt;" />
        </member>
        <member name="M:imbSCI.DataComplex.weightTableTermInSetCounter`2.GetBDF(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets the Binary Document Frequency, i.e. number of <see cref="T:imbSCI.DataComplex.IWeightTable"/>s containing the term
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableTermInSetCounter`2.GetAFreq(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets Apsolute frequency accross all document (summary)
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.weightTableTermInSetCounter`2.GetTablesWithTerm(imbSCI.DataComplex.IWeightTableTerm)">
            <summary>
            Gets all <see cref="T:imbSCI.DataComplex.IWeightTable"/> containing matching terms
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTree">
            <summary>
            Korenski objekat imb grananja
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTree.type">
            <summary>
            Automatsko odredjivanje tipa za root objekat
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTree.buildingFlags">
            <summary>
            flagovi koji odredjuju kako ce se graditi drvo
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTree.postprocessTree">
            <summary>
            Izvrsava obradu grananja -- pozivati kada je gotovo sa dodavanjem novih grana
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTree.#ctor(System.String,imbSCI.DataComplex.tree.imbTreeBuildingFlag)">
            <summary>
            Konstruktor tree strukture kojim se prosledjuju i flag instrukcije
            </summary>
            <param name="treeName"></param>
            <param name="_flags"></param>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeBuildingFlag">
            <summary>
            Flagovi - imbTreeBuildingFlag
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeBuildingFlag.buildRootRegisters">
            <summary>
            Da li da gradi centralni registar za svu pod decu -- prilikom registracije ka parentu
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeBuildingFlag.buildLocalRegisters">
            <summary>
            Da li da gradi lokalne registre za svu pod decu -- prilikom registracije
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeNode">
            <summary>
            imbTree spojnica - može biti grana ili list
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.UID">
            <summary>
            Univerzalni ID
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.sourceContent">
            <summary>
            String sadrzaj koji se odnosi na ovaj node - opcija
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.sourcePath">
            <summary>
            Izvorna putanja koja je dodeljena prilikom kreiranja noda
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.value">
            <summary>
            wrappovan objekat koji se nalazi na listu
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.root">
            <summary>
            Vraca referencu prema korenskom elementu
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNode.makeStringReport(System.Boolean)">
            <summary>
            Makes the string report.
            </summary>
            <param name="isRoot">if set to <c>true</c> [is root].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNode.detectParentChildLooper">
            <summary>
            Detects the parent child looper.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.attributesToShow">
            <summary>
            List of attributes to show in XML conversion
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNode.makeXmlSimple(System.Text.StringBuilder,System.String)">
            <summary>
            Makes the XML output using simple methods
            </summary>
            <param name="xmlReport">The XML report.</param>
            <param name="lineprefix">The lineprefix.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.id">
            <summary>
            Osnovni ID podatak
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.parent">
            <summary>
            Referenca prema parent objektu
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.path">
            <summary>
            Putanja objekta
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNode.removeEmptyChildren">
            <summary>
            Sklanja sve childrene koji nemaju childrene i nemaju sadrzaj
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNode.nodeType">
            <summary>
            Detektuje vrstu nodea
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNode._init">
            <summary>
            Postavlja osnovna podesavanja za node
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNode.learnFrom(imbSCI.DataComplex.tree.imbTreeNode)">
            <summary>
            Preuzima podatke od prosledjenog nodea
            </summary>
            <param name="nodeToLearnFrom"></param>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.lastNamingIteration">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode._nameBase">
            <summary>
            osnovno ime grane
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.name">
            <summary>
            ime objekta koje sadrzi broj pozicije na kojoj se trenutno nalazi - ime tipa i ID - ako je objekat deo glavnog niza
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.type">
            <summary>
            koji je node type poslednji put detektovan
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNode.description">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNodeBlock.name">
            <summary>
            ime bloka
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNodeBlockCollection.current">
            <summary>
            trenutni blok u kolekciji
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNodeBlockCollection.removeEmptyBlocks">
            <summary>
            Uklanja blokove koji nemaju iteme
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeNodeBranch">
            <summary>
            Grana koja ne poseduje podatak
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNodeBranch.#ctor">
            <summary>
            Pravi novi treenode koji koristi ime tipa
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNodeBranch.AddNewLeaf(System.String,System.Object,imbSCI.Core.reporting.render.ITextRender,System.String)">
            <summary>
            Dodaje novi "list" -- krajnji element u strukturi koji obicno nosi i vrednost -- pravi strukturu koja je neophodna da bi ova grana profukncionisala
            </summary>
            <param name="leafNameOfPath">Putanja se prosledjuje u sourcePath</param>
            <param name="value"></param>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeNodeBranch.AddNewBranch(System.String,imbSCI.Core.reporting.render.ITextRender)">
            <summary>
            Pravi novu granu - ili strukturu pod grana -- ako je prosledjena putanja umesto obicnog imena
            </summary>
            <param name="branchName"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeNodeCollection">
            <summary>
            Kolekcija nodova koji odgovaraju upitu - indeksirani prema path-u a ne name-u
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeNodeLeaf">
            <summary>
            Element treenodea koji nosi konkretan objekat
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeNodeLeaf.type">
            <summary>
            Automatsko odredjivanje tipa za leaf objekat
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.leaf">
            <summary>
            leaf koji ima objekat
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.leafEmpty">
            <summary>
            leaf koji nema objekat
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.root">
            <summary>
            Predstalja koren imbTree objekta
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.main">
            <summary>
            Predstavlja granu koja ima parent sa jednim detetom i ima jedno dete koje je ili main ili lateral tipa -- imbTreeBranch
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.lateral">
            <summary>
            Grana ciji je parent main a ima samo Branches u childrenu koji nisu end tipa
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.lateralLast">
            <summary>
            poslednja grana do grane cije pod grane imaju listove
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.lateralFirst">
            <summary>
            Prva grana do maina
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.dry">
            <summary>
            suva grana, nema ni lisce ni druge pod grane
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.leafed">
            <summary>
            Grana koja ima childrene - neki su leaf a neki su branch
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeNodeType.end">
            <summary>
            grana koja ima samo leafove
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeQuery">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeQuery.breakToBlocks(imbSCI.DataComplex.tree.imbTreeNodeBranch)">
            <summary>
            Pravi "flat" formu iz hijerarhije
            </summary>
            <param name="parentNode"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeQuery.compressNodes(imbSCI.DataComplex.tree.imbTreeNodeBranch,System.Int32)">
            <summary>
            Compresses the nodes.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="iterationLimit">The iteration limit.</param>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeQuery.detectTypes(imbSCI.DataComplex.tree.imbTreeNodeBranch,System.Int32)">
            <summary>
            Pokrece detektovanje tipova
            </summary>
            <param name="parentNode"></param>
            <param name="depthLimit"></param>
            <param name="_flags"></param>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeQuery.allLeafes(imbSCI.DataComplex.tree.imbTreeNodeBranch)">
            <summary>
            Vraca svo lisce
            </summary>
            <param name="parentNode"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeQuery.allBranches(imbSCI.DataComplex.tree.imbTreeNodeBranch)">
            <summary>
            Vraca sve grane
            </summary>
            <param name="parentNode"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeQuery.testNode(imbSCI.DataComplex.tree.imbTreeNode,imbSCI.DataComplex.tree.imbTreeQueryFlag,imbSCI.DataComplex.tree.imbTreeNodeType)">
            <summary>
            Tests the node.
            </summary>
            <param name="node">The node.</param>
            <param name="flags">The flags.</param>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.tree.imbTreeQuery.query(imbSCI.DataComplex.tree.imbTreeNodeBranch,System.Int32,System.Object[])">
            <summary>
            Vraca sve node-ove koji ispunjavaju uslove upita date u imbTreeNodeType i imbTreeQueryFlag enumima
            </summary>
            <param name="parentNode">Node nad kojim se vrsi upit</param>
            <param name="depthLimit">Limit koliko duboko moze da ide upit</param>
            <param name="_flags">imbTreeNodeType i imbTreeQueryFlag enumi kojima se podesava upit</param>
            <returns>Kolekcija</returns>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeQueryFlag">
            <summary>
            Flagovi - imbTreeQueryFlag
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeQueryFlag.collectAll">
            <summary>
            vraca listu svih nodova
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeQueryFlag.collectAllLeafs">
            <summary>
            Vraca listu svih leafova
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeQueryFlag.collectAllBranches">
            <summary>
            vraca sve grane
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.tree.imbTreeQueryFlag.collectAllOfNodeType">
            <summary>
            vraca sve koji su odrdjenog node tipa
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.tree.imbTreeResolverResult">
            <summary>
            Rezultat path upita
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeResolverResult.nodeFound">
            <summary>
            node koji je pronadjen preko upita
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeResolverResult.parent">
            <summary>
            objekat nad kojim je vrsen upit
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeResolverResult.missing">
            <summary>
            Segmenti putanje koji nisu pronadjeni
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeResolverResult.segments">
            <summary>
            segmenti upita koji je postavljen
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.tree.imbTreeResolverResult.path">
            <summary>
            Query koji je postavljen
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.trends.measureTrend">
            <summary>
            Trend instance
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrend.#ctor(System.Collections.Generic.IEnumerable{System.Double},imbSCI.DataComplex.trends.measureTrendTaker,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.trends.measureTrend"/> class.
            </summary>
            <param name="samples">The samples.</param>
            <param name="__trendTaker">The trend taker.</param>
            <param name="__timePeriod">The time period.</param>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrend.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.String,System.String,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.trends.measureTrend"/> class.
            </summary>
            <param name="samples">The samples.</param>
            <param name="__name">The name.</param>
            <param name="__unit">The unit.</param>
            <param name="__macroSampleSize">Size of the macro sample.</param>
            <param name="__zeroMargin">The zero margin.</param>
            <param name="__microSampleSize">Size of the micro sample.</param>
            <param name="__spearSampleSize">Size of the spear sample.</param>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.sampledPeriod">
            <summary>
            Gets or sets the sampled period.
            </summary>
            <value>
            The sampled period.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.sampleSize">
            <summary>
            Gets or sets the size of the sample.
            </summary>
            <value>
            The size of the sample.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.sPeriod">
            <summary>
            Gets or sets the s period.
            </summary>
            <value>
            The s period.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrend.deploySample(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Deploys the sample.
            </summary>
            <param name="samples">The samples.</param>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.trendTaker">
            <summary>
            Gets or sets the trend taker.
            </summary>
            <value>
            The trend taker.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.MacroMean">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.MacroMin">
            <summary> Lowest value in the macro set </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.MacroMax">
            <summary> Highest value in the macro set </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.MicroMean">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.SpearMean">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.MicroTrend">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.MacroTrend">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.Trend">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.Direction">
            <summary> Current trend direction </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrend.SampleState">
            <summary> Sample status </summary>
        </member>
        <member name="T:imbSCI.DataComplex.trends.measureTrendDirection">
            <summary>
            Semantic note on current trend of the measure
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.none">
            <summary>
            Not defined - unknown, disabled or still waiting to accumulate enough sample takes
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.ready">
            <summary>
            Has enough sample takes to calculate average/mean
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.macroUp">
            <summary>
            The macro up: macro period shows positive change
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.microUp">
            <summary>
            The micro up: micro period shows positive change
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.macroDown">
            <summary>
            The macro down: macro period shows negative change (
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.microDown">
            <summary>
            The micro down: micro period shows negative change
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.macroStable">
            <summary>
            The macro stable: macro period stays within trend margin
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.microStable">
            <summary>
            The micro stable: micro period stays within trend margin
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.doubleStable">
            <summary>
            The double stable very stable
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.stable">
            <summary>
            The stable: very stable - alias to <see cref="F:imbSCI.DataComplex.trends.measureTrendDirection.doubleStable"/>
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.doubleUp">
            <summary>
            The double up: Macro and Micro Trends are positive - stable increase
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.up">
            <summary>
            Up: started with incline recently
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.upDown">
            <summary>
            Up down: sudden surge of the value
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.down">
            <summary>
            Down: started with decline in value
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.doubleDown">
            <summary>
            The double down: stable decrease of the value
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendDirection.downUp">
            <summary>
            Down up: sudden surge, after local minimum
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.trends.measureTrendSampleState">
             <summary>
            
             </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendSampleState.none">
            <summary>
            Unknown state of the sampling
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendSampleState.noEnough">
            <summary>
            Not enough: still waits for enough samples to calculate (<see cref="F:imbSCI.DataComplex.trends.measureTrendSampleState.microMean"/>) mean for micro period
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendSampleState.microMean">
            <summary>
            The micro mean: still waits for enough samples to calculate (<see cref="F:imbSCI.DataComplex.trends.measureTrendSampleState.macroMean"/> mean for macro period
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendSampleState.macroMean">
            <summary>
            The macro mean: has enough samples to calculate both means
            </summary>
        </member>
        <member name="F:imbSCI.DataComplex.trends.measureTrendSampleState.spearMean">
            <summary>
            The spear indicator (smaller period then micro) is ready
            </summary>
        </member>
        <member name="T:imbSCI.DataComplex.trends.measureTrendTaker">
            <summary>
            Sample taker for trend estimation
            </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.IsTimeAverage">
            <summary>
            True if the measured value has time based measurement unit, e.g. kilobytes per minut
            </summary>
            <value>
              <c>true</c> if this instance is time average; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.IsCumulative">
            <summary>
            True if the measured value represents a cumulative measure, e.g. bytes downloaded so far
            </summary>
            <value>
              <c>true</c> if this instance is cumulative; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTaker.#ctor">
            <summary>
            Constructor for serialization and delayed, manual, initialization. It is better to use constructor with arguments"/>
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTaker.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.DataComplex.trends.measureTrendTaker"/> class.
            </summary>
            <param name="__name">The name.</param>
            <param name="__unit">The unit.</param>
            <param name="__macroSampleSize">Size of the macro sample.</param>
            <param name="__microSampleSize">Size of the micro sample.</param>
            <param name="__spearSampleSize">Size of the spear sample.</param>
            <param name="__zeroMargin">The zero margin.</param>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTaker.GetSampleState(System.Int32)">
            <summary>
            Gets the state of the sample.
            </summary>
            <param name="sampleSize">Size of the sample.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.format">
            <summary>
            Format (Standard Numeric Format, like F4, P2...) to be used for value representation
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.unit">
            <summary>
            Letter or symbol representing the measurement unit
            </summary>
            <value>
            The unit.
            </value>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.MacroSampleSize">
            <summary> Number of samples to take for macro mean </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.MicroSampleSize">
            <summary> Number of samples to take for micro mean </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.SpearSampleSize">
            <summary> Number of samples to take for spear mean </summary>
        </member>
        <member name="P:imbSCI.DataComplex.trends.measureTrendTaker.ZeroMargin">
            <summary> Zero-centered margin (noise gate) to ignore, in percentage</summary>
        </member>
        <member name="T:imbSCI.DataComplex.trends.measureTrendTools">
            <summary>
            Extensions for <see cref="T:imbSCI.DataComplex.trends.measureTrend"/>s
            </summary>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTools.GetTimeSpanBySum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Finds total timespan by summing all inter-sample periods
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sampleset"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTools.GetTimeSpan``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the time span between sampling times of sampleset collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sampleset">The sampleset.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTools.GetTrend``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},imbSCI.DataComplex.trends.measureTrendTaker,System.TimeSpan)">
            <summary>
            Gets the trend from set of objects
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sampleset">Set of objects to take measure from</param>
            <param name="selector">Expresion that takes the property value from an object in the <c>sampleset</c></param>
            <param name="trendTaker">The trend taker definition</param>
            <param name="span">The time span to recalculate mean values for.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTools.GetTrendInline(imbSCI.DataComplex.trends.measureTrend)">
            <summary>
            Gets the trend interpretation as single line string
            </summary>
            <param name="trend">The trend.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.DataComplex.trends.measureTrendTools.GetTrendDirectionSymbols(imbSCI.DataComplex.trends.measureTrendDirection)">
            <summary>
            Gets the trend direction symbolic interpretation
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:imbSCI.DataComplex.trends.NamespaceDoc" -->
    </members>
</doc>
