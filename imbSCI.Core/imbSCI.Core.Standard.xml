<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imbSCI.Core</name>
    </assembly>
    <members>
        <member name="T:imbSCI.Core.attributes.aceCriterionConfig">
            <summary>
            Criterion definition (general purpose, meant for use with <see cref="T:imbSCI.Core.attributes.imbAttribute"/>
            </summary>
        </member>
        <member name="T:imbSCI.Core.attributes.aceRangeConfig">
            <summary>
            range configuration structure
            </summary>
        </member>
        <member name="M:imbSCI.Core.attributes.aceRangeConfig.#ctor(System.IComparable,System.IComparable,imbSCI.Core.math.range.numberRangeModifyRule)">
            <summary>
            Defines range
            </summary>
            <param name="_min">The minimum.</param>
            <param name="_max">The maximum.</param>
            <param name="_rule">The rule.</param>
        </member>
        <member name="M:imbSCI.Core.attributes.aceRangeConfig.ToString">
             <summary>
            returns min - max value retrieved by ToString calls on <see cref="F:imbSCI.Core.attributes.aceRangeConfig.min"/> and <see cref="F:imbSCI.Core.attributes.aceRangeConfig.max"/>
             </summary>
             <returns>
             A string that represents the current object.
             </returns>
        </member>
        <member name="F:imbSCI.Core.attributes.aceReportingMacros.tableVertical">
            <summary>
            Mapirano na displayName / menuCommandName
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.aceReportingMacros.tableHorizontal">
            <summary>
            Mapirano na> description, displayDescription --- Description, menuHelp
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.aceReportingMacros.graphLine">
            <summary>
            nije mapirano na druge
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.aceReportingMacros.diagramAsTree">
            <summary>
            mapirano na description
            </summary>
        </member>
        <member name="T:imbSCI.Core.attributes.basicDisplayItem">
            <summary>
            2013c> Pomocna klasa - Set standardnih vrednosti koje se opisuju atributima - za potrebe menija itd
            </summary>
            <remarks>
            <para>Koristi ga imbAPI.menu, imbCore.data.collection.tree.collectionTreeExtensions</para>
            <para>Predstavlja osnovu za imbInfoBase.cs koji je koren za sve imbTypology objekte</para>
            <para>Preuzima podatke od više imb i sistemskih atributa i kombinuje</para>
            </remarks>
        </member>
        <member name="P:imbSCI.Core.attributes.basicDisplayItem.isHidden">
            <summary>
            Da li da prikazuje taj property
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.basicDisplayItem.displayName">
            <summary>
            Naslov - menuCommandTitle atribut
            </summary>
            <remarks>
            Preuzima podatak od: imbAttribute -> menuCommandTitle
            </remarks>
        </member>
        <member name="P:imbSCI.Core.attributes.basicDisplayItem.description">
            <summary>
            opis - menuHelp attribut
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.basicDisplayItem.baseColor">
            <summary>
            vrednost istoimenog atributa
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.basicDisplayItem.menuIcon">
            <summary>
            vrednost menuIcon atributa
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.basicDisplayItem.metaData">
            <summary>
            Prosledjen meta data
            </summary>
        </member>
        <member name="M:imbSCI.Core.attributes.basicDisplayItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Direktno instanciranje
            </summary>
            <param name="__displayName">Naziv koji se prikazuje</param>
            <param name="__menuIcon">Naziv ikonice (bez extenzije)</param>
            <param name="__desc">Opis ili help</param>
        </member>
        <member name="M:imbSCI.Core.attributes.basicDisplayItem.#ctor(imbSCI.Core.attributes.basicDisplayItem)">
            <summary>
            Preuzimanje podataka iz drugog itema
            </summary>
            <param name="memberInfo"></param>
        </member>
        <member name="M:imbSCI.Core.attributes.basicDisplayItem.#ctor(System.Reflection.MemberInfo)">
            <summary>
            kreiranje iz MemberInfo-a
            </summary>
            <param name="memberInfo"></param>
        </member>
        <member name="M:imbSCI.Core.attributes.basicDisplayItem.#ctor(System.Object)">
            <summary>
            Kreiranje iz enumeration membera
            </summary>
            <param name="enumMember"></param>
        </member>
        <member name="P:imbSCI.Core.attributes.basicDisplayItem.attributes">
            <summary>
            Kolekcija pronadjenih atributa
            </summary>
        </member>
        <member name="T:imbSCI.Core.attributes.imbAttribute">
            <summary>
            General imbSCI attribute, used for data annotation, report generation, documentation generation and UI auto-configuration
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttribute.msg">
            <summary>
            Drug parametar: prosleđena poruka
            Npr: ako je ime "link" onda se ovde može definisati naziv koji će se prikazivati
            Ako je * onda je default
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttribute.name">
             <summary>
             Prvi parametar: ime oznake. Npr: Link znači da je property ustvari Linked Resource
             </summary>
             <remarks>
            
             </remarks>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.attributes.imbAttributeName,imbSCI.Data.enums.fields.templateFieldDataTable,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.attributes.imbAttribute"/> class.
            </summary>
            <param name="column_option">The column option.</param>
            <param name="setting_value">The setting value.</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.attributes.imbAttributeName,imbSCI.Data.enums.fields.templateFieldDataTable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.attributes.imbAttribute"/> class.
            </summary>
            <param name="column_option">The column option.</param>
            <param name="setting_value">The setting value.</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.attributes.imbAttributeName)">
            <summary>
            Konstruktor koji koristi Enumeraciju za ime podešavanja na koji se odnosi poruka
            </summary>
            <param name="_name">Na koje se podešavanje odnosi poruka</param>
            <param name="_msg">Vrednost podešavaja</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.attributes.imbAttributeName,System.String)">
            <summary>
            Konstruktor koji koristi Enumeraciju za ime podešavanja na koji se odnosi poruka
            </summary>
            <param name="_name">Na koje se podešavanje odnosi poruka</param>
            <param name="_msg">Vrednost podešavaja</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.math.aggregation.dataPointAggregationAspect,imbSCI.Core.math.aggregation.dataPointAggregationType)">
            <summary>
            Defines one aspect of aggregation config
            </summary>
            <param name="aggregationAspect">The aggregation aspect to be declared.</param>
            <param name="types">The types to be set for the aspect</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.enums.operation,System.String,imbSCI.Core.enums.operation,System.String,imbSCI.Core.enums.operation,System.String)">
            <summary>
            Defines calculation expression
            </summary>
            <param name="operandA">The operand a.</param>
            <param name="operaA">The opera a.</param>
            <param name="operandB">The operand b.</param>
            <param name="operaB">The opera b.</param>
            <param name="operandC">The operand c.</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.attributes.imbAttributeName,System.Drawing.Color)">
            <summary>
            Sets <c>_msg</c> color as hexadecimal value, to specified <c>imbAttributeName</c> attribue
            </summary>
            <param name="_name">Attribute value to be set</param>
            <param name="_msg">System color value to be set</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.attributes.imbAttributeName,System.Object)">
            <summary>
            Bilo sta za msg on ce to pretvoriti u String - zgodno kada treba navesti neki enum
            </summary>
            <param name="_name"></param>
            <param name="_msg"></param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.#ctor(imbSCI.Core.attributes.imbAttributeName,System.Int32)">
            <summary>
            Konstruktor koji koristi Enumeraciju za ime podešavanja na koji se odnosi poruka
            </summary>
            <param name="_name">Na koje se podešavanje odnosi poruka</param>
            <param name="_msg">Vrednost podešavaja</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttribute.getMessage">
            <summary>
            Bezbedan nacin da se dobije prava poruka - ako postoji vratice objMsg
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeCollection.AddNewAttribute(imbSCI.Core.attributes.imbAttribute)">
            <summary>
            dodaje novi attribut u kolekciju
            </summary>
            <param name="newAttribute"></param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeCollection.getMessage``1(imbSCI.Core.attributes.imbAttributeName,``0)">
            <summary>
            Bezbedno preuzimanje poruke
            </summary>
            <param name="name"></param>
            <param name="output">Podrazumevani output</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeCollection.getMessage(imbSCI.Core.attributes.imbAttributeName,System.String)">
            <summary>
            Bezbedno preuzimanje poruke
            </summary>
            <param name="name"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.attributes.imbAttributeCollection.selfDeclaredAttributes">
            <summary>
            Attributi koje je samostalno deklarisao tip
            </summary>
        </member>
        <member name="T:imbSCI.Core.attributes.imbAttributeName">
            <summary>
            Ime podešavanja na koje se odnosi imbAttribut
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuHelp">
            <summary>
            Opcioni komentar u menu helpu
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.helpTips">
            <summary>
            Tips on using the object
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.helpDescription">
            <summary>
            Alias for menuHelp
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.helpTitle">
            <summary>
            Alias for DisplayName and menuCommandName
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.helpPurpose">
            <summary>
            Explaining the purpose of the object - why it's used
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.relatedTo">
            <summary>
            naziv propertija sa kolekcijom u odnosu na koju postoji relacija
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.relationKeyProperty">
            <summary>
            Koji PRoperty da koristi
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.neuralOutput">
            <summary>
            Property predstavlja izlaznu vrednost za neuronsku mrezu, u msg staviti naziv neurona bez prefiksa
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.neuralInput">
            <summary>
            Property predstavlja ulaznu vrednost za neuronsku mrezu
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.evaluation">
            <summary>
            oznacava da je property predvidjen za evaluaciju, u msg moze da se stavi naziv evaluacije - ako podrzava vise
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.evaluationStrictValues">
            <summary>
            oznacava da su suggested values istovremeno i allowed values
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.evaluationPropertyRole">
            <summary>
            Podesava ulogu propertija u evaluaciji - drugi parametar je evaluationTask
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.rdfClassName">
            <summary>
            Ime ontološke klase koja je ekvivalent ovoj klasi
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.rdfPropertyName">
            <summary>
            Ime ovog propertija u ontološkoj klasi - ime predikata
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.rdfIdProperty">
            <summary>
            Oznacava da je property jedinstveni ID
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.rdfDefaultCollectionPath">
            <summary>
            Podrazumevana putanja za kolekciju na triplestoru
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.xmlMapXpath">
            <summary>
            Poziva izvrsavanje xPath-a za ovaj properti i smesta rezultat u njega
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.xmlNodeValueProperty">
            <summary>
            na deklaraciju klase se stavlja,
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.cacheInstanceId">
            <summary>
            Marks a property as the cache instance identifier
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.serializationOff">
            <summary>
            Iskljucuje podrsku za serijalizaciju
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.metaData">
            <summary>
            Proizvoljni string podatak koji se prosledjuje preko atributa
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.metaValueFromAttribute">
            <summary>
            Iz kog atributa da preuzme vrednost
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.fileFormatDefaultSubdir">
            <summary>
            Pod direktorijum u kojem ocekuje ove fajlove
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.fileFormatExtensions">
            <summary>
            ekstenzije za fajl format
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.fileEncodingType">
            <summary>
            Tip enkodiranja koji treba da se koristi
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.fileFormatReaderType">
            <summary>
            Tip koji iscitava podatke
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.fileFormatWritterType">
            <summary>
            Tip koji snima podatke
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.fileFormatZippedReaderType">
            <summary>
            Tip koji iscitava podatke
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.fileFormatZippedWritterType">
            <summary>
            Tip koji snima podatke
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.link">
            <summary>
            Označava da je property ustvari link ka drugom imbProjectResoruce resursu
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.linkPropertyName">
            <summary>
            Oznacava da obelezeni String property predstavlja ustvari ime linkovanog propertija
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.linkPropertyHost">
            <summary>
            Oznacava ime imbBindable objekta - propertija koji sadrzi objekat iz koga se iscitava vrednost trazenog linka
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.relationMakeNewOnNull">
            <summary>
            ako ne postoji relacija (tj. upisan id) napravice novu instancu i upisati je u relaciju -- stavlja se na endpoint
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.relationTakeFirstBackrefference">
            <summary>
            ako ne postoji relacija uzece prvi objekat koji ima odgovarajuc backrefference-- stavlja se na endpoint
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.relationTakeAllBackrefference">
            <summary>
            ako ne postoji relacija uzece sve objekte koji imaju odgovarajuc backrefference-- stavlja se na endpoint
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.relationChildUniqueMatchParentProperty">
            <summary>
            postavice relaciju tako da child unique kolona bude jednaka prosledjenom parent propertiju-- stavlja se na endpoint
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.selectionAllowSubTypes">
            <summary>
            Da li dozvoljava da budu selektovani pod tipovi?
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.selectionAllowType">
            <summary>
            Ubacuje jedan tip u opcije za selektovanje
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.preProcess">
            <summary>
            Integrisani moduli :: označava da će se integrisani/nestovani modul izvršiti pre parent modula
            </summary>
            <remarks>
            Drugi parametar treba da sadrži prioritet pod kojim će se izvršavati modul.
            </remarks>
            <example>
            Property/modul sa priritetom 1:
            <code>
            [imb(preProcess, "1")]
            </code>
            će biti izvršen pre modula za prioritetom 5:
            <code>
            [imb(preProcess, "5")]
            </code>
            </example>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.postProcess">
            <summary>
            Integrisani moduli :: označava da će se integrisani/nestovani modul izvršiti posle parent modula
            </summary>
            <remarks>
            Drugi parametar treba da sadrži prioritet pod kojim će se izvršavati modul.
            </remarks>
            <example>
            Property/modul sa priritetom 1:
            <code>
            [imb(postProcess, "1")]
            </code>
            će biti izvršen pre modula za prioritetom 5:
            <code>
            [imb(postProcess, "5")]
            </code>
            </example>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.defineEditor">
            <summary>
            definise kako se zove editor - potrebno za editore koji imaju ne standardna imena !
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.editorModulePropertyMode">
            <summary>
            Proslediti mu imbUniversalToolElementMode
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.editorHideMenu">
            <summary>
            Proslediti mu koji menu
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.editorToolSize">
            <summary>
            Kolike je editor tool velicine
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.editorDisplayOption">
            <summary>
            Postavlja da editor fullscreen -- u property staviti koji display (broj: 1,2,3,4 ili nista za primary)
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.dataTemplateOverride">
            <summary>
            prepravlja data template
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.hideInMenu">
            <summary>
            Koristi se za kontesktualne module - nece ih prikazati u meniju
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuGroupPath">
            <summary>
            Definise grupu / putanju u kojoj se nalazi item. Koristi se Group1/Group2 format putanje
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuSpecialSubMenu">
            <summary>
            Oznacava da ce ovaj item imati pod menu sa module types
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuEnabledSwitch">
            <summary>
            Koristi se za podesavanje uslova >> ako je ispunjen, onda je menuItem enabled
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.notChildrenResource">
            <summary>
            Oznacava da resurs ne moze biti children
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuAskConfirmation">
            <summary>
            Traži potvrdu izvršenja
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuDelimiter">
            <summary>
            Ubacuje delimiter pre stavke
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuPriority">
            <summary>
            Greater number, greater pririty. Default value is 100, <see cref="P:imbSCI.Core.data.settingsMemberInfoEntry.priority"/>. The same as: <see cref="F:imbSCI.Core.attributes.imbAttributeName.viewPriority"/>.
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuRelevance">
            <summary>
            Koliko je bitno nesto - od 0 do 4
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.viewPriority">
            <summary>
            Greater number, greater priority. Default value is 100, <see cref="P:imbSCI.Core.data.settingsMemberInfoEntry.priority"/>. The same as: <see cref="F:imbSCI.Core.attributes.imbAttributeName.menuPriority"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuCommandTitle">
            <summary>
            Sta pise u meniju
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuCommandNode">
            <summary>
            Na koji command node sekaci
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuCommandKey">
            <summary>
            Koji je command key
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuCommandKeyboard">
            <summary>
            Skracenica na tastaturi
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuStyleImportant">
            <summary>
            Označava da je stavka u meniju važna
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuStyleVIP">
            <summary>
            Označava da stavka u meniju ključna
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuStyleNotRecommanded">
            <summary>
            Predstavlja ne preporučljivu opciju
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuStyle">
            <summary>
            Podesava stil menija preko imena stila
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.diagnosticMode">
            <summary>
            Ukljucuje diagnostic mode za modul - prilikom aktiviranja programa otvorice se prozor sa modulom koji ima default vrednosti
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.diagnosticValue">
            <summary>
            Postavlja proizvoljnu vrednost na property - ako je izvrseno u diagnostic modu
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.diagnosticContentText">
            <summary>
            ZA PROPERTY> na oznacen property ucitava debug text content - u msg stavi index diagnosticContent
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.diagnosticContentPreset">
            <summary>
            ZA PROPERTY> na oznacen property ucitava debug preset za odgovarajuci objekat - u msg stavi index preseta (sortirano po datumu pravljenja - DESC)
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.diagnosticTestMetodInvoke">
            <summary>
            Koji metod da pozove kada se ucita diagnostic windows. Ime metoda iz Editor kontrole.
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.diagnosticModuleOperationInvoke">
            <summary>
            Poziva Operation unutar modula
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.diagnosticEditorOperationInvoke">
            <summary>
            Poziva Operation unutar editora
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.basicColor">
            <summary>
            HEX oznakaosnovne boje koja se koristi prilikom vizuelizacije objekta
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuIcon">
            <summary>
            iconKey override - ikona koja se pojavljuje u meniju
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuRule_AcceptableType">
            <summary>
            Pravilo kako se ponaša u meniju
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.menuRule_AcceptableRole">
            <summary>
            Pravilo kako se ponasa umeniju
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.collectionPrimaryKey">
            <summary>
            definise da property predstavlja primary Key - alternativno koristice sql.Unique. Attribut se stavlja: a) ispred propertija koji treba da je key, b) ispred deklaraciuje klase, onda mora da se navede u poruci naziv propertija
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.collectionDisablePrimaryKey">
            <summary>
            U kolekciji ce biti iskljucena detekcija primarnog kljuca
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.collectionDefaultParentName">
            <summary>
            Podazumevano ime parent membera koji u sebi ima property sa kolekcijom
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.collectionDefaultMemberName">
            <summary>
            Podazumevano ime membera (property) koji predstavlja collection namenjen smestanju datog tipa
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.codeCacheMethod">
            <summary>
            Oznacava metod koji je automatski kreiran, msg treba da sadrzi datum kreiranja
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.measure_metaModelName">
            <summary>
            The measure meta model name: i.e. cUniqueExternalLinks  from FV64_cUniqueExternalLinks
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.measure_metaModelPrefix">
            <summary>
            The measure meta model prefix: i.e. FV64  from FV64_cUniqueExternalLinks
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.measure_target">
            <summary>
            The measure valuegroup:: defines into what measure parameter this one will be calculated
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.measure_operation">
            <summary>
            The measure operation:: how
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.reporting_categoryOrder">
            <summary>
            The reporting category order: order of property categories. This is applicable only at class level
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.reporting_template">
            <summary>
            Indicating that this property is a String template, message contains wrapping template where {{{inner}}} is result of property value: template with placeholders {{{this_property_name}}} where this_ is automatically applied prefix
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.reporting_valueformat">
            <summary>
            The reporting valueformat <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.reporting_escapeoff">
            <summary>
            Cell value will not be escaped by the renderer
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.reporting_function">
            <summary>
            Property has special reporting function
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.reporting_columnWidth">
            <summary>
            The reporting column width: defines width of column in tabular report. Default value is: 20
            </summary>
        </member>
        <member name="F:imbSCI.Core.attributes.imbAttributeName.reporting_hide">
            <summary>
            The reporting hide: it is not shown on normal tables
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.imbAttributeProfileEngine.attributeCollectionByMemberInfo">
            <summary>
            Kes atributskih kolekcija prema member info-u na koga se odnose
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.imbAttributeProfileEngine.attributeToPropertyMapsByType">
            <summary>
            Kesirane mape izmedju attributa i propertija nekog tipa
            </summary>
        </member>
        <member name="T:imbSCI.Core.attributes.imbAttributeTools">
            <summary>
            Skup alata za rad sa atributima> selektovanje, primena, itd. Kako imbAtributima tako i sa opstim atributima
            </summary>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.getImbAttributeDictionary(System.Reflection.MemberInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            GLAVNI attribute dictionary konstruktor - koristiti ga sto vise
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.getImbAttributeMap(System.Type)">
            <summary>
            Vraca ili kreira novu Attribute mapu
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.imbAttributeToProperties(System.Object,imbSCI.Core.attributes.imbAttributeCollection,System.Boolean,System.Boolean)">
            <summary>
            Prebacuje vrednost iz atributa u propertije - u skladu sa podesenim mapiranjem (imbAttributeName.metaValueFromAttribute)
            </summary>
            <param name="target">Objekat ciji se propertiji podesavaju</param>
            <param name="attribs">Atributi iz kojih izvlaci vrednost</param>
            <param name="onlyDeclared">Da li samo propertije target klase ili i nasledjene propertije</param>
            <param name="avoidOverWrite">Da li da preskoci ako Property vec ima vrednost</param>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.getAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Vraca prvi atribut po redu - datog tipa
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="includeInherited"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.getAttributes``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Vraća sve atribute u tipu
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="includeInherited"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.getAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.getImbAttribute(System.Reflection.MemberInfo,imbSCI.Core.attributes.imbAttributeName,System.Boolean)">
            <summary>
            Vraća imb atribut koji ima zadato ime, ako ga nema onda vraca null
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="includeInherited"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.attributes.imbAttributeTools.imbPropertyAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            V3.1: Vraca Attribut koji je trazen.
            Ako nepostoji, onda vraca null
            </summary>
            <typeparam name="T">Tip attributa koji treba pronaci</typeparam>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.attributes.imbAttributeToPropertyMap">
            <summary>
            Sadrzi podatke o mapiranju Attribute To Property
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.imbAttributeToPropertyMap.targetType">
            <summary>
            Tip za mapiranje
            </summary>
        </member>
        <member name="T:imbSCI.Core.attributes.imbHelpContent">
            <summary>
            Pomocne informacije
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.imbHelpContent.purpose">
            <summary>
            svrha opisane klase
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.imbHelpContent.hints">
            <summary>
            Hints
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.imbHelpContent.description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:imbSCI.Core.attributes.imbHelpContent.title">
            <summary>
            Full title
            </summary>
        </member>
        <member name="T:imbSCI.Core.attributes.NamespaceDoc">
            <summary>
            <para>Extensive Scientific Data annotation-purpose tools.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:imbSCI.Core.attributes.imbAttribute"/> is used to declare meta information for data agregation, reporting, user-help content creation and similar.</para>
            <list>
            	<listheader>
            		<term>Key points</term>
            	</listheader>
            	<item>
            		<term>Declare meta annotation for your classes</term>
            		<description>Use <see cref="T:imbSCI.Core.attributes.imbAttribute"/> with <see cref="T:imbSCI.Core.attributes.imbAttributeName"/> te control table/column format and legend-content of a property or whole class</description>
            	</item>
            	<item>
            		<term>Aggregate data</term>
            		<description>Use <see cref="N:imbSCI.Core.extensions.table"/> and <see cref="N:imbSCI.Core.extensions.data"/> to aggregate data</description>
            	</item>
            	<item>
            		<term>Generate spreadsheet reports</term>
            		<description>Use <see cref="!:imbSCI.DataComplex.tables"/> to easly generate feature rich Excel, CSV... reports from object collections</description>
            	</item>
            	<item>
            		<term>Generate text reports</term>
            		<description>Use <see cref="T:imbSCI.Core.data.settingsEntriesForObject"/> to generate textual description of your (setup, or data report summaries) objects</description>
            	</item>
            </list>
            <example>
            .NET Framework's basic attributes are used when possible: <see cref="!:DisplayNameAttribute"/>, <see cref="!:DescriptionAttribute"/>,
            <see cref="!:CategoryAttribute"/>
            <code>
            [Category("Switch")]
            [DisplayName("doSomething")]
            [Description("If true it will do something")]
            public Boolean doSomething { get; set; } = true;
            </code>
            But for more specifics, you can use <see cref="T:imbSCI.Core.attributes.imbAttribute"/> (<c>_imbSCI*</c> snippets)
            <code>
            [imb(imbAttributeName.measure_letter, "V")] // --- letter we use in our sci article for some parameter
            [imb(imbAttributeName.measure_setUnit, "sec")] // ----- unit of measure, associated with the property
            [imb(imbAttributeName.reporting_columnWidth, 50)] // ----- width of column in the report spreadsheet
            [imb(imbAttributeName.measure_important)] // ----- tells that this column/property is important, resulting in application of highlighted style in the report
            [imb(imbAttributeName.reporting_valueformat, "#.0")] // --- specifies number format to be applied for cell value, in the report
            </code>
            </example>
            </remarks>
            <seealso cref="T:imbSCI.Core.attributes.imbAttribute" />
            <seealso cref="T:imbSCI.Core.attributes.imbAttributeName" />
        </member>
        <member name="T:imbSCI.Core.collection.checkLists.checkList">
            <summary>
            2017: Key is value, Value tells if is is checked/selected
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.checkLists.checkList.items">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.checkList.getCheckValue(System.Object)">
            <summary>
            Gets the check value.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.checkList.getCheckedItems(System.Boolean)">
            <summary>
            Gets entries for checked items
            </summary>
            <param name="targetValue">if set to <c>true</c> [target value].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.checkList.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="F:imbSCI.Core.collection.checkLists.checkListLogic.AND">
            <summary>
            The and
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.checkLists.checkListLogic.OR">
            <summary>
            The or
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.checkLists.checkListLogic.NOT">
            <summary>
            The not
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.checkLists.checkListLogic.NOR">
            <summary>
            The nor: !(a || b)
            </summary>
        </member>
        <member name="T:imbSCI.Core.collection.checkLists.imbCheckedObject">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.collection.checkLists.imbCheckedObject.isChecked">
            <summary>
            Da li je objekat chekiran
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.checkLists.imbCheckedObject.value">
            <summary>
            Objekat
            </summary>
        </member>
        <member name="T:imbSCI.Core.collection.checkLists.imbCheckedObjects">
            <summary>
            Kolekcija chekiranih Enum objekata
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.checkLists.imbCheckedObjects.values">
            <summary>
            Sve vrednosti
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.checkLists.imbCheckedObjects.checkList">
            <summary>
            Lista chekiranih vrednosti
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.checkLists.imbCheckedObjects.enumName">
            <summary>
            naziv enumeracije koja se prikazuje
            </summary>
        </member>
        <member name="T:imbSCI.Core.collection.checkLists.instanceCheckList`1">
            <summary>
            Instance check list
            </summary>
            <typeparam name="T">Any type of value or object</typeparam>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;T, System.Boolean&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.collection.checkLists.instanceCheckList`1"/> class.
            </summary>
            <param name="allowedValues">The allowed values.</param>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.#ctor">
            <summary>
            Creates empty check list
            </summary>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.GetCheckedInstances(System.Boolean)">
            <summary>
            Gets the checked instances.
            </summary>
            <param name="inverse">if set to <c>true</c> [inverse].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.GetPercentageScore">
            <summary>
            Gets the percentage score: ratio between: score and count
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.GetScore">
            <summary>
            Gets the score: number of <c>true</c> values
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.GetItemsByNames(System.Boolean,System.Boolean)">
            <summary>
            Creates dictionary where items from the list are indexed by value of <c>name</c> property.
            </summary>
            <remarks>
            If the items don't have <c>name</c> property, ToString() is called.
            To avoid duplicate names, it will add number of existing names for the second and all other duplicates.
            </remarks>
            <param name="getChecked">if set to <c>true</c>, the result will contain only checked items</param>
            <param name="getUnchecked">if set to <c>true</c>, the result will contain only not checked items</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.GetItemNames(System.Boolean,System.Boolean)">
            <summary>
            Gets the item names.
            </summary>
            <param name="getChecked">if set to <c>true</c> [get checked].</param>
            <param name="getUnchecked">if set to <c>true</c> [get unchecked].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.Add(`0,System.Boolean)">
            <summary>
            Adds the specified instance and sets its state
            </summary>
            <param name="vl">The instance to be added into list</param>
            <param name="checkState">if set to <c>true</c> [check state].</param>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.Set(`0,System.Boolean,imbSCI.Core.collection.checkLists.checkListLogic,System.Boolean)">
            <summary>
            Sets the value to <c>checkState</c> for specified key
            </summary>
            <param name="vl">The vl.</param>
            <param name="checkState">if set to <c>true</c> [check state].</param>
            <param name="logic">The logic.</param>
            <param name="expandAllow">if set to <c>true</c> it will add the <c>vl</c> in the list, if it is not already inside</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.Set(System.Collections.Generic.IEnumerable{`0},System.Boolean,imbSCI.Core.collection.checkLists.checkListLogic)">
            <summary>
            Sets the values specified according to <c>check state</c>, only instances that are in the list are set - it will not add any new instance
            </summary>
            <param name="testValues">The test values.</param>
            <param name="checkState">if set to <c>true</c> [check state].</param>
            <param name="logic">The logic.</param>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.Check(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns cross section of this list and <c>testValues</c>, returning only instances in this list, that have TRUE value in the list.
            </summary>
            <param name="testValues">The test values.</param>
            <param name="logic">The logic.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.checkLists.instanceCheckList`1.AddAllowValues(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds instances that can be checked
            </summary>
            <param name="allowedValues">The allowed values.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.collection.checkLists.instanceCheckList`1.items">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.collection.checkLists.NamespaceDoc">
            <summary>
            Here are various kinds of "check list" data structures with main purpose in context of reporting.
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.IOneOrMore.iTI">
            <summary>
            informacije o tipu koji je smesten i jedini dozvoljen u kolekciji
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.IOneOrMore.isNothing">
            <summary>
            TRUE kad nema nista u kolekciji, ali je inicijalizovana
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.IOneOrMore.isSomething">
            <summary>
            Kontra od isNothing - tj. da ima nesto u sebi
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.IOneOrMore.Value">
            <summary>
            neposredan pristup prvom itemu
            </summary>
        </member>
        <member name="T:imbSCI.Core.collection.NamespaceDoc">
            <summary>
            Extended version of <see cref="!:PropertyCollection"/> and extension methods to work with <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/> and <see cref="!:PropertyCollection"/>, as well as, checklist collections
            </summary>
            <remarks>
            Some remarks. All XML Documentation defined here will be also included in the NamespaceGroupDoc. Therefore, there is no need to edit comments of the group class below.
            </remarks>
        </member>
        <member name="T:imbSCI.Core.collection.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.collection.oneOrMore`1">
             <summary>
             2014c> napredna kolekcija kojoj moze da se pristupa kao da je jedan objekat u pitanju - tada se vidi samo prvi item. Obavestava o promenama u kolekciji
             </summary>
             <remarks>
             Po defaultu ne kreira sam prvi item.
             doAutocreateFirst se podesava kroz konstruktor
             </remarks>
             <example>
             oneOrMoreCollection(object) item;
            
             item = object; // ovo postavlja prvi objekat u kolekciju
            
             object tmp = item; // ovo vraca prvi objekat u nizu, ako jos nije instanciran oneOrMoreCollection
             </example>
             <typeparam name="T">Objekat koji se smesta u kolekciju</typeparam>
        </member>
        <member name="P:imbSCI.Core.collection.oneOrMore`1.iTI">
            <summary>
            informacije o tipu koji je smesten i jedini dozvoljen u kolekciji
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.oneOrMore`1.doAutocreateFirst">
            <summary>
            Da li da automatski napravi prvi item - definise se samo pri instanciranju, ostavljeno kao field cisto ako budem menjao
            </summary>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.#ctor(System.Boolean)">
            <summary>
            Moze da se definise da li dodaje prvi element ili ne
            </summary>
            <param name="__doAutocreateFirst"></param>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.#ctor">
            <summary>
            Napravice prvi element ako postoji parametarless konstruktor
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.oneOrMore`1.Value">
            <summary>
            direktan pristup prvom itemu
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.oneOrMore`1.isMany">
            <summary>
            Da li ima vise od jednog elementa
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.oneOrMore`1.isNothing">
            <summary>
            TRUE kad nema nista u kolekciji, ali je inicijalizovana
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.oneOrMore`1.isSomething">
            <summary>
            Kontra od isNothing - tj. da ima nesto u sebi
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.oneOrMore`1.defaultValue">
            <summary>
            podrazumevana vrednost
            </summary>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.op_Implicit(`0)~imbSCI.Core.collection.oneOrMore{`0}">
            <summary>
            Pravi novi kontejner
            </summary>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.op_Addition(imbSCI.Core.collection.oneOrMore{`0},`0)">
            <summary>
            Dodaje novi ili prvi clan u kolekciju - a ako je kolekcija null onda je instancira
            </summary>
            <param name="col"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.op_Addition(imbSCI.Core.collection.oneOrMore{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Dodaje sve elemente iz druge kolekcije
            </summary>
            <param name="col"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.op_Subtraction(imbSCI.Core.collection.oneOrMore{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Oduzima sve clanove iz prosledjene kolekcije
            </summary>
            <param name="col"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.op_Subtraction(imbSCI.Core.collection.oneOrMore{`0},`0)">
            <summary>
            Sklanja item iz operatora
            </summary>
            <param name="col"></param>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.First">
            <summary>
            javni metod za pristup prvom itemu - za neposredan pristup koristiti property Value
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.oneOrMore`1.getOrMakeFirst">
            <summary>
            vraca prvi item ili ga stvara ako tip ima parametarless konstruktor
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.collection.PropertyCollectionCategoryList`1">
            <summary>
            DataField Shemas, divided by Category specifications
            </summary>
            <remarks>
            <para>Auto-scanning of this level of inherence, properties splitted to categories.</para>
            <para>Supported <see cref="T:System.Attribute"/>: <see cref="T:System.ComponentModel.DisplayNameAttribute"/>, <see cref="T:System.ComponentModel.CategoryAttribute"/>, <see cref="T:System.ComponentModel.DescriptionAttribute"/></para>
            <para>Supported <see cref="T:imbSCI.Core.attributes.imbAttribute"/>: <see cref="F:imbSCI.Core.attributes.imbAttributeName.measure_displayGroup"/>, <see cref="F:imbSCI.Core.attributes.imbAttributeName.measure_displayGroupDescripton"/>...</para>
            </remarks>
            <example>
            <code>
            [DisplayName("Basic stage control")]
            [Description("Basic stage host with a  simple general objective solutions: iteration limit")]
            public class spiderStageControl : IAppendDataFieldsExtended
            </code>
            </example>
            <example>
            <code>
            [DisplayName("Sample size")]
            [Description("Sampled population count")]
            [imb(imbAttributeName.measure_displayGroup, "Sample")]
            [imb(imbAttributeName.measure_displayGroupDescripton, "Sample statictics")]
            [imb(imbAttributeName.measure_metaModelName, "SampleSize")]
            [imb(imbAttributeName.measure_metaModelPrefix, "SM01")]
            public Int32 sampleSize
            </code>
            <para>Recommanded attributes for meta description</para>
            </example>
            <value>
            List of PropertyCollectionExtended representing group/categories of properties
            </value>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionCategoryList`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.collection.PropertyCollectionCategoryList`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.NotImplementedException">-- not implemented --</exception>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionCategoryList`1.buildDataFieldsForCategory(System.String,`0)">
            <summary>
            Builds the data fields for category.
            </summary>
            <param name="category">The category.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionCategoryList`1.buildDataTableForCategory(System.String,`0)">
            <summary>
            Builds the data table for category.
            </summary>
            <param name="category">The category.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">-- not implemented --</exception>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionCategoryList`1.getName(System.Object,System.String)">
            <summary>
            Gets the name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="instanceNameProperty">The instance name property.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionCategoryList`1.buildPropertyCollectionExtendedList(System.String,System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Builds the property collection extended list.
            </summary>
            <param name="category">The category.</param>
            <param name="instances">The instances.</param>
            <param name="instanceNameProperty">The instance name property.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionCategoryList`1.buildDataTable(System.String,System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Builds the data table.
            </summary>
            <param name="category">The category.</param>
            <param name="instances">The instances.</param>
            <param name="instanceNameProperty">The instance name property.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">-- not implemented yet --</exception>
        </member>
        <member name="T:imbSCI.Core.collection.PropertyCollectionDictionary">
            <summary>
            PropertyCollection dataset by unique name (path)
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionDictionary.getDefault">
            <summary>
            Gets the default.
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.collection.PropertyCollectionExtended">
            <summary>
            PropertyCollection with extended meta information about it self and about Property entries
            </summary>
            <seealso cref="T:System.Data.PropertyCollection" />
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.ToString">
            <summary>
            PCE overriden ToString() shows name, description and parameter values
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.GetStringDictionary(imbSCI.Core.collection.PropertyEntryColumn,imbSCI.Core.collection.PropertyEntryColumn)">
            <summary>
            Builds dictionary with specified columns as key and value
            </summary>
            <param name="keyColumn">The key column.</param>
            <param name="valueColumn">The value column.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.AppendVertically(imbSCI.Core.collection.PropertyEntry,System.Collections.Generic.Dictionary{System.Object,System.String},System.Boolean)">
            <summary>
            Appends the vertically.
            </summary>
            <param name="pData">The p data.</param>
            <param name="externalDescriptionLibrary">The external description library.</param>
            <param name="excludeCoreColumns">if set to <c>true</c> [exclude core columns].</param>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.addAsObjectKey(System.Object,System.Object,System.Boolean,System.Collections.Generic.Dictionary{System.Object,System.String})">
            <summary>
            Adds as object key -- automatically designates title, uses <c>externalDescriptionLibrary</c> for definitions for non <see cref="T:imbSCI.Core.collection.PropertyEntryColumn"/> keys
            </summary>
            <param name="key">The key.</param>
            <param name="v1">The v1.</param>
            <param name="externalDescriptionLibrary">The external description library.</param>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.op_Implicit(imbSCI.Core.collection.PropertyCollectionExtended)~System.Data.DataTable">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/> to <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="pce">The pce.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtended.autoIncludeImportance">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtended.defaultTableColumn">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.getDataTable(imbSCI.Core.collection.PropertyEntryColumn[])">
            <summary>
            Builds the data table with columns specified - order of columns as specified
            </summary>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtended.name">
            <summary>Display title of this collection</summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtended.description">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtended.entries">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.AddRange(imbSCI.Core.collection.PropertyCollectionExtended,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds the range. When <c>skipExisting</c> booleans are <c>true</c> it applies <see cref="!:aceCommonTypes.enums.existingDataMode.overwriteExistingIfEmptyOrNull"/> for smarter data gathering
            </summary>
            <param name="source">The source.</param>
            <param name="skipExistingValues">if set to <c>true</c> [skip existing values].</param>
            <param name="skipExistingMeta">if set to <c>true</c> it will keep existing <c>PropertyEntry</c> when overlapped with source</param>
            <param name="strictMetaKeyMatch">If set to <c>true</c> it will not introduce new columns into data set. If <c>false</c> it will upgrade data set with not existing columns found at <c>source</c></param>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.AddMetaFrom(imbSCI.Core.collection.PropertyEntry,System.Boolean,System.Boolean)">
            <summary>
            Copis meta descriptions on the matching key. If <see cref="T:imbSCI.Core.collection.PropertyEntry"/> not defined it adds this
            </summary>
            <param name="pe">The pe.</param>
            <param name="skipExisting">if set to <c>true</c> [skip existing].</param>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.AddMetaFor(System.Object,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Redefines meta descriptions for <c>key</c> entry. Empty or null entries are ignored
            </summary>
            <param name="key">The key.</param>
            <param name="__unit">The unit.</param>
            <param name="__letter">The letter.</param>
            <param name="__symbol">The symbol.</param>
            <param name="__name">The name.</param>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.GetMetaForKey(System.Object)">
            <summary>
            Get all non value (<see cref="!:aceCommonTypes.extensions.data.PropertyEntryColumnExtensions.isKeyValueColumn(imbSCI.Data.collection.PropertyEntryColumn)"/> columns into <see cref="T:System.Data.PropertyCollection"/>
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.Add(System.Array,System.Object,System.String,System.String)">
            <summary>
            Maps to multiple keys
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="__name">The name.</param>
            <param name="__description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtended.Add(System.Object,System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="__name">The name.</param>
            <param name="__description">The description.</param>
            <param name="__unit">The unit.</param>
            <param name="__letter">The letter.</param>
            <param name="__symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.collection.PropertyCollectionExtendedList">
            <summary>
            Collection of <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/> instances, with its own name and description
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtendedList.name">
            <summary>
            Name for this instance
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtendedList.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtendedList.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/> with the specified instance identifier.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/>.
            </value>
            <param name="instanceID">The instance identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">instanceID - No entry found under this name</exception>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtendedList.Count">
            <summary>
            Counts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyCollectionExtendedList.getColumnValue_Default">
            <summary>
            The get column value default
            </summary>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtendedList.Add(imbSCI.Core.collection.PropertyCollectionExtended,System.Enum)">
            <summary>
            Takes Attribute values to set name and description for the collection
            </summary>
            <param name="item">The item.</param>
            <param name="instanceID">The instance identifier.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtendedList.Add(imbSCI.Core.collection.PropertyCollectionExtended,System.String,System.Boolean)">
            <summary>
            Adds the <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended" /> under Key supplied with <c>instanceID</c>.
            </summary>
            <param name="item">The collection to be included</param>
            <param name="instanceID">The instance identifier. If not supplied it will take <see cref="P:imbSCI.Core.collection.PropertyCollectionExtended.name" /></param>
            <param name="synchronizeID">if set to <c>true</c> it will make sure that <c>item</c> <see cref="P:imbSCI.Core.collection.PropertyCollectionExtended.name" /> has the final <c>instanceID</c> value.</param>
            <returns>
            Used version of <c>instanceID</c>. It will differ from the specified if the collection already contained item with such name
            </returns>
            <remarks>
            <para>If <c>instanceID</c> is already used it will call <see cref="M:imbSCI.Core.extensions.text.imbStringGenerators.makeUniqueName(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.Boolean)" /> to get unique version.</para>
            <para>If the <c>item</c> has no name set and <c>instanceID</c> specified - it is automatically set</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtendedList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionExtendedList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionExtendedList.items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionHistoryRecord.getDataTable">
            <summary>
            NOT IMPLEMENTED
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyCollectionHistoryRecord.getDataForEntry(System.Int32)">
            <summary>
            Gets the data for entry.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionHistoryRecord.shema">
            <summary>
            Gets or sets the shema.
            </summary>
            <value>
            The shema.
            </value>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyCollectionHistoryRecord.timeSeries">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.collection.PropertyCollectionList">
            <summary>
            List of <c>PropertyCollection</c> objects
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;System.Data.PropertyCollection&gt;" />
        </member>
        <member name="T:imbSCI.Core.collection.PropertyEntry">
            <summary>
            Meta information about property/entry in <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/>
            </summary>
            <seealso cref="T:System.Data.PropertyCollection" />
            <seealso cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/>
            <seealso cref="T:imbSCI.Core.collection.PropertyEntryDictionary"/>
            <seealso cref="T:imbSCI.Core.collection.PropertyEntryDictionary"/>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyEntry.priority">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyEntry.keyName">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyEntry.getColumn(imbSCI.Core.collection.PropertyEntryColumn,System.Object)">
            <summary>
            Gets the columm value - applying special procedure for certain <c>PropertyEntryColumn</c>
            </summary>
            <param name="column">The column.</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyEntry.EntryKey">
            <summary>
            Key associated with the entry
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyEntry.EntryValue">
            <summary>
            Gets or sets the value associated with this property
            </summary>
            <value>
            The entry value1.
            </value>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyEntry.#ctor(System.Object,System.Object,System.String,System.String,imbSCI.Core.enums.dataPointImportance)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.collection.PropertyEntry"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="name">Initial value for Display Name</param>
            <param name="description">Initial description - overide of description found in <c>value</c> object</param>
            <param name="relevance">The relevance - override of info found in <c>value</c></param>
            <seealso cref="T:imbSCI.Core.interfaces.IValueWithRoleInfo"/>
            <seealso cref="T:imbSCI.Core.interfaces.IValueWithUnitInfo"/>
            <seealso cref="T:imbSCI.Core.interfaces.IValueWithImportanceInfo"/>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithNameAndDescription"/>
        </member>
        <member name="T:imbSCI.Core.collection.PropertyEntryColumn">
            <summary>
            Column/data aspect of the PropertyEntry
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.entry_key">
            <summary>
            Original version of entry key
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.entry_name">
            <summary>
            Display version of entry name
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.entry_description">
            <summary>
            Asociated entry description
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.entry_value">
            <summary>
            Display version of entry value - formatted but without unit
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.entry_valueAndUnit">
            <summary>
            Display version of entry value, formatted with unit
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.role_letter">
            <summary>
            Measure role letter
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.role_symbol">
            <summary>
            Measure symbol
            </summary>
        </member>
        <member name="F:imbSCI.Core.collection.PropertyEntryColumn.role_name">
            <summary>
            Measure role name
            </summary>
        </member>
        <member name="T:imbSCI.Core.collection.PropertyEntryDictionary">
            <summary>
            Contains meta-information about entries in <see cref="T:imbSCI.Core.collection.PropertyCollectionExtended"/>
            </summary>
            <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.Object, aceCommonTypes.collection.PropertyEntry&gt;" />
        </member>
        <member name="P:imbSCI.Core.collection.PropertyEntryDictionary.items">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyEntryDictionary.flags">
            <summary>Flags giving special instructions for DataTable construction and other data transformations</summary>
        </member>
        <member name="P:imbSCI.Core.collection.PropertyEntryDictionary.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:imbSCI.Core.collection.PropertyEntry"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.collection.PropertyEntry"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.PropertyEntryDictionary.Get(System.Object)">
            <summary>
            Searches for property entry definition
            </summary>
            <param name="key">The key. It can be string, it will be used as lowercase</param>
            <returns>PropertyEntry</returns>
        </member>
        <member name="T:imbSCI.Core.collection.resourceDictionaryBase`1">
            <summary>
            Simple generic dictionary used by: <see cref="!:aceCommonTypes.collection.reportOutputRepository"/>, <see cref="T:imbSCI.Core.collection.PropertyCollectionDictionary"/>/>
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="F:imbSCI.Core.collection.resourceDictionaryBase`1.items">
            <summary>
            The items
            </summary>
        </member>
        <member name="M:imbSCI.Core.collection.resourceDictionaryBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Core.collection.resourceDictionaryBase`1.Count">
            <summary>
            Counts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.resourceDictionaryBase`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:imbSCI.Core.collection.resourceDictionaryBase`1.Item(System.Enum)">
            <summary>
            Gets the <see cref="!:T"/> with the specified key.
            </summary>
            <value>
            The <see cref="!:T"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.collection.resourceDictionaryBase`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:imbSCI.Core.collection.resourceDictionaryBase`1.getDefault">
            <summary>
            Gets the default.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.collection.resourceDictionaryBase`1.Item(System.String)">
            <summary>
            Gets or sets the <see cref="!:PropertyCollection"/> with the specified key. Automatically creates entry for new key
            </summary>
            <value>
            The <see cref="!:PropertyCollection"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.config.imbSCICoreConfig">
            <summary>
            General configuration object for domain of <see cref="N:imbSCI.Core"/> and <see cref="N:imbSCI.Data"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.config.imbSCICoreConfig.#ctor">
            <summary>
            Constructor without arguments is obligatory for XML serialization
            </summary>
        </member>
        <member name="P:imbSCI.Core.config.imbSCICoreConfig.isDefaultReplaced">
            <summary>
            Gets or sets a value indicating whether, since program start, <see cref="P:imbSCI.Core.config.imbSCICoreConfig.settings"/> were replaced with another instance, i.e. loaded externally
            </summary>
            <value>
              <c>true</c> if this instance is default replaced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.config.imbSCICoreConfig.settings">
            <summary>
            General settings for domain of <see cref="N:imbSCI.Core"/> and <see cref="N:imbSCI.Data"/>
            </summary>
            <value>
            Global settings
            </value>
        </member>
        <member name="P:imbSCI.Core.config.imbSCICoreConfig.DataTableReports_DoExportXMLData">
            <summary>
            It will export serialized table object in "clean data" sub folder
            </summary>
            <value>
              <c>true</c> if [data table reports do export XML data]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbSCI.Core.config.NamespaceDoc">
            <summary>
            <para>Lowest level application configuration instance</para>
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.aceAuthorNotation">
            <summary>
            Data structure with basic information on the author, application, copyright.. etc. Used for reports, log files signatures etc.
            </summary>
            <seealso cref="T:imbSCI.Data.data.imbBindable" />
        </member>
        <member name="M:imbSCI.Core.data.aceAuthorNotation.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.aceAuthorNotation"/>, setting default data by reading <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/> attributes
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.aceAuthorNotation.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbSCI.Core.data.aceAuthorNotation.GetDescription(imbSCI.Core.reporting.render.ITextRender)">
            <summary>
            Gets the description lines for data defined in this instance
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.aceAuthorNotation.imbSCI#Core#reporting#IAppendDataFields#AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>
            Updated or newly created property collection
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.software">
            <summary>
            Name of the software application
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.author">
            <summary>
            Author of the software
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.license">
            <summary>
            License information
            </summary>
            <value>
            The licence.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.copyright">
            <summary>
            Copyright notice text
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.comment">
            <summary>
            Comment to be placed in footer/meta info of the reports
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.organization">
            <summary>
            Organization behind the software
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.web">
            <summary> Web site of the project, software, organization or author </summary>
        </member>
        <member name="P:imbSCI.Core.data.aceAuthorNotation.Email">
            <summary> E-mail address of the project, author, organization... </summary>
        </member>
        <member name="T:imbSCI.Core.data.cache.CacheServiceProvider">
            <summary>
            Provides cached data
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.cache.CacheServiceProvider.instanceID">
            <summary>
            Cache provider instance ID
            </summary>
            <value>
            The instance identifier.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.cache.CacheServiceProvider.GetFilename(System.String,System.String,System.String,System.String)">
            <summary>
            Makes path name for existing or non existing cached data object
            </summary>
            <param name="setupSignature">The setup signature.</param>
            <param name="datasetSignature">The dataset signature.</param>
            <param name="itemName">Name of the item.</param>
            <param name="typename">The typename.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.data.cache.CacheServiceProvider.loaded">
            <summary>
            Dictionary of loaded data objects
            </summary>
            <value>
            The loaded.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.cache.CacheServiceProvider.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.cache.CacheServiceProvider.SetCached``1(System.String,System.String,System.String,``0)">
            <summary>
            Saves cached data object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setupSignature">The setup signature.</param>
            <param name="datasetSignature">The dataset signature.</param>
            <param name="itemName">Name of the item.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbSCI.Core.data.cache.CacheServiceProvider.GetCached``1(System.String,System.String,System.String)">
            <summary>
            Gets cached data object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="setupSignature">The setup signature.</param>
            <param name="datasetSignature">The dataset signature.</param>
            <param name="itemName">Name of the item.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.data.cache.IHasCacheProvider">
            <summary>
            Classes that use cache provider
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.help.helpBuilderConfiguration">
            <summary>
            Configuration for helpBuilder
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.help.helpBuilderConfiguration.GeneralBlogSearchURL">
            <summary> General blog search URL prefix - called when search blog for this entry link is generated </summary>
        </member>
        <member name="P:imbSCI.Core.data.help.helpBuilderConfiguration.doLoadXMLMeta">
            <summary> If true it will try to load meta data from XML file </summary>
        </member>
        <member name="P:imbSCI.Core.data.help.helpBuilderConfiguration.outputPath">
            <summary> Path to export help content, relative to application execution path </summary>
        </member>
        <member name="T:imbSCI.Core.data.help.aceCommandConsoleHelpOptions">
            <summary>
            
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.help.helpBuilderContext">
            <summary>
            Context of help documentation construction, created as single help generation medium
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.help.helpBuilderContext.GenerateMetaContent(imbSCI.Core.reporting.render.ITextRender,imbSCI.Core.data.help.imbMetaAttributeEnum,imbSCI.Core.data.settingsMemberInfoEntry)">
            <summary>
            Constructs meta content
            </summary>
            <param name="output">The output.</param>
            <param name="meta">The meta.</param>
            <param name="helpContext">The help context.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:imbSCI.Core.data.help.imbMetaAttribute">
            <summary>
            Defines additional meta information for documentation generation
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:imbSCI.Core.data.help.imbMetaAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.help.imbMetaAttribute"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.help.imbMetaAttribute.#ctor(imbSCI.Core.data.help.imbMetaAttributeEnum,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.help.imbMetaAttribute"/> class.
            </summary>
            <param name="_type">The type.</param>
            <param name="_path">The path.</param>
            <param name="_description">The description.</param>
        </member>
        <member name="P:imbSCI.Core.data.help.imbMetaAttribute.path">
            <summary>
            Path leading to external content. For search link, it must contain {0} place holder
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.help.imbMetaAttribute.description">
            <summary>
            Additional description
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.help.imbMetaAttribute.type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:imbSCI.Core.data.help.imbMetaAttributeEnum">
            <summary>
            Meta attribute type
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.help.imbMetaAttributeEnum.AttachExample">
            <summary>
            Attaches external example to a member
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.help.imbMetaAttributeEnum.AttachContent">
            <summary>
            Attaches external markdown content to a member 
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.help.imbMetaAttributeEnum.AttachLink">
            <summary>
            Defines a static web link
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.help.imbMetaAttributeEnum.AddSearchLink">
            <summary>
            Defines API / Blog search link
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.help.imbMetaAttributeEnum.AddContextProperty">
            <summary>
            Defines a property as Plugin / Command console execution context
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.help.imbMetaAttributeEnum.AddProjectProperty">
            <summary>
            Defines a property as Project instance
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.help.imbMetaAttributeEnum.AddExampleInLine">
            <summary>
            Adds inline example, related to the member
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.help.imbMetaAttributeSet.Set(System.Reflection.MemberInfo)">
            <summary>
            Selects all imbMeta attributes from member info
            </summary>
            <param name="mi">The mi.</param>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberCrefElement">
            <summary>
            Universal C# XML comment element used for : see also,
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberCrefElement.description">
            <summary>
            Parameter description content
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberCrefElement.cref">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberCrefElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.metadata.memberCrefElement"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberDescription">
            <summary>
            C# XML documentation content, unserialized from XML file
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberDescription.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberDescription.summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>
            The summary.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberDescription.remarks">
            <summary>
            Gets or sets the remarks.
            </summary>
            <value>
            The remarks.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberDescription.returns">
            <summary>
            Gets or sets the returns.
            </summary>
            <value>
            The returns.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberDescription.value">
            <summary>
            Content in the the value tag
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberDescription.parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberDescription.exceptions">
            <summary>
            Gets or sets the exceptions.
            </summary>
            <value>
            The exceptions.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.metadata.memberDescription"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberParamDescription">
            <summary>
            C# XML documentation content for parameter element
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberParamDescription.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberParamDescription.description">
            <summary>
            Parameter description content
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberParamDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.metadata.memberParamDescription"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberRegistrationSettings">
            <summary>
            Settings for member meta-data extraction, loading and publishing
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberRegistrationSettings.membersFilter">
            <summary>
            Gets or sets the members filter.
            </summary>
            <value>
            The members filter.
            </value>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberRegistry">
            <summary>
            Concurrent dictionary of namespace member data entry
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberRegistry.settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistry.LoadAssembly(System.Reflection.Assembly,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistry.LoadDLL(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the DLL.
            </summary>
            <param name="dllPath">The DLL path.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistry.LoadXML(System.Xml.XmlDocument,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads C# XML documentation from the file
            </summary>
            <param name="source">The source.</param>
            <param name="log">The log.</param>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberRegistry.mainRegistry">
            <summary>
            Main registry instance
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberRegistryEntry">
            <summary>
            Member meta data registry graph node
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistryEntry.deployNode(System.Xml.XmlNode)">
            <summary>
            Deploys the node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberRegistryEntry.member">
            <summary>
            Member meta data
            </summary>
            <value>
            The member.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberRegistryEntry.memberType">
            <summary>
            Gets or sets the type of the member.
            </summary>
            <value>
            The type of the member.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberRegistryEntry.doAutorenameOnExisting">
            <summary>
            Turns on the autorenaming, when new child is inserted into this node - it will autorename it to have unique name
            </summary>
            <value>
            <c>true</c> if [do autorename on existing]; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistryEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.metadata.memberRegistryEntry"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberRegistryEntryType">
            <summary>
            Type of the registry
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberRegistryTools">
            <summary>
            Conversion tools
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistryTools.GetEnum(System.String)">
            <summary>
            Gets the enum.
            </summary>
            <param name="letter">The letter.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistryTools.GetXMLMemberName(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the name of the XML member.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="addPrefixCode">If <c>true</c> adds 1-letter member type code (M,T,P,F...)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unknown member type - member</exception>
        </member>
        <member name="F:imbSCI.Core.data.metadata.memberRegistryTools.regex_SelectMethodPath">
            <summary>
            Selects two or three groups from the member XML name attribute. First group is member type, then namespace/type path and 3rd is method brackets content
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistryTools.ToMemberType(imbSCI.Core.data.metadata.memberRegistryEntryType)">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.Core.data.metadata.memberRegistryEntryType"/> to <see cref="T:System.Reflection.MemberTypes"/>.
            </summary>
            <param name="entryType">Type of the entry.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberRegistryTools.GetString(imbSCI.Core.data.metadata.memberRegistryEntryType)">
            <summary>
            Gets the string.
            </summary>
            <param name="entryType">Type of the entry.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.data.metadata.memberTypeParam">
            <summary>
            Generic type definition
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberTypeParam.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.metadata.memberTypeParam.description">
            <summary>
            Parameter description content
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.metadata.memberTypeParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.metadata.memberTypeParam"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.metadata.NamespaceDoc">
             <summary>
             <para>XML comments, assembly reflection data and other member description structures</para>
             </summary>
             <remarks>
             <para>Provides object model, serialization and caching services</para>
             <list type="bullet">
             	<listheader>
            			<term>Namespace domain</term>
            			<description>Functional areas and application fields</description>
            		</listheader>
            		<item>
            			<term>File processing</term>
            			<description></description>
            		</item>
            		<item>
            			<term>2</term>
            			<description></description>
            		</item>
             </list>
             <example>
             Application example:
             <code language="cs" title="Using  namespace">
            
             </code>
             </example>
             </remarks>
             <seealso cref="!:remarks" />
        </member>
        <member name="T:imbSCI.Core.data.NamespaceDoc">
            <summary>
            Advanced reflection tools - type graph descriptors, string path to property navigation and type meta data loader: from documentation C# XML and compiled DLL
            </summary>
            <remarks>
            Some remarks. All XML Documentation defined here will be also included in the NamespaceGroupDoc. Therefore, there is no need to edit comments of the group class below.
            </remarks>
        </member>
        <member name="T:imbSCI.Core.data.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.data.PropertyExpression">
            <summary>
            Graph-tree structure providing access to simple-type (string, numbers, boolean, enums) values (get/set/describe) properties of complex objects
            </summary>
            <seealso cref="T:imbSCI.Data.collection.graph.graphNode" />
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.undesolvedPart">
            <summary>
            Part of the expression path that left unresolved
            </summary>
            <value>
            The undesolved part.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.parentExpression">
            <summary>
            Parent expression node
            </summary>
            <value>
            The parent expression.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.state">
            <summary>
            State of this expression node, indicating if it was solved or not
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.hostType">
            <summary>Type of the host instance at this expression node</summary>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.host">
            <summary>Host instance at this expression node </summary>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.property">
            <summary>Property information about this expression node</summary>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.valueType">
            <summary>
            Type of the value that is pointed by property expression
            </summary>
            <value>
            The type of the value.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.Leaf">
            <summary>
            Opposite to root -- the last child
            </summary>
            <value>
            The leaf.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpression.getValue(System.Object)">
            <summary>
            Gets the value at this expression node
            </summary>
            <param name="ifNotFoundReturn">If not found return.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpression.setValue(System.Object,System.Boolean)">
            <summary>
            Sets the value at this expression node
            </summary>
            <param name="val">The value.</param>
            <param name="allowAddToCollection">if set to <c>true</c> [allow add to collection].</param>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.IsWritable">
            <summary>
            Gets a value indicating whether this instance is writable.
            </summary>
            <value>
              <c>true</c> if this instance is writable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.PropertyExpression.IsReady">
            <summary>
            Gets a value indicating whether this instance is ready for reading value
            </summary>
            <value>
              <c>true</c> if this instance is ready; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpression.Expand(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Expands this property expression with sub properties, until specified <c>maxDepth</c> <see cref="P:imbSCI.Data.collection.graph.IGraphNode.level"/>
            </summary>
            <param name="maxDepth">The maximum depth.</param>
            <param name="IncludeReadOnly">if set to <c>true</c> [include read only].</param>
            <param name="IncludeListsAndDictionaries">if set to <c>true</c> [include lists].</param>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpression.Add(System.String,System.Object)">
            <summary>
            Includes new property in the tree
            </summary>
            <param name="__pathPart">The path part.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpression.#ctor(System.Object,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates root expression - cannot set value directy, used for expression tree building
            </summary>
            <param name="__host">The host.</param>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpression.#ctor(System.Collections.IDictionary,System.String,imbSCI.Core.data.PropertyExpression)">
            <summary>
            Adds sub PropertyExpression for property inside <see cref="T:System.Collections.IList"/>
            </summary>
            <param name="__host">The host.</param>
            <param name="__index">The index.</param>
            <param name="__parent">The parent.</param>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpression.#ctor(System.Collections.IList,System.Int32,imbSCI.Core.data.PropertyExpression)">
            <summary>
            Adds sub PropertyExpression for property inside <see cref="T:System.Collections.IList"/>
            </summary>
            <param name="__host">The host.</param>
            <param name="__index">The index.</param>
            <param name="__parent">The parent.</param>
        </member>
        <member name="T:imbSCI.Core.data.PropertyExpressionTools">
            <summary>
            Tools to work with <see cref="T:imbSCI.Core.data.PropertyExpression"/> graphs, to evaluate String path... See: <see cref="M:imbSCI.Core.data.PropertyExpressionTools.GetExpressionResolved(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.PropertyExpressionTools.GetExpressionResolved(System.Object,System.String)">
            <summary>
            Resolves the specified expresion <c>path</c>, having <c>host</c> as starting node
            </summary>
            <param name="host">The host object - the starting point for expression path interpretation</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.data.PropertyItem">
            <summary>
            Zamena za externu biblioteku
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.PropertyItem.PropertyType">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.data.PropertyItem.Value">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.data.settingsEntriesForObject">
            <summary>
            View data model - for representation of an Object and its Type in GUI, TUI or autogenerated description, user manual and
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsEntriesForObject.id">
            <summary>
            Identification string used for internal caching
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsEntriesForObject.DisplayName">
            <summary>
            Name of this type/class - if not specified then uses normal type name
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsEntriesForObject.registry">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.#ctor(System.Type,System.Boolean)">
            <summary>
            Generise meta model za prosledjeni tip
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Generise meta model za prosledjeni objekat
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:imbSCI.Core.data.settingsEntriesForObject.targetType">
            <summary>
            Reference to the type that is being processed
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsEntriesForObject.pce">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.SortProperty(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Sorts the property.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.GetSignature">
            <summary>
            Hashed type signature
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.data.settingsEntriesForObject.TypeInfo">
            <summary>
            Information on the type level
            </summary>
            <value>
            The type information.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.processType(System.Type,System.Boolean,System.Object,System.Int32)">
            <summary>
            Processes the type.
            </summary>
            <param name="type">The type.</param>
            <param name="includeCollectionItems">if set to <c>true</c> [include collection items].</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.inheritMissingSettings(imbSCI.Core.data.settingsMemberInfoEntry)">
            <summary>
            Inherit default values from parent type, for some settings like color
            </summary>
            <param name="sME">The s me.</param>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.processObject(System.Object,System.Boolean)">
            <summary>
            Ucitava objekat u sebe i postavlja sve definicije
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObject.valueToObject(System.Object)">
            <summary>
            Sets contextual data back into object instance, or creates new instance if <c>target</c> is null
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.data.settingsEntriesForObject.spes">
            <summary>
            settings entries with context
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.settingsEntriesForObjectExtensions">
            <summary>
            Extensions for <see cref="T:imbSCI.Core.data.settingsEntriesForObject"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObjectExtensions.SetDataTable(System.Collections.Generic.IEnumerable{imbSCI.Core.data.settingsMemberInfoEntry},System.Data.DataTable)">
            <summary>
            Adds columns and transfers formating and other meta information specified in the <see cref="T:imbSCI.Core.data.settingsPropertyEntry"/> entries. 
            </summary>
            <param name="table">The table to write columns into. If not specified, it will create new with name of the group.</param>
            <remarks>The method will declare only <see cref="T:imbSCI.Core.data.settingsPropertyEntry"/>s, not the entries of other type</remarks>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObjectExtensions.SetDataRow(System.Collections.Generic.IEnumerable{imbSCI.Core.data.settingsMemberInfoEntry},System.Data.DataTable,System.Object,System.Data.DataRow,System.Boolean)">
            <summary>
            Sets the data row.
            </summary>
            <param name="input">The input.</param>
            <param name="table">The table.</param>
            <param name="data">The data.</param>
            <param name="dr">The dr.</param>
            <param name="addRowBeforeEnd">if set to <c>true</c> [add row before end].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObjectExtensions.GetDictionary(System.Collections.Generic.IEnumerable{imbSCI.Core.data.settingsMemberInfoEntry},System.Object,System.String)">
            <summary>
            Gets the dictionary of values, key = prefix + PropertyInfo.Name
            </summary>
            <param name="input">The input.</param>
            <param name="data">Data instance, to read value from</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.data.settingsEntriesForObjectExtensions.GetMemberInfoGroupDictionary(imbSCI.Core.data.settingsEntriesForObject)">
            <summary>
            Builds member info group dictionary
            </summary>
            <param name="objectInfo">The object information.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.data.settingsMemberInfoEntry">
            <summary>
            Base class exposing extensive meta information on <see cref="T:System.Reflection.MemberInfo"/>s, used to access meta annotation for reporting. <seealso cref="T:imbSCI.Core.data.settingsPropertyEntry"/>, <seealso cref="T:imbSCI.Core.data.settingsPropertyEntryWithContext"/> and <see cref="T:imbSCI.Core.data.settingsEntriesForObject"/>.
            </summary>
            <remarks>The best way to use this model is to call <see cref="T:imbSCI.Core.data.settingsEntriesForObject"/> constructor, that will generate this object for each reflected member</remarks>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.metaAttributeSet">
            <summary>
            Set meta attributa
            </summary>
            <value>
            The meta attribute set.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.isHiddenInReport">
            <summary>
            Gets or sets a value indicating whether this instance is hidden in report.
            </summary>
            <value>
              <c>true</c> if this instance is hidden in report; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.settingsMemberInfoEntry.#ctor(System.Reflection.MemberInfo,imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Descriptor info model -- aceTypology
            </summary>
            <param name="mi">The mi.</param>
        </member>
        <member name="M:imbSCI.Core.data.settingsMemberInfoEntry.deploy(imbSCI.Core.attributes.imbAttributeName,System.String)">
            <summary>
            Deploys value <c>dtc_value</c> for <c>dtc</c> attribute name
            </summary>
            <param name="dtc">The DTC.</param>
            <param name="dtc_val">The DTC value.</param>
        </member>
        <member name="M:imbSCI.Core.data.settingsMemberInfoEntry.deploy(imbSCI.Data.enums.fields.templateFieldDataTable,System.Object)">
            <summary>
            Deploys the specified <c>dtc_val</c> value, according to <c>dtc</c> property
            </summary>
            <param name="dtc">The DTC.</param>
            <param name="dtc_val">The DTC value.</param>
        </member>
        <member name="M:imbSCI.Core.data.settingsMemberInfoEntry.deployAttributes(System.Object[])">
            <summary>
            Deploys values according to values found in attributes
            </summary>
            <param name="propAttributes">The property attributes.</param>
        </member>
        <member name="M:imbSCI.Core.data.settingsMemberInfoEntry.process(System.Reflection.MemberInfo,imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Processes the specified mi.
            </summary>
            <param name="mi">The mi.</param>
            <param name="pce">The pce.</param>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.helpContent">
            <summary>
            Help content for this member
            </summary>
            <value>
            The content of the help.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.isPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary key.
            </summary>
            <value>
              <c>true</c> if this instance is primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.letter">
            <summary>
            Letter or code name for this member
            </summary>
            <value>
            The letter.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.color">
            <summary>
            Hexadecimal color code or name
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.textColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>
            The color of the text.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.range_defined">
            <summary>
            Gets or sets a value indicating whether the range is defined.
            </summary>
            <value>
              <c>true</c> if [range defined]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.range_min">
            <summary>
            Gets or sets the range minimum.
            </summary>
            <value>
            The range minimum.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.range_max">
            <summary>
            Gets or sets the range maximum.
            </summary>
            <value>
            The range maximum.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.displayName">
            <summary>
            Naziv varijable za prikaz
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.categoryName">
            <summary>
            Naziv kategorije propertija
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.description">
            <summary>
            Opis
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.attributes">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.pe">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.template">
             <summary>
            property is a String template, this property contains wrapping template where {{{inner}}} is result of member value: template with placeholders {{{property_name}}}
             </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.format">
            <summary>
            Value format to apply
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.expression">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.prompt">
            <summary>
            Message when used asked for value of this property
            </summary>
            <value>
            The prompt.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.importance">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.priority">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.escapeValueString">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.groups">
            <summary>Groups this property is asociated with</summary>
        </member>
        <member name="M:imbSCI.Core.data.settingsMemberInfoEntry.exportPropertyCollection(System.Data.PropertyCollection)">
            <summary>
            Exports the property collection.
            </summary>
            <param name="extraData">The extra data.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.data.settingsMemberInfoEntry.acceptableValues">
            <summary>
            prihvatljive vrednosti
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.settingsMemberInfoGroup">
            <summary>
            Group of properties described trough <see cref="T:imbSCI.Core.data.settingsMemberInfoEntry"/> instances
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbSCI.Core.data.settingsMemberInfoEntry&gt;" />
        </member>
        <member name="T:imbSCI.Core.data.settingsMemberInfoGroupDictionary">
             <summary>
            
             </summary>
             <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.String, imbSCI.Core.data.settingsMemberInfoGroup&gt;" />
        </member>
        <member name="T:imbSCI.Core.data.settingsPropertyEntry">
            <summary>
            Reflected meta-information on a property
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsPropertyEntry.index">
            <summary>
            indeks na kome se nalazi - ako je -1 onda nije kolekcija
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsPropertyEntry.type">
            <summary>
            referenca prema tipu
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.settingsPropertyEntry.#ctor(System.Reflection.MemberInfo,imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Deklarise jedan property entry i podesava njegove parametre prikaza
            </summary>
            <param name="__pi"></param>
        </member>
        <member name="P:imbSCI.Core.data.settingsPropertyEntry.pi">
            <summary>
            referenca prema PropertyInfo objektu
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsPropertyEntryWithContext.host">
            <summary>
            referenca prema objektu
            </summary>
        </member>
        <member name="P:imbSCI.Core.data.settingsPropertyEntryWithContext.value">
            <summary>
            trenutna vrednost
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.systemWatch.MemoryWatch">
            <summary>
            Provides memory consumption bogwatch mechanism
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.systemWatch.MemoryWatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.systemWatch.MemoryWatch"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.systemWatch.MemoryWatch.Deploy(System.Double,System.Double,System.Int32)">
            <summary>
            Deploys the specified limit normal.
            </summary>
            <param name="_limit_normal">The limit normal.</param>
            <param name="_limit_critical">The limit critical.</param>
            <param name="secondsTick">The seconds tick.</param>
        </member>
        <member name="P:imbSCI.Core.data.systemWatch.MemoryWatch.limit_normal">
            <summary>
            Megabytes, limit for normal operations
            </summary>
            <value>
            The limit normal.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.systemWatch.MemoryWatch.limit_critical">
            <summary>
            Megabytes, limit that triggers <see cref="F:imbSCI.Core.data.systemWatch.MemoryWatchDirective.flush"/> directive
            </summary>
            <value>
            The limit normal.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.systemWatch.MemoryWatch.currentlyUsed">
            <summary>
            Megabytes of RAM consumed - last measurement
            </summary>
            <value>
            The currently used.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.systemWatch.MemoryWatch.currentMode">
            <summary>
            Gets or sets the current mode.
            </summary>
            <value>
            The current mode.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.systemWatch.MemoryWatch.Describe(imbSCI.Core.reporting.render.ITextRender)">
            <summary>
            Describes the specified output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:imbSCI.Core.data.systemWatch.MemoryWatch.Evaluate">
            <summary>
            Evaluates current state of the memory consumption
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.data.systemWatch.MemoryWatchDirective">
            <summary>
            Directive that <see cref="T:imbSCI.Core.data.systemWatch.MemoryWatch"/> produces
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.systemWatch.MemoryWatchDirective.normal">
            <summary>
            Used memory is below allowed limit, therefore continue normal operation
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.systemWatch.MemoryWatchDirective.prevent">
            <summary>
            The program should stop consuming additional memory
            </summary>
        </member>
        <member name="F:imbSCI.Core.data.systemWatch.MemoryWatchDirective.flush">
            <summary>
            The program should flush cached data in order to release memory
            </summary>
        </member>
        <member name="T:imbSCI.Core.data.UniversalTypeProvider`1">
            <summary>
            Provides types and instances by type name.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
        </member>
        <member name="M:imbSCI.Core.data.UniversalTypeProvider`1.Prepare(imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Prepares the type provider
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:imbSCI.Core.data.UniversalTypeProvider`1.namespaceToScan">
            <summary>
            Gets or sets the namespace to scan.
            </summary>
            <value>
            The namespace to scan.
            </value>
        </member>
        <member name="P:imbSCI.Core.data.UniversalTypeProvider`1.ThrowExceptionOnNotFound">
            <summary>
            Gets or sets a value indicating whether to throw exception when a type not found when <see cref="M:imbSCI.Core.data.UniversalTypeProvider`1.GetInstance(System.String)"/> or <see cref="M:imbSCI.Core.data.UniversalTypeProvider`1.GetTypeByName(System.String)"/> is called.
            </summary>
            <value>
              <c>true</c> if [throw exception on not found]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.data.UniversalTypeProvider`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.data.UniversalTypeProvider`1"/> class.
            </summary>
            <param name="_namespaceToScan">The namespace to scan. If not specified, it will scan namespace of {TInterface}.</param>
        </member>
        <member name="P:imbSCI.Core.data.UniversalTypeProvider`1.typeDictionary">
            <summary>
            class name vs type dictionary 
            </summary>
        </member>
        <member name="M:imbSCI.Core.data.UniversalTypeProvider`1.GetTypeByName(System.String)">
            <summary>
            Performs safe search within this provider
            </summary>
            <param name="classname">Name of type to get</param>
            <returns>Type or Null if not found</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">classname - Specified class name [" + classname + "] was not found in type dictionary (count:" + typeDictionary.Count + ") created by scanning [" + namespaceToScan + "] namespace</exception>
        </member>
        <member name="M:imbSCI.Core.data.UniversalTypeProvider`1.GetInstance(System.String)">
            <summary>
            Gets new instance for the class name
            </summary>
            <param name="classname">Name of type to get instance of. Type must have parametarless constructor.</param>
            <returns>Instance of class specified by <c>classname</c></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">classname - Specified class name [" + classname + "] was not found in type dictionary (count:" + typeDictionary.Count + ") created by scanning [" + namespaceToScan + "] namespace</exception>
        </member>
        <member name="T:imbSCI.Core.enums.existingDataMode">
            <summary>
            Rule how to handle existing data when append new data collection or single entry
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.existingDataMode.overwriteExisting">
            <summary>
            it will overwrite any existing data in
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.existingDataMode.overwriteExistingIfEmptyOrNull">
            <summary>
            The overwrites existing only if existing value is null or empty string
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.existingDataMode.leaveExisting">
            <summary>
            it will leave existing entries unchanged
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.existingDataMode.clearExisting">
            <summary>
            it will clear  any (other) existing entry or entries and place only specified (one) or (collection). WARNING: beware that in single entry operation it will clear ALL existing data and place only the one specified
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.existingDataMode.filterAndLeaveExisting">
            <summary>
            it will remove all existing entries that are not matched by new collection
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.existingDataMode.filterNewOverwriteExisting">
            <summary>
            result is key-crossection of existing and new collection - values are from new
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.existingDataMode.sumWithExisting">
            <summary>
            result will be sum of existing and new values
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.imbTypeGroup.number">
            <summary>
            isNumer = true
            </summary>
        </member>
        <member name="T:imbSCI.Core.enums.NamespaceDoc">
            <summary>
            <para>Shared enumerations</para>
            </summary>
        </member>
        <member name="F:imbSCI.Core.enums.operation.sin">
            <summary>
            2nd operatior as angle
            </summary>
        </member>
        <member name="M:imbSCI.Core.enums.operationExtensions.CompressNumericVector(System.Double[],imbSCI.Core.enums.operation)">
            <summary>
            Compresses the numeric vector.
            </summary>
            <param name="nVector">The n vector.</param>
            <param name="operation">Allowed operations: <see cref="F:imbSCI.Core.enums.operation.multiplication"/>, <see cref="F:imbSCI.Core.enums.operation.max"/>, <see cref="F:imbSCI.Core.enums.operation.min"/>, <see cref="F:imbSCI.Core.enums.operation.plus"/></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Operation [" + operation.ToString() + "] not supported by this method. - operation</exception>
        </member>
        <member name="T:imbSCI.Core.extensions.data.collectionExtensions">
            <summary>
            Ekstenzije za manipulaciju kolekcijama
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.Poke(System.Collections.IDictionary)">
            <summary>
            Pokes the specified dictionary -- fake method just to trigger lazy initialization
            </summary>
            <param name="dict">The dictionary.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.Randomize``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomizes order of items in the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.RandomizeToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new list where the elements are randomly shuffled.
            Based on the Fisher-Yates shuffle, which has O(n) complexity.
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.imbGetItemAt(System.Collections.IEnumerable,System.Int32,System.Boolean)">
            <summary>
            Universal method for getting element out of unknown <see cref="T:System.Collections.IEnumerable" />
            </summary>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <param name="doException">if set to <c>true</c> [do exception].</param>
            <returns>
            null if <c>index</c> is out of range
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.imbGetIndexOf(System.Collections.IEnumerable,System.Object,System.Boolean,System.Int32)">
            <summary>
            Gets index of item in an unknown enumeration
            </summary>
            <param name="source">The source.</param>
            <param name="needle">The needle.</param>
            <param name="doException">if set to <c>true</c> [do exception].</param>
            <param name="searchLimit">The search limit.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">needle - Search exceeded specified searchLimit</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.makeUniqueDictionaryName(System.Collections.IDictionary,System.String,System.Int32@,System.Int32)">
            <summary>
            Makes a new Key for the dictionary by using proposal + _ count
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="proposal">The proposal.</param>
            <param name="lastIteration">The last iteration.</param>
            <param name="iterationLimit">The iteration limit - when to give up</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">iterationLimit - Failed to make name from proposal [" + proposal + "] after [" + c.ToString() + "] iterations!</exception>
            <exception cref="T:System.Exception">Failed to make name from proposal [" + proposal + "] after [" + c.ToString() + "] iterations!</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.ConvertIList``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an IList to List
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.toSortedList``1(System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            To the sorted list of Keys from <see cref="T:System.Collections.IDictionary"/> where Keys are instances and Values are number fo sort by
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict">The dictionary.</param>
            <returns>List with instances, sorted by value</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.toSortedKeyValueList``1(System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>
            To the sorted list of Keys from <see cref="T:System.Collections.IDictionary"/> where Keys are instances and Values are number fo sort by
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dict">The dictionary.</param>
            <returns>List with instances, sorted by value</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.toListWithThisOne``1(``0)">
            <summary>
            Pravi List instancu i ubacuje ovaj objekat kao prvi element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.count(System.Collections.IEnumerable)">
            <summary>
            Universal counting
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Adds (optionally: unique) values from the specified range
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="items">The items.</param>
            <param name="onlyUniqueValues">if set to <c>true</c> it will add only unique values.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.AddRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Adds (optionally: unique) values from the specified range:
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.getCountOf(System.Collections.Generic.IEnumerable{System.Boolean},System.Boolean)">
            <summary>
            Gets the count of Boolean items that has value same as <c>valueToCount</c>
            </summary>
            <param name="checkList">The check list.</param>
            <param name="valueToCount">What value to count</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.getAndRemoveAllIfExists(System.Collections.Generic.List{System.Object},System.Enum[])">
            <summary>
            Gets the and remove all if any exists
            </summary>
            <param name="source">The source.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.getAndRemoveIfExists(System.Collections.Generic.List{System.Object},System.Enum[])">
            <summary>
            Returns TRUE and removes the first key found in source list
            </summary>
            <param name="source">The source.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.getFirstOfType``1(System.Collections.IEnumerable,System.Boolean,System.Object,System.Boolean)">
            <summary>
            Gets the first instance that <c>is</c> compatibile with <c>T</c> in supplied collection. Supports PropertyCollection and other collections
            </summary>
            <typeparam name="T">Type to test against using <c>is</c> keyword</typeparam>
            <param name="source">The source collection to search in</param>
            <param name="makeNewIfNotFound">if set to <c>true</c> [make new if not found].</param>
            <param name="defaultReturn">The default return.</param>
            <param name="disableException">if set to <c>true</c> it will not throw exception if item not found</param>
            <returns>
            Instance of type
            </returns>
            <exception cref="!:aceGeneralException">Resource of type " + typeof(T).Name + " not supplied in the resources collection</exception>
            <remarks>
            Uses <c>is</c> keyword to test.
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.getAllOfType``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Gets the first instance of type in supplied collection. <c>makeNewIfNotFound</c>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source collection to search in</param>
            <returns>Instance of type</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.getAllEnums(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Gathers all enumerations found in the collection
            </summary>
            <param name="source">The source.</param>
            <param name="excludeEnumNamedNone">if set to <c>true</c> [exclude enum named none].</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbSCI.Core.extensions.data.collectionExtensions.getFlatArray``1(System.Collections.IEnumerable,System.Type[])" -->
        <!-- Badly formed XML comment ignored for member "M:imbSCI.Core.extensions.data.collectionExtensions.getFlatList``1(System.Collections.IEnumerable,System.Type[])" -->
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.autoDefaultValues``2(System.Collections.Generic.Dictionary{``0,``1},``1,System.Boolean)">
            <summary>
            Automatics the default values.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="D"></typeparam>
            <param name="dict">The dictionary.</param>
            <param name="defValue">The definition value.</param>
            <param name="skipExisting">if set to <c>true</c> [skip existing].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.convertValueToString(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the value to string.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.AddResources(System.Collections.Generic.IList{System.Object},System.Object[])">
            <summary>
            Adds the resources.
            </summary>
            <param name="host">The host.</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.AddMulti(System.Collections.IList,System.Object[])">
            <summary>
            Adds the specified input/s - if exists skips
            </summary>
            <param name="host">The host.</param>
            <param name="input">The input.</param>
            <returns>Number of objects iserted</returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.AddMultiple(System.Collections.IList,System.Object[])">
            <summary>
            Adds the specified input/s - if exists skips
            </summary>
            <param name="host">The host.</param>
            <param name="input">The input.</param>
            <returns>Number of objects iserted</returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.AddUnique(System.Collections.IList,System.Object[])">
            <summary>
            Adds the specified input/s - if exists skips
            </summary>
            <param name="host">The host.</param>
            <param name="input">The input.</param>
            <returns>Number of objects iserted</returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.AddRangeImb(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Dodaje niz objekata u niz ukoliko ih vec ne sadrzi lista - vraca podatak koliko je novih objekata ubaceno
            </summary>
            <param name="host">Lista u koju se ubacuju objekti</param>
            <param name="input">Bilo koja IEnumerable kolekcija</param>
            <returns>Koliko je objekata ubaceno? posto ne ubacuje objekat koji je vec zadrzan u listi</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.isNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Proverava da li je kolekcija null ili bez clanova
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.imbLastSafe``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Imbs the last safe.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.imbFirstSafe(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Imbs the first safe.
            </summary>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.imbFirstOrMore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Vraca jedan ili vise resursa koji ispunjavaju uslov
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.imbFirstSafe``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Proverava uslov
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.imbFirstSafe``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Proverava uslov
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.writeListOfCollection``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Vraca listu sa rednim brojem i ToString() vrednost
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.getFirstSafe(System.Collections.IEnumerable)">
            <summary>
            Gets the first safe.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.takeFirstFromList``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Vraca prvi element koji je pronadjen u ulaznom skupu - default vraca prvi element matchList
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="matchList"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.takeFirstFromList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Vraca prvi objekat koji se nalazi i u ovom skupu i u matchList skupu
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="matchList">Koji od elemenata treba da se poklopi</param>
            <param name="defReturn">Element koji vraca u podrazumevanom slucaju</param>
            <returns>Prvi element koji se nalazi u oba skupa</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.takeItemAt``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Vraca objekat iz liste - sa trazene index lokacije koja lupuje
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.takeItemRelativeTo``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Vraca item koji je na relativnoj lokaciji od relativeTo, podrzava lupovanje u oba smera
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="relativeTo">Item u odnosu na koji trazi relativni item. Ukoliko relativeTo nije nu kolekciji koristi indexStep kao index upit</param>
            <param name="indexStep">1 = next line, -1 = prev line, -5 = 5 lines before, 5 = 5 lines after, 0 = this line</param>
            <returns>Vraca null ako je relativeTo null i ako je source kolekcija prazna.</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.toList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Konvertuje niz u listu
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.collectionExtensions.writeIndexOutOf``1(System.Collections.Generic.IList{``0},``0,System.String)">
            <summary>
            Writes the index out of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="item">The item.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions">
            <summary>
            Extensions to process and access data from or to PropertyCollection
            </summary>
            \ingroup_disabled ace_ext_datastructs
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.toPropertyCollection(System.Collections.Generic.IEnumerable{System.Enum},System.String)">
            <summary>
            From IEnumerable{Enum} makes <see cref="T:System.Data.PropertyCollection" /> where Key is <see cref="!:Type.Name" /> and Value is the <see cref="T:System.Enum" /> or <see cref="M:System.Enum.ToString(System.String)" /> if <c>format</c> is specified
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format for .ToString() conversion of the <see cref="T:System.Enum"/> value. If it is not null but <c>empty</c> string: the value will be <see cref="M:System.Enum.ToString"/>.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.copyInto(System.Data.PropertyCollection,System.Data.PropertyCollection)">
            <summary>
            Copies all members of one collection to another. Use <c>AppendData</c> for smarter operations.
            </summary>
            <seealso cref="!:imbPropertyCollectionExtensions.AppendData(PropertyCollection, PropertyCollection, existingDataMode)"/>
            <param name="target">Collection to copy into</param>
            <param name="source">Collection to copy from</param>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.setToObject(System.Data.PropertyCollection,System.Object,System.String)">
            <summary>
            Sets all where key without prefix matches property name
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="prefix">The prefix.</param>
            <returns>Number of properties ser</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.setFromObject(System.Data.PropertyCollection,System.Object)">
            <summary>
            Sets all where key without prefix matches property name
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="prefix">The prefix.</param>
            <returns>Number of properties ser</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.addOrSetFromObject(System.Data.PropertyCollection,System.Object,System.Type,System.Boolean)">
            <summary>
            Reads values from source object
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <param name="enumType">Type of the enum.</param>
            <param name="skipExisting">if set to <c>true</c> [skip existing].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.setToObject(System.Data.PropertyCollection,System.Object,System.Enum,System.String)">
            <summary>
            Sets to object.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <param name="prefix">The prefix that will help more efficient execution</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.setFromEnumType(System.Data.PropertyCollection,System.Type,System.Boolean)">
            <summary>
            Populates the collection with empt
            </summary>
            <param name="target">The target.</param>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getAndRemoveProperString(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Gets the and remove proper string.
            </summary>
            <param name="source">The source.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getStringLine(System.Data.PropertyCollection,System.String,System.Enum[])">
            <summary>
            Combines <c>getProperString()</c> results and separator string to create output.
            </summary>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
            \ingroup_disabled ace_ext_collections_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getProperString(System.Data.PropertyCollection,System.String,System.Enum[])">
            <summary>
            Prefered overload - finds the first proper value (not empty, not null) in <c>source</c> using fiven <c>fields</c> or returns <c>defaultValue</c> if no field was found.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <param name="fields">The fields to test for proper value. Follows the given order</param>
            <returns>
            First proper value found or <c>defaultValue</c> if nothing found
            </returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getProperString(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Finds the first proper value (not empty, not null) in <c>source</c> using fiven <c>fields</c>
            </summary>
            <param name="source">The source.</param>
            <param name="fields">The fields to test for proper value. Follows the given order</param>
            <returns>First proper value found</returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="P:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.EnumToStringValues">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.get(System.Data.PropertyCollection,System.Object,System.Object)">
            <summary>
            Gets value using the specified key or its <c>ToString()</c> form if not found on first try
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value for the key or default value</returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getAndRemoveProperObject``1(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Gets the and remove proper object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getProperObject``1(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Gets the field in proper <c>T</c> type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="fields">The fields.</param>
            <returns>Typed object</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getAndRemoveProperField(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Finds the first proper value (not empty, not null) in <c>source</c> using given <c>fields</c> and removes original data from the source
            </summary>
            <param name="source">The source.</param>
            <param name="fields">The fields to test for proper value. Follows the given order</param>
            <returns>First proper value found</returns>
            \ingroup_disabled ace_ext_collections_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getProperBoolean(System.Data.PropertyCollection,System.Boolean,System.Enum[])">
            <summary>
            Gets the proper boolean: first entry found using <c>fields</c> -- encapsulates <see cref="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getProperField(System.Data.PropertyCollection,System.Enum[])"/>
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">Result on not found or if value is string</param>
            <param name="fields">The fields to seach</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getProperInt32(System.Data.PropertyCollection,System.Int32,System.Enum[])">
            <summary>
            Gets the proper int32.
            </summary>
            <param name="source">The source.</param>
            <param name="defaultValue">The default value.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.getProperField(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Finds the first proper value (not empty, not null) in <c>source</c> using fiven <c>fields</c>
            </summary>
            <param name="source">The source.</param>
            <param name="fields">The fields to test for proper value. Follows the given order</param>
            <returns>First proper value found</returns>
            \ingroup_disabled ace_ext_collections_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.containsKey(System.Data.PropertyCollection,System.Enum)">
            <summary>
            Determines whether the specified key contains key - by testing ToString() value it direct test returns false
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.containsAnyOfKeys(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Determines whether collection contains at least one key - field.
            </summary>
            <param name="source">The source.</param>
            <param name="fields">The fields.</param>
            <returns>
              <c>true</c> if [contains any of keys] [the specified fields]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.containsAllOfKeys(System.Data.PropertyCollection,System.Enum[])">
            <summary>
            Determines whether contains all of keys - the specified fields.
            </summary>
            <param name="source">The source.</param>
            <param name="fields">The fields.</param>
            <returns>
              <c>true</c> if [contains all of keys] [the specified fields]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.containsAllOfTypes(System.Data.PropertyCollection,System.Type[])">
            <summary>
            Determines whether contains values for each of the specified types.
            </summary>
            <param name="source">The source collection</param>
            <param name="types">The types that require values</param>
            <returns>
              <c>true</c> if contains values for each of the specified types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.containsAnyOfTypes(System.Data.PropertyCollection,System.Type[])">
            <summary>
            Determines whether contains any value being one the specified types.
            </summary>
            <param name="source">The source collection</param>
            <param name="types">The types to test values against</param>
            <returns>
              <c>true</c> if [contains any of types] [the specified types]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.Append(System.Data.PropertyCollection,System.Object,System.Object,imbSCI.Core.enums.existingDataMode)">
            <summary>
            Appends the specified key and value accordint the specified <see cref="!:aceCommonTypes.enums.existingDataMode"/>. Returns TRUE if <c>newValueCandidate</c> was written as result of the <c>policy</c> specified.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <param name="newValueCandidate">The new value candidate - it will be or not written under specified <c>key</c> depending on <c>policy</c> and current <c>data</c> </param>
            <param name="policy">The policy on handling existing entry for the <c>key</c> specified</param>
            <returns>FALSE if <c>newValueCandidate</c> was not written into <c>data</c> collection</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.AppendData(System.Data.PropertyCollection,System.Data.PropertyCollection,imbSCI.Core.enums.existingDataMode,System.Boolean)">
            <summary>
            Combines two PropertyCollections according <c>policy</c> specified
            </summary>
            <param name="existing">Collection that will be changed</param>
            <param name="data">New data to append</param>
            <param name="policy">How to manage key duplicates</param>
            \ingroup_disabled ace_ext_collections_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.addObjectToMultikeys(System.Data.PropertyCollection,System.Object,System.Boolean,System.Enum[])">
            <summary>
            Adds the object to multiple keys
            </summary>
            <param name="existing">The existing.</param>
            <param name="data">The data.</param>
            <param name="skipExistingKeys">if set to <c>true</c> [skip existing keys].</param>
            <param name="keys">The keys to set this </param>
            <returns>Number of fields updated</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.addStringToMultikeys(System.Data.PropertyCollection,System.String,System.Boolean,System.Enum[])">
            <summary>
            Adds the string to multikeys.
            </summary>
            <param name="existing">The existing.</param>
            <param name="data">String to write. If its null or empty nothing is done</param>
            <param name="skipExistingKeys">if set to <c>true</c> [skip existing keys].</param>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.add(System.Data.PropertyCollection,System.Enum,System.Object,System.Boolean)">
            <summary>
            Safe way to add or update
            </summary>
            <param name="existing">The existing.</param>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
            <param name="skipExistingKeys">if set to <c>true</c> [skip existing keys].</param>
            <returns>TRUE if it was added, and FALSE if criteria never met</returns>
             \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.AddRange(System.Data.PropertyCollection,System.Data.PropertyCollection,System.Boolean)">
            <summary>
            Adds or replaces values of existing with values from data. Overwrite is off if <c>skipExistingKeys</c> is TRUE
            </summary>
            <param name="existing">Collection to modify</param>
            <param name="data">input data</param>
            <param name="skipExistingKeys">on TRUE it will not replace existing values</param>
            <returns>Number of newly added key/value pairs. -1 if <c>data</c> is <c>null</c></returns>
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.buildDataTable``1(System.Data.PropertyCollection)">
            <summary>
            Builds DataTable with two columns: Property name and Value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
            \ingroup_disabled ace_ext_collections_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.buildPropertyCollectionList(System.Collections.IEnumerable,System.Boolean,System.Boolean,System.String,imbSCI.Core.collection.PropertyCollectionList,System.String[])">
            <summary>
            Builds the property collection list from <c>IEnumerable</c> source collection
            </summary>
            <param name="source">Any enumerable collection of any object with public properties</param>
            <param name="doOnlyWithDisplayName">if set to <c>true</c> it will only include properties with declared <c>DisplayNameAttribute</c> .</param>
            <param name="doInherited">if set to <c>true</c> it will get inherited propertis too.</param>
            <param name="filedName_prefix">Name prefix to be applied before property name in order to be compatibile with templateField... enum type members</param>
            <param name="output">List with one <c>PropertyCollection</c> per each <c>Object</c> in source</param>
            <param name="fieldsOrCategoriesToShow">The fields or categories to show.</param>
            <returns>List of <c>PropertyCollection</c> with data obtained from <c>source</c> collection objects.</returns>
            \ingroup_disabled ace_ext_collections_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.buildPCE(System.Object,System.Boolean,imbSCI.Core.collection.PropertyCollectionExtended,System.String[])">
            <summary>
            </summary>
            <param name="source">The source.</param>
            <param name="doInherited">if set to <c>true</c> [do inherited].</param>
            <param name="filedName_prefix">The filed name prefix.</param>
            <param name="output">The output.</param>
            <param name="fieldsOrCategoriesToShow">The fields or categories to show.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbPropertyCollectionExtensions.buildPropertyCollection``1(System.Object,System.Boolean,System.Boolean,System.String,``0,System.String[])">
            <summary>
            Create or update property collection out of object properties
            </summary>
            <remarks>
            <para>Key is original property name - not displayName</para>
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="doOnlyWithDisplayName"></param>
            <param name="doInherited"></param>
            <param name="filedName_prefix"></param>
            <param name="output"></param>
            <param name="fieldsOrCategoriesToShow"></param>
            <returns></returns>
            \ingroup_disabled ace_ext_collections_highlight
        </member>
        <member name="T:imbSCI.Core.extensions.data.imbStringCollectionExtensions">
            \ingroup_disabled ace_ext_string
            \ingroup_disabled ace_ext_collections
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.buildDataTable(System.Collections.Generic.IEnumerable{System.String},imbSCI.Core.extensions.data.imbStringCollectionExtensions.buildDataTableOptions,System.String)">
            <summary>
            Builds the data table from string lines
            </summary>
            <param name="lines">The lines.</param>
            <param name="options">The options.</param>
            <param name="dataTable">The data table - name</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Determines whether the specified target contains any of needles
            </summary>
            <param name="target">The target.</param>
            <param name="needles">The needles.</param>
            <returns>
              <c>true</c> if the specified target contains any of needle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.AddFirstOr``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0,System.String[])">
            <summary>
            Adds the <c>value</c> into <see cref="T:System.Collections.IDictionary"/> under first valid key specified with <c>first</c> and <c>orThese</c> parameters. Returns key value that was finally applied.
            </summary>
            <param name="target">The target.</param>
            <param name="first">The first.</param>
            <param name="value">The value.</param>
            <param name="orThese">The or these.</param>
            <returns></returns>
            <exception cref="!:aceCommonTypes.core.exceptions.aceGeneralException">None of these argument is value - null - AddFirstOr(first, ... orThese others)</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.AddSeveral(System.Collections.IList,System.String[])">
            \ingroup_disabled ace_ext_collections
            
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.getTotalLength(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Gets the total length of all strings in collection
            </summary>
            <param name="list">The list.</param>
            <param name="items">The items.</param>
            <returns>Sum of Length for all strings</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.Replace(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Replaces all Keys with corresponding Values
            </summary>
            <param name="input"></param>
            <param name="willcards"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.insertNewLineInOutput(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Inserts new line in String IList collection
            </summary>
            <param name="output">output to accept new line</param>
            <param name="newline">content of the new line</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbStringCollectionExtensions.removeEmptyOrNull(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Filter out empty or null entries -  Vraca listu iz koje su izbaceni null i "" stringovi
            </summary>
            <param name="input"></param>
            <returns></returns>
            \ingroup_disabled ace_ext_strings
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbDataExtensions.fromCsvInLine(System.String,System.String)">
            <summary>
            Iterprets one CSV line into list of Strings
            </summary>
            <param name="input"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.data.imbDataExtensions.toCsvInLine(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Renders CSV line from <see cref="!:object.toStringSafe()"/>, <see cref="!:separator"/> is removed from item String
            </summary>
            <param name="input">Collection of strings or objects that support ToString() </param>
            <param name="separator">Separator between items</param>
            <param name="propertyName">Name of property to read -- if empty object is used directly</param>
            <returns>One string</returns>
        </member>
        <member name="T:imbSCI.Core.extensions.data.PropertyEntryColumnExtensions">
            <summary>
            Extenisons for PropertyEntryColumn
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.data.PropertyEntryColumnExtensions.toColumnCaption(imbSCI.Core.collection.PropertyEntryColumn,System.Boolean)">
            <summary>
            To the column caption.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:imbSCI.Core.extensions.data.PropertyEntryColumnExtensions.toColumnPriority(imbSCI.Core.collection.PropertyEntryColumn)">
            <summary>
            To the column caption.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:imbSCI.Core.extensions.data.PropertyEntryColumnExtensions.setDataColumn(imbSCI.Core.collection.PropertyEntryColumn,System.Data.DataColumn)">
            <summary>
            Sets the data column according to PropertyEntryColumn
            </summary>
            <param name="column">The column.</param>
            <param name="tableColumn">The table column.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:imbSCI.Core.extensions.enumworks.imbEnumExtendBase">
            <summary>
            Ekstenzije za rad sa enum tipovima
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.ToInt32(System.Enum)">
            <summary>
            Converts to number
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.ToInt32From(System.Enum,System.Enum)">
            <summary>
            Returns distance in <see cref="T:System.Int32"/> between <c>from</c> <see cref="T:System.Enum"/> and <c>to</c> value.
            </summary>
            <param name="from">Enum to start measuring distance from.</param>
            <param name="to">Enum value to measure distace to.</param>
            <returns>Int32 distance between options <c>from</c> and <c>to</c></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.getEnumMemberByPath(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the enum member by path, generated by <see cref="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.getEnumMemberPath(System.Object,System.Boolean,System.String,System.Boolean)"/>, [enum type name].[enum member name].
            </summary>
            <param name="enumMemberPath">The enum member path.</param>
            <param name="enumTypes">The enum types to lookup.</param>
            <returns>null on fail</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.getEnumMemberPath(System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            Vraca enum member path koji moze da se koristi za preuzimanje enumeracije i njenog tipa
            </summary>
            <param name="enumSource"></param>
            <param name="includeMemberName">Ako je false - onda ce prvo pretpostaviti da je enumSource ustvari Type</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.getEnumAsDefaultsList(System.Type)">
            <summary>
            Generates default list in string format out of Type
            </summary>
            <param name="EnumType">Enumeration type</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.GetEnumFromStringFlags``1(System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Gets the enum from string flags.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stringFlags">The string flags.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.GetEnumFromStringFlags(System.Type,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns all matching enumeration members, if no match returns empty list
            </summary>
            <param name="EnumType">Type of the enum.</param>
            <param name="stringFlags">The string flags.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumExtendBase.getEnumByName(System.Type,System.String,System.Object)">
            <summary>
            Na osnovu zadatog tipa i imena vraća instancu enumeracijije. Ako ne može da pronađe po imenu onda vraća prvu
            </summary>
            <param name="EnumType">Tip koji je enumeracija</param>
            <param name="name">String ime enumeration člana</param>
            <returns>Enumeracija - instanca</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumForGenericCollections.Add(System.Collections.Generic.IDictionary{System.Object,System.String},System.Enum)">
            <summary>
            Adds the specified item as key and its String form as Value
            </summary>
            <param name="target">The target.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumForGenericCollections.AddEnumAll``1(System.Collections.Generic.IDictionary{System.Object,System.String})">
            <summary>
            Add all enum values of the specified enum type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbEnumForGenericCollections.AddEnumAsNumericAll``1(System.Collections.Generic.IDictionary{System.Object,System.String})">
            <summary>
            Adds all enum values from the type but as numeric string coresponding to the Enum member Int32 value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbTypeEnumExtensions.SetFlag``1(System.Enum,System.Enum,System.Boolean)">
            <summary>
            Sets the flag specified <c>flag</c>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="en">The enumeration to receive the flag</param>
            <param name="flag">The flag to set</param>
            <param name="setFlag">if set to <c>true</c> set the flag, if <c>false</c> it will unset</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbTypeEnumExtensions.HasFlags(System.Enum,System.Boolean)">
            <summary>
            Determines whether the specified en has flags .
            </summary>
            <typeparam name="T"></typeparam>
            <param name="en">The en.</param>
            <param name="onOneFlag">The result to return if there is only one flag,and it is not <c>none</c> or <c>0</c> value</param>
            <returns>
              <c>true</c> if the specified en has flags; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbTypeEnumExtensions.HasFlagAttribute(System.Enum)">
            <summary>
            Determines whether the <see cref="T:System.Type"/> of <c>en</c> has <see cref="T:System.FlagsAttribute"/> attribute set
            </summary>
            <param name="en">The en.</param>
            <returns>
              <c>true</c> if [has flag attribute] [the specified en]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbTypeEnumExtensions.convertToBasicEnum``1(System.Enum)">
            <summary>
            Converts a Enum type member into another Enum type member with name starting with or being the same as name of the first.
            </summary>
            <typeparam name="T">Enum jednostavniji</typeparam>
            <param name="input"></param>
            <remarks>
            <c>input</c> name should start with name of a member from <c>Enum</c>
            This may be used for same-name Enum to Enum conversion.
            <example>
            <para>inputEnum => input</para>
            <para>input => input</para>
            <para>input != inputEnum</para>
            </example>
            </remarks>
            <returns>T member with the same name or name that starts with <c>input</c> name</returns>
            \ingroup_disabled ace_ext_enum_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbTypeEnumExtensions.imbToEnumeration(System.Object,System.Type,System.Enum)">
            <summary>
            Convers an value to the best fit Enumeration member
            </summary>
            <remarks>
            Kada input spada u kategorije:
            Boolean - ako je true onda mu zadaje onTrueEnum, za False ide prvi enum
            Enumeration - koristi findEnumerationMember() method> prvo same, starts, end, contains pa na kraju default int32
            Instance - koristi ime klase za findEnumerationMember()
            </remarks>
            <param name="input"></param>
            <param name="enumerationType"></param>
            <param name="onTrueEnum"></param>
            <returns>Enum member that matches input value</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.imbTypeEnumExtensions.findEnumerationMember(System.Type,System.String,System.Int32)">
            <summary>
            Pronalazi imbEnumMemberInfo sa imenom koje odgovara needle-u, ako ne pronadje onda vraca podrazumevani enum na osnovu inputInt
            </summary>
            <remarks>
            Redosled pretrage> 1. ==, 2. starts, 3.ends, 4.contains</remarks>
            <param name="outputTi">Tipologija za Enum</param>
            <param name="needle">rec koja se trazi</param>
            <param name="inputInt">redni broj default enuma</param>
            <returns>Pronadjeni ili default enum. Null ako tipologija uopste nije enum</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.settingsEntriesInfoModelApi.getDescriptionDictionary(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets the description dictionary for Enum or other object keys
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.enumworks.settingsEntriesInfoModelApi.getDescriptionForDictionary(System.Object)">
            <summary>
            Gets the description for dictionary, property table etc
            </summary>
            <param name="k">The k.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.io.fileCheckType">
            <summary>
            Tip provere dostupnosti fajla:
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.io.fileCheckType.write">
            <summary>
            U fajl je moguće upisivati
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.io.fileCheckType.read">
            <summary>
            Moguće je čitati podatke iz fajla
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.io.fileCheckType.exists">
            <summary>
            Fajl postoji - isto što i: File.Exists
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.getFileExtension(imbSCI.Data.enums.appends.appendLinkType)">
            <summary>
            Gets the file extension.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.extensions.io.fileOpsBase.standardBlockSize">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.io.fileOpsBase.applicationFolder">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.getFileSearchFilter(System.String)">
            <summary>
            Pravi i/ili proverava ispravnost search filtera. Ako je null onda daje *.*; Ako dobije samo ekstenziju ili ekstenziju sa . priprema *.ext filter. Ako dobije filter koji ima filename i ext onda dodaje * ispred .
            </summary>
            <param name="filterOrExt"></param>
            <returns>Search filter koji se koristi u Files i Directory pretragama</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.getResolvedPath(System.String,System.Boolean)">
            <summary>
            Proverava ispravnost unete putanje, vraca apsolutnu formu (u odnosu na mesto izvrsavanja programa)
            </summary>
            <param name="path">Relativna ili apsolutna putanja koju treba proveriti</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.getDirectory(System.String,System.Boolean)">
            <summary>
            Vraca directory info za prosledjen path i generise putanju automatski ako je nema
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.copyFile(System.String,System.String,System.String)">
            <summary>
            Kopiranje fajlova koji odgovaraju upitu
            </summary>
            <param name="sourcePath">Putanja sa koje se kopira</param>
            <param name="clientPath">Putanja na koju se kopira - samo folder path, ne filename</param>
            <param name="subjectTitle">Naziv fajla koji se kopira</param>
            <returns>Diagnostic message</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.zipDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Boolean,System.String)">
            <summary>
            Zips the directory.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="zipFilename">The zip filename.</param>
            <param name="zipAsSubFolder">if set to <c>true</c> [zip as sub folder].</param>
            <param name="selectionPattern">The selection pattern.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.copyDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies the directory.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="selectionPattern">The selection pattern.</param>
            <param name="copyAsSubfolder">if set to <c>true</c> [copy as subfolder].</param>
            <param name="copySubFolders">if set to <c>true</c> [copy sub folders].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.copyFiles(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Kopira sve fajlove koji odgovaraju podesavanjima.
            </summary>
            <param name="sourceFolder">Odakle kopira</param>
            <param name="destinationFolder">Gde kopira</param>
            <param name="subjectTitle">Naslov koji koristi u Logovanju</param>
            <param name="selectionPattern">Uslovi selektovanja, npr> *.dll</param>
            <param name="copySubFolders">Ako je TRUE onda ce prekopirati i sve foldere kao i njihov sadrzaj koji odgovara upitu</param>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.deleteFiles(System.IO.DirectoryInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the files.
            </summary>
            <param name="targetFolder">The target folder.</param>
            <param name="selectionPattern">The selection pattern.</param>
            <param name="subFolders">if set to <c>true</c> [sub folders].</param>
            <param name="allowOutOfSandBoxTarget">if set to <c>true</c> [allow out of sand box target].</param>
            <exception cref="T:System.Exception">Sandbox Exception: can't delete files outside application folder [" + fileOpsBase.applicationFolder.FullName + "]. Requested delete path [" + targetFolder + "].</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.deleteFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes the files matching the <c>selectionPattern</c>
            </summary>
            <param name="targetFolder">The target folder.</param>
            <param name="selectionPattern">The selection pattern.</param>
            <param name="subFolders">if set to <c>true</c> [sub folders].</param>
            <param name="allowOutOfSandBoxTarget">if set to <c>true</c> [allow out of sand box target].</param>
            <exception cref="T:System.Exception">Sandbox Exception: can't delete files outside application folder [" + fileOpsBase.applicationFolder.FullName + "]. Requested delete path [" + targetFolder + "].</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.deleteAll(System.String,System.Boolean)">
            <summary>
            Deletes all inside target folder
            </summary>
            <param name="targetFolder">The source folder.</param>
            <param name="allowOutOfSandBoxTarget">if set to <c>true</c> [allow out of sand box target].</param>
            <exception cref="T:System.Exception">Sandbox Exception: can't delete files outside application folder [" + fileOpsBase.applicationFolder + "]. Requested delete path [" + targetFolder + "].</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.io.fileOpsBase.fileCheck(System.String,imbSCI.Core.extensions.io.fileCheckType)">
            <summary>
            Proverava fajl - vraca TRUE ako ispunjava uslov iz fileCheckType
            </summary>
            <param name="path">Putanja na kome se fajl mozda nalazi</param>
            <param name="checkType">tip provere</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.io.filePathOperations">
            <summary>
            Set of extensions processing file path strings and performing file operations
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.GetImageFormatByExtension(System.String)">
            <summary>
            Gets the image format by extension.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">File extension from [" + filepath + "] not recognized - filepath</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.getCleanPropertyName(System.String)">
            <summary>
            Izdvaja ime propertija u member path-u. --- brise sve simbole koji cine elemente patha
            </summary>
            <remars>
            Primer 01: Za environment.serialization.typeName[key]   - vraca typeName
            Primer 02: Za environment.serialization.typeName        - vraca typeName
            </remars>
            <param name="propertyFullName"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.addTimeStamp(System.String)">
            <summary>
            Inserts timestamp as filename sufix
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.addFileNameSufix(System.String,System.String)">
            <summary>
            2017: inserts supplied sufix before .extension and after filenameWithoutExtension. It will put \"_\" between original filename and sufix
            </summary>
            <param name="filepath"></param>
            <param name="sufix"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.addUniqueSufix(System.String,System.String)">
            <summary>
            Path unique sufix automatic counter. It will add to filename numeric counter of priorly existed files. Also it may add preTestPrefix on filename at beginning of the procedure.
            </summary>
            <param name="filepath">Putanja ka fajlu koji zeli da snimi</param>
            <param name="addPreTestPrefix">Adds this sufix before testing on existing file</param>
            <returns>Putanju dopunjenu sa _n sufixom tako da je fajl unikatan</returns>
        </member>
        <member name="P:imbSCI.Core.extensions.io.filePathOperations.PATH_FORBIDEN">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.io.filePathOperations.PATH_REPLACE">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.io.filePathOperations.FILENAME_FORBIDEN">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.io.filePathOperations.FILENAME_REPLACE">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.removeStrings(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all substrings from the input string
            </summary>
            <param name="input">The input.</param>
            <param name="chars">The chars.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.getFilename(System.String,System.String)">
            <summary>
            2017c> Makes proper filename our of any string -- better than> <see cref="M:imbSCI.Core.extensions.io.filePathOperations.getCleanFilePath(System.String)"/> (Izbacuje iz imena fajla sve nepravilne karaktere)
            </summary>
            <param name="name">filename without extension</param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.getCleanFilePath(System.String)">
            <summary>
            2017: Removes forbiden characters from file path and double \\\\ but leaves underline
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.openFileToList(System.IO.FileInfo,System.Boolean,System.Text.Encoding)">
            <summary>
            Opens the file to string list
            </summary>
            <param name="_file">File to open</param>
            <param name="skipEmptyLines">if set to <c>true</c> [skip empty lines].</param>
            <param name="encoding">The encoding.</param>
            <returns>List of lines from loaded string</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.openFileToList(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Opens the file to string list
            </summary>
            <param name="_path">The path.</param>
            <param name="skipEmptyLines">if set to <c>true</c> [skip empty lines].</param>
            <param name="encoding">The encoding.</param>
            <returns>List of lines from loaded string</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.saveStringToFile(System.String,System.String,imbSCI.Data.enums.getWritableFileMode,System.Text.Encoding)">
            <summary>
            Saves complete string into path
            </summary>
            <param name="data"></param>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.extensions.io.filePathOperations.RETRY_DELAY">
            <summary>
            Miliseconds to wait before retry with failed operation
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.getWritableFile(System.String,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets writable file based on selected mode. By default it will do overwrite. Autorename calls <see cref="M:imbSCI.Core.extensions.io.filePathOperations.addUniqueSufix(System.String,System.String)" /> extension that counts existing files and sets proper number.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
            <exception cref="T:imbSCI.Core.files.imbFileException">getWritableFile [" + mode.ToString() + "] failed when directory should be created from [" + dir.toStringSafe() + "]. "
                                    + ex.Message - null - null</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.getAbsoluteDirectory(System.Enum,System.String)">
            <summary>
            2017: Returns DirectoryInfo - found or created for path made from> current directory, folderEnum and subfolderPath
            </summary>
            <param name="folderEnum"></param>
            <param name="subfolderPath"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.getAbsoluteFilePath(System.Enum,System.String)">
            <summary>
            2017: Returns the absolute path - starting with the current directory, adding folderEnum and subfolderPath - if any supplied.
            </summary>
            <param name="folderEnum"></param>
            <param name="subfolderPath"></param>
            <returns>Absolute path</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.getPathOrDefault(System.String)">
            <summary>
            Ako je path prazan onda vraca podrazumevani path
            </summary>
            <param name="path"></param>
            <param name="defPath"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filePathOperations.findFiles(System.String,System.String,System.Boolean)">
            <summary>
            Pronalazi fajlove koji odgovaraju pretrazi
            </summary>
            <param name="searchExtension">ekstenzija koju treba da pretra�i</param>
            <param name="pathToSearch"></param>
            <param name="includeSubDirectories"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filesAndDirectoryOperations.hasFiles(System.IO.DirectoryInfo)">
            <summary>
            Determines whether there is any file in the directory
            </summary>
            <param name="di">The di.</param>
            <returns>
              <c>true</c> if the specified di has files; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filesAndDirectoryOperations.getRelativePathToParent(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Gets the relative path from <c>start</c> to <c>parent</c>
            </summary>
            <param name="start">The start.</param>
            <param name="parent">The parent.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Iteration limit triggered c=[" + c.ToString() + "] for start [" + start.FullName + "] is not subdir of parent [" + parent.FullName + "]</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">parent - start [" + start.FullName + "] is not subdir of parent [" + parent.FullName + "]</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filesAndDirectoryOperations.doDirectoryOperation(imbSCI.Data.enums.directoryOperation,System.String,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Does the directory operation.
            </summary>
            <param name="operation">The operation.</param>
            <param name="targetPath">The target path - relative or not</param>
            <param name="from">From.</param>
            <param name="returnFrom">if set to <c>true</c> [return from].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filesAndDirectoryOperations.getDirectorySize(System.String,System.String)">
            <summary>
            Gets the size of all files within the <c>directory</c>, including subfolders. Optionally applies <c>searchFilter</c> for results
            </summary>
            <param name="directory">The directory.</param>
            <param name="searchFilter">The search filter.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filesAndDirectoryOperations.getDirectoryInfo(System.IO.DirectoryInfo,System.Data.PropertyCollection)">
            <summary>
            Feeds directory data info <see cref="T:System.Data.PropertyCollection"/>
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.filesAndDirectoryOperations.getDirectorySize(System.IO.DirectoryInfo)">
            <summary>
            Returns byte count of the directory, by enumerating all files within
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.io.openBase">
            <summary>
            Basic file open extensions
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.io.openBase.logger">
            <summary>
            The logger instance to report on warnings
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.io.openBase.openFileToString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Varijanta openFile metoda, samo vraca vec sklopljen string
            </summary>
            <param name="_path">Putanja na kojoj se nalazi fajl za ucitavanje</param>
            <param name="insertNlTags">Da li da na kraju svake linije doda NewLine tag</param>
            <returns>Sklopljen string</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.openBase.openBinary(System.String)">
            <summary>
            Učitava fajl i vraća niz binarnih vrednosti
            </summary>
            <param name="_path"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.openBase.openFile(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Opens the file -- without exception if file not found. Sets out params: fileFound if exists and fileEmpty if zero lines loaded
            </summary>
            <param name="_path">The path.</param>
            <param name="fileFound">if set to <c>true</c> [file found].</param>
            <param name="fileEmpty">if set to <c>true</c> [file empty].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.openBase.openFile(System.String)">
            <summary>
            Opens the file into List of lines
            </summary>
            <param name="_path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.openBase.openFileFilterLines(System.String)">
            <summary>
            Opens the file into List of lines, where empty lines are filtered out
            </summary>
            <param name="_path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.openBase.__openFile(System.String,System.Boolean)">
            <summary>
            Ucitava tekstualni fajl i vraca string u listi
            </summary>
            <param name="_path">Putanja na kojoj se fajl nalazi, nece otvoriti dijalog - ako je prazna putanja otvorice dijalog za TXT i * fajlove</param>
            <returns>Listu linija koda</returns>
        </member>
        <member name="T:imbSCI.Core.extensions.io.saveBase">
            <summary>
            Basic set of file save extensions and tools
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.io.saveBase.saveToEndOfFile(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Appends new content on the end of the file
            </summary>
            <param name="xmlLines">The XML lines or what ever String content part</param>
            <param name="_path">Filepath to save onto</param>
            <returns>TRUE on success</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.saveBase.saveContentOnFilePath(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Saves IEnumerable collection of strings onto <c>_path</c>
            </summary>
            <param name="xmlLines">XML or other kind of String content to be saved on the path.</param>
            <param name="_path">Filepath to save onto</param>
            <returns>TRUE on success</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.saveBase.saveToFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Snima tekstualni fajl na zadatoj putanji
            </summary>
            <param name="_path">gde da snimi fajl</param>
            <param name="xmlLines">Sadrzaj koji treba da snimi</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.saveBase.saveAtEndOfFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Snima na kraj Text fajla ---
            </summary>
            <param name="_path"></param>
            <param name="xmlLines"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.saveBase.saveToFile(System.String,System.String)">
            <summary>
            Jednostavna saveToFile funkcija -- TRUE ako je uspelo snimanje
            </summary>
            <param name="_path">Putanja</param>
            <param name="_data">Podatak u string formatu</param>
            <returns>da li je uspeo</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.io.saveBase.saveBinary(System.String,System.Byte[])">
            <summary>
            Učitava fajl i vraća niz binarnih vrednosti
            </summary>
            <param name="_path"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.math.imbValueChangers">
            <summary>
            Special value manipulators - math
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.math.imbValueChangers.checkRange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Checks the range - makes sure that input value is inside min and max (including exact min and max)
            </summary>
            <param name="input">The input.</param>
            <param name="max">The maximum.</param>
            <param name="min">The minimum.</param>
            <param name="doLoop">if set to <c>true</c> [do loop].</param>
            <returns>Corrected value of input accorting to setum</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.math.imbValueChangers.moveInRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the in range.
            </summary>
            <param name="input">The input.</param>
            <param name="step">The step.</param>
            <param name="max">The maximum.</param>
            <param name="min">The minimum.</param>
            <param name="doLoop">if set to <c>true</c> [do loop].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.math.imbValueChangers.changeValueAsInt32(System.Object,System.Int32)">
            <summary>
            Changes the value as int32.
            </summary>
            <param name="target">The target.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.math.imbValueChangers.changeValueDouble(System.Object,System.Int32,System.Double)">
            <summary>
            Step je 0.01
            </summary>
            <param name="target">The target.</param>
            <param name="step">The step.</param>
            <param name="stepResolution">The step resolution.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.NamespaceDoc">
            <summary>
            Main root namespace for imbSCI extension methods: data manipulation, advanced reflections, input/output, table styling, reporting, Excel-CSV serialization and deserialization, text operations
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.extensions.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.extensions.table.core.rowMetaEvaluation">
            <summary>
            Delegate used by <see cref="T:imbSCI.Core.extensions.table.core.tableStyleDynamicRule"/> to evaluate and set style
            </summary>
            <param name="row">The row.</param>
            <param name="table">The table.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.table.core.tableStyleColumnSetter">
            <summary>
            Base class for dynamic column style setter
            </summary>
            <seealso cref="T:imbSCI.Core.extensions.table.core.tableStyleSetterBase" />
        </member>
        <member name="P:imbSCI.Core.extensions.table.core.tableStyleColumnSetter.items">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.extensions.table.core.tableStyleRowSetter">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Core.extensions.table.core.tableStyleSetterBase" />
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleRowSetter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.table.core.tableStyleRowSetter"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleRowSetter.AddToIgnoreList(System.Data.DataRow)">
            <summary>
            Adds to ignore list.
            </summary>
            <param name="dr">The dr.</param>
        </member>
        <member name="P:imbSCI.Core.extensions.table.core.tableStyleRowSetter.ignoreList">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleRowSetter.SetStyleForRows(imbSCI.Core.extensions.table.DataRowInReportTypeEnum,System.Int32)">
            <summary>
            Sets the specified style by rows indexes. The row index is interpreted by index in source table (not reporting version of the table -- i.e. heading rows are not counted, only data)
            </summary>
            <param name="style">The style.</param>
            <param name="rowIndex">Index of the row.</param>
            <returns>
            Rule that was created
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleRowSetter.SetStyleForRows(imbSCI.Core.extensions.table.DataRowInReportTypeEnum,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets the specified style by rows indexes. The row index is interpreted by index in source table (not reporting version of the table -- i.e. heading rows are not counted, only data)
            </summary>
            <param name="style">The style.</param>
            <param name="rowIndexes">The row indexes.</param>
            <returns>Rule that was created</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleRowSetter.SetStyleForRowsWithValue``1(imbSCI.Core.extensions.table.DataRowInReportTypeEnum,System.String,``0)">
            <summary>
            Sets the style for rows with value.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="style">The style.</param>
            <param name="columnName">Name of the column.</param>
            <param name="valueToMatch">Index of the row.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleRowSetter.SetStyleForRowsWithValue``1(imbSCI.Core.extensions.table.DataRowInReportTypeEnum,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets the style for rows with value.
            </summary>
            <typeparam name="TValueType">The type of the value type.</typeparam>
            <param name="style">The style.</param>
            <param name="columnName">Name of the column.</param>
            <param name="valuesToMatch">The row indexes.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleRowSetter.evaluate(System.Data.DataRow,System.Data.DataTable,imbSCI.Core.extensions.table.style.dataTableStyleEntry)">
            <summary>
            Evaluates the specified row.
            </summary>
            <param name="row">The row.</param>
            <param name="table">The table.</param>
            <param name="defaultStyle">The default style.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.extensions.table.core.tableStyleRowSetter.items">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.table.core.tableStyleSetterBase.units">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.extensions.table.core.tableStyleDynamicRule">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.table.core.tableStyleDynamicRule"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.makeDefaultResponse(System.Boolean,imbSCI.Core.extensions.table.style.dataTableStyleEntry,imbSCI.Core.extensions.table.style.dataTableStyleEntry)">
            <summary>
            Makes the default response.
            </summary>
            <param name="evaluationValue">if set to <c>true</c> [evaluation value].</param>
            <param name="okStype">The default style.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.allowedZone">
            <summary>
            Gets or sets the allowed zone.
            </summary>
            <value>
            The allowed zone.
            </value>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.SetZone(System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
            <summary>
            Sets the zone.
            </summary>
            <param name="dcLeft">The dc left.</param>
            <param name="dcRight">The dc right.</param>
            <param name="isActiveY">if set to <c>true</c> [is active y].</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.confirmZoneAndCriterion(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Confirms the zone and criterion.
            </summary>
            <param name="dr">The dr.</param>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.confirmZone(System.Data.DataRow,System.Data.DataColumn)">
            <summary>
            Confirms the zone.
            </summary>
            <param name="dr">The dr.</param>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.confirmCritarion(System.Object)">
            <summary>
            Confirms the critarion.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.makeDefaultResponse(System.Double,imbSCI.Core.extensions.table.style.dataTableStyleEntry,imbSCI.Core.extensions.table.style.dataTableStyleEntry)">
            <summary>
            Makes the default response.
            </summary>
            <param name="evaluationValue">The evaluation value.</param>
            <param name="okStyle">The default style.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.evaluate(System.Data.DataRow,System.Data.DataTable,imbSCI.Core.extensions.table.style.dataTableStyleEntry)">
            <summary>
            Evaluates the specified row.
            </summary>
            <param name="row">The row.</param>
            <param name="table">The table.</param>
            <param name="defaultStyle">The default style.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.customStyleEntry">
            <summary>
            If not null - it will be returned if evaluation is positive
            </summary>
            <value>
            The custom style entry.
            </value>
        </member>
        <member name="P:imbSCI.Core.extensions.table.core.tableStyleDynamicRule.colorGradientDictionary">
            <summary>
            Gets or sets the color gradient dictionary.
            </summary>
            <value>
            The color gradient dictionary.
            </value>
        </member>
        <member name="T:imbSCI.Core.extensions.table.dataColumnRenderingSetup">
            <summary>
            Extension controling properties of data column reporting
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.getGroupsOfColumns(System.Data.DataTable)">
            <summary>
            Gets the groups of columns - grouped by <see cref="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetGroup(System.Data.DataColumn,System.String)"/>
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.Format(System.Data.DataColumn,System.String)">
            <summary>
            Formats the specified default col format.
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_col_format">The default col format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.GetFormat(System.Data.DataColumn)">
            <summary>
            Gets the format.
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.GetFormatForExcel(System.Data.DataColumn)">
            <summary>
            Gets the format for excel cell
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetFormat(System.Data.DataColumn,System.String)">
            <summary>
            Sets the format.
            </summary>
            <param name="dc">The dc.</param>
            <param name="col_format">The col format.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.extensions.table.dataColumnRenderingSetup.DEFAULT_WIDTH">
            <summary>
            The default column width
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.Direct(System.Data.DataColumn,System.Boolean)">
            <summary>
            Instructs the rendering engine that the content should be directly appended
            </summary>
            <param name="dc">The dc.</param>
            <param name="setValue">if set to <c>true</c> [set value].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.ClassName(System.Data.DataColumn,System.String)">
            <summary>
            Classes the name.
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_shema_classname">The default shema classname.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.GetClassName(System.Data.DataColumn)">
            <summary>
            Gets the name of the class.
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetClassName(System.Data.DataColumn,System.String)">
            <summary>
            Sets the name of the class.
            </summary>
            <param name="dc">The dc.</param>
            <param name="shema_classname">The shema classname.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SPE(System.Data.DataColumn,imbSCI.Core.data.settingsPropertyEntry)">
            <summary>
            Spes the specified default col spe.
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_col_spe">The default col spe.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.GetSPE(System.Data.DataColumn)">
            <summary>
            Gets <see cref="T:imbSCI.Core.data.settingsMemberInfoEntry"/>
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetSPE(System.Data.DataColumn,imbSCI.Core.data.settingsPropertyEntry)">
            <summary>
            Sets and deploys SPE
            </summary>
            <param name="dc">The dc.</param>
            <param name="col_spe">The col spe.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.Importance(System.Data.DataColumn,imbSCI.Core.enums.dataPointImportance)">
            <summary>
            Sets the column importance.
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_col_importance">The default col importance.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.GetImportance(System.Data.DataColumn)">
            <summary>
            Gets the importance.
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetImportance(System.Data.DataColumn,imbSCI.Core.enums.dataPointImportance)">
            <summary>
            Sets the importance.
            </summary>
            <param name="dc">The dc.</param>
            <param name="col_importance">The col importance.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.Unit(System.Data.DataColumn,System.String)">
            <summary>
            Units the specified default col unit.
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_col_unit">The default col unit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.ValueType(System.Data.DataColumn,System.Type)">
            <summary>
            Gets the real Value Type of source DataColumn -- this is NOT same as <see cref="P:System.Data.DataColumn.DataType"/>
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_col_type">Default type of the col.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.GetValueType(System.Data.DataColumn)">
            <summary>
            Gets the real Value Type of source DataColumn -- this is NOT same as <see cref="P:System.Data.DataColumn.DataType"/>
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetValueType(System.Data.DataColumn,System.Type)">
            <summary>
            Sets the real Value Type of source DataColumn -- this is NOT same as <see cref="P:System.Data.DataColumn.DataType" />
            </summary>
            <param name="dc">The dc.</param>
            <param name="col_type">Type of the col.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetValueType``1(System.Data.DataColumn)">
            <summary>
            Sets the real Value Type of source DataColumn -- this is NOT same as <see cref="P:System.Data.DataColumn.DataType" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.Letter(System.Data.DataColumn,System.String)">
            <summary>
            Defines the letter/code associated with the table column
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_col_letter">The default col letter.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataColumnRenderingSetup.SetHeading(System.Data.DataColumn,System.String)">
            <summary>
            Sets the heading content of the column
            </summary>
            <param name="dc">The dc.</param>
            <param name="caption">The caption.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.mergedHorizontally">
            <summary>
            The merged horizontally: cells with the same value are merged horizontally
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.dataHighlightA">
            <summary>
            The data highlight a: OrangeRed by default style
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.dataHighlightB">
            <summary>
            The data highlight b: CadetBlue by default style
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.dataHighlightC">
            <summary>
            The data highlight c: SteelBlue by default style
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.group01">
            <summary>
            The group01: lightblue
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.group02">
            <summary>
            The group02: bisque
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.group03">
            <summary>
            The group03: lightcyan
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.group04">
            <summary>
            The group04: light golded rod
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.table.DataRowInReportTypeEnum.group05">
            <summary>
            The group05: light pink
            </summary>
        </member>
        <member name="T:imbSCI.Core.extensions.table.dataTableRenderingSetup">
            <summary>
            Extension methods for easy, typed and safe access to <see cref="P:System.Data.DataTable.ExtendedProperties"/> collection
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.setColumnWidths(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Sets the column width according to markdown rendering
            </summary>
            <param name="dt">The dt.</param>
            <param name="rowCheckLimit">The row check limit.</param>
            <param name="cellMargin">Extra characters to add on content right</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.OrderByCategoryPriority(System.Data.DataColumnCollection,System.Collections.Generic.List{System.String})">
            <summary>
            Orders the by category priority.
            </summary>
            <param name="columns">The columns.</param>
            <param name="categoryByPriority">The category by priority.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.OrderByCategoryPriority(System.Collections.Generic.IEnumerable{System.Data.DataColumn},System.Collections.Generic.List{System.String})">
            <summary>
            Orders the by category priority.
            </summary>
            <param name="columns">The columns.</param>
            <param name="categoryByPriority">The category by priority.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.OrderByPriority(System.Collections.Generic.IEnumerable{System.Data.DataColumn})">
            <summary>
            Orders the <see cref="T:System.Data.DataColumn"/>by priority flag
            </summary>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.CategoryPriority(System.Data.DataTable,System.Collections.Generic.List{System.String})">
            <summary>
            Categories the priority.
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_categoryPriority">The default category priority.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.GetCategoryPriority(System.Data.DataTable)">
            <summary>
            Gets the category priority.
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.SetCategoryPriority(System.Data.DataTable,System.Collections.Generic.List{System.String})">
            <summary>
            Sets the category priority.
            </summary>
            <param name="dc">The dc.</param>
            <param name="categoryPriority">The category priority.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.ClassType(System.Data.DataTable,System.Type)">
            <summary>
            Defines type that is source of the table shema
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_shema_sourceinstance">The default shema sourceinstance.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.AggregationAspect(System.Data.DataTable,imbSCI.Core.math.aggregation.dataPointAggregationAspect)">
            <summary>
            Aggregation Aspect that used to create this table. If its <see cref="F:imbSCI.Core.math.aggregation.dataPointAggregationAspect.none" /> then this is a source table not derived one
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_data_aggregation_type">Default type of the data aggregation.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.AggregationOriginCount(System.Data.DataTable,System.Int32)">
            <summary>
            Aggregations the origin count: if 0 there were no aggregations as source
            </summary>
            <param name="dc">The dc.</param>
            <param name="default_data_origin_count">The default data origin count.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.DefineShemaForStatistics(System.Data.DataTable,imbSCI.Core.collection.PropertyEntryColumn)">
            <summary>
            Defines the shema for statistics -- horisontal
            </summary>
            <param name="dc">The dc.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.AddExtraMath(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Adds the new line in extra description set that will be directly appended below the table
            </summary>
            <param name="dc">The dc.</param>
            <param name="formulae">The formulae.</param>
            <param name="format">The format.</param>
            <param name="insertDefinition">It will check measure data defined in the last added row</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.AddExtra(System.Data.DataTable,System.String)">
            <summary>
            Adds the new line in extra description set that will be directly appended below the table
            </summary>
            <param name="dc">The dc.</param>
            <param name="newExtraLine">The new extra line.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.ExtraLinesCount(System.Data.DataTable)">
            <summary>
            Extras the lines count.
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.GetExtraDesc(System.Data.DataTable)">
            <summary>
            Gets the extra desc.
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.SetExtraDesc(System.Data.DataTable,System.Collections.Generic.List{System.String})">
            <summary>
            Sets the extra desc.
            </summary>
            <param name="dc">The dc.</param>
            <param name="table_extraDesc">The table extra desc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.SetAdditionalInfoEntries(System.Data.DataTable,System.String,System.Object,System.Type[])">
            <summary>
            Sets the additional information entries by data object properties, being of <c>propertyTypes</c> type
            </summary>
            <param name="dc">The dc.</param>
            <param name="data_name_refix">The data name refix.</param>
            <param name="data_value">The data value.</param>
            <param name="propertyTypes">The property types.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.FilenameForDataset(System.Data.DataSet,System.String)">
            <summary>
            Filenames for table.
            </summary>
            <param name="table">The table.</param>
            <param name="proposal">The proposal.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.Title(System.Data.DataTable,System.String,imbSCI.Core.enums.existingDataMode)">
            <summary>
            Titles the specified content.
            </summary>
            <param name="table">The table.</param>
            <param name="content">The content.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.Description(System.Data.DataTable,System.String,imbSCI.Core.enums.existingDataMode)">
            <summary>
            Descriptions the specified content.
            </summary>
            <param name="table">The table.</param>
            <param name="content">The content.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.SetClassName(System.Data.DataTable,System.String)">
            <summary>
            Sets the name of the object type class associated with the shema
            </summary>
            <param name="dc">The dc.</param>
            <param name="shema_classname">The shema classname.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.GetStyleSet(System.Data.DataTable)">
            <summary>
            Gets table style set
            </summary>
            <param name="dc">The dc.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.SetDescription(System.Data.DataTable,System.String,imbSCI.Core.enums.existingDataMode)">
            <summary>
            Sets the description into <see cref="P:System.Data.DataTable.ExtendedProperties"/> under <see cref="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_tabledesc"/>
            </summary>
            <param name="table">The table.</param>
            <param name="content">Description for the <c>table</c>.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.GetDescription(System.Data.DataTable,System.String)">
            <summary>
            Gets the description from <see cref="P:System.Data.DataTable.ExtendedProperties"/> specified under <see cref="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_tabledesc"/>
            </summary>
            <param name="table">The table.</param>
            <returns>Empty string if no entry found</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.SetTitle(System.Data.DataTable,System.String,imbSCI.Core.enums.existingDataMode)">
            <summary>
            Sets the rendering purpose title for the <c>table</c> via <see cref="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_tablename"/> entry in the <see cref="P:System.Data.DataTable.ExtendedProperties"/>, without changing the <see cref="P:System.Data.DataTable.TableName"/>
            </summary>
            <param name="table">The table.</param>
            <param name="content">The content.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.GetTitle(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Gets the title defined under <see cref="T:imbSCI.Data.enums.fields.templateFieldDataTable"/> or <see cref="P:System.Data.DataTable.TableName"/> if no title entry was found inside the <see cref="P:System.Data.DataTable.ExtendedProperties"/>
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.SetColor(System.Data.DataTable,imbSCI.Core.reporting.colors.acePaletteRole,imbSCI.Core.enums.existingDataMode)">
            <summary>
            Sets the color role
            </summary>
            <param name="table">The table.</param>
            <param name="color">The color.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableRenderingSetup.GetColor(System.Data.DataTable)">
            <summary>
            Gets the color role associated to <c>table</c> via <see cref="F:imbSCI.Data.enums.fields.templateFieldStyling.color_paletteRole" />
            </summary>
            <param name="table">The table.</param>
            <returns>
            Color role
            </returns>
        </member>
        <member name="T:imbSCI.Core.extensions.table.dataTableTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableTools.GetTextTable(System.Data.DataTable)">
            <summary>
            Renders the table into text
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dataTableTools.validateTable(System.Data.DataTable)">
            <summary>
            Validates the table.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataNumericCriterionDynamicStyle`2.#ctor(imbSCI.Core.math.range.rangeCriteria{`0},`1,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.table.dynamics.dataNumericCriterionDynamicStyle`2"/> class.
            </summary>
            <param name="_criteria">The criteria.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataNumericCriterionDynamicStyle`2.evaluate(System.Data.DataRow,System.Data.DataTable,imbSCI.Core.extensions.table.style.dataTableStyleEntry)">
            <summary>
            Evaluates the <see cref="P:imbSCI.Core.extensions.table.dynamics.dataNumericCriterionDynamicStyle`2.columnName"/> column of the <c>row</c> against <see cref="P:imbSCI.Core.extensions.table.dynamics.dataNumericCriterionDynamicStyle`2.criteria"/>, if test is positive returns the style associated with <see cref="P:imbSCI.Core.extensions.table.dynamics.dataNumericCriterionDynamicStyle`2.styleKey"/>
            </summary>
            <param name="row">The row.</param>
            <param name="table">The table.</param>
            <param name="defaultStyle">The default style.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.table.dynamics.dataRowIndexDynamicStyle`1">
            <summary>
            Affects rows on specified index positions
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <seealso cref="!:imbSCI.Core.extensions.table.dataTableDynamicStyleEntry" />
        </member>
        <member name="P:imbSCI.Core.extensions.table.dynamics.dataRowIndexDynamicStyle`1.indexFromSourceTable">
            <summary>
            If true - it counts rows from the source table (without column labels)
            </summary>
            <value>
              <c>true</c> if [index from source table]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataRowIndexDynamicStyle`1.#ctor(imbSCI.Core.extensions.table.style.dataTableStyleEntry,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.table.dynamics.dataRowIndexDynamicStyle`1"/> class.
            </summary>
            <param name="_key">The key.</param>
            <param name="indexList">The index list.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataRowIndexDynamicStyle`1.#ctor(`0,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.table.dynamics.dataRowIndexDynamicStyle`1"/> class.
            </summary>
            <param name="_key">The key.</param>
            <param name="indexList">The index list.</param>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataRowIndexDynamicStyle`1.evaluate(System.Data.DataRow,System.Data.DataTable,imbSCI.Core.extensions.table.style.dataTableStyleEntry)">
            <summary>
            Evaluates the specified row.
            </summary>
            <param name="row">The row.</param>
            <param name="table">The table.</param>
            <param name="defaultStyle">The default style.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.table.dynamics.dataValueMatchCriterionDynamicStyle`2">
            <summary>
            Evaluates rows for exact value match
            </summary>
            <typeparam name="TValueType">Type of column value</typeparam>
            <typeparam name="TEnum">The type of enum to use when calling the style</typeparam>
            <seealso cref="!:imbSCI.Core.extensions.table.dataTableDynamicStyleEntry" />
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataValueMatchCriterionDynamicStyle`2.#ctor(System.Collections.Generic.IEnumerable{`0},`1,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.table.dynamics.dataNumericCriterionDynamicStyle`2"/> class.
            </summary>
            <param name="_criteria">The criteria.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:imbSCI.Core.extensions.table.dynamics.dataValueMatchCriterionDynamicStyle`2.DoInverseLogic">
            <summary>
            Gets or sets a value indicating whether [do inverse logic].
            </summary>
            <value>
              <c>true</c> if [do inverse logic]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataValueMatchCriterionDynamicStyle`2.evaluate(System.Data.DataRow,System.Data.DataTable,imbSCI.Core.extensions.table.style.dataTableStyleEntry)">
            <summary>
            Evaluates the <see cref="P:imbSCI.Core.extensions.table.dynamics.dataValueMatchCriterionDynamicStyle`2.columnName"/> column of the <c>row</c> against <see cref="!:criteria"/>, if test is positive returns the style associated with <see cref="P:imbSCI.Core.extensions.table.dynamics.dataValueMatchCriterionDynamicStyle`2.styleKey"/>
            </summary>
            <param name="row">The row.</param>
            <param name="table">The table.</param>
            <param name="defaultStyle">The default style.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.dynamics.dataValueMatchCriterionDynamicStyle`2.confirmCritarion(System.Object)">
            <summary>
            Confirms the critarion.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.table.style.dataTableStyleDictionary`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="!:imbSCI.Data.collection.nested.aceEnumDictionary&lt;T, imbSCI.Core.extensions.table.style.dataTableStyleEntry&gt;" />
        </member>
        <member name="M:imbSCI.Core.extensions.table.style.dataTableStyleEntry.CloneBackground">
            <summary>
            Clones only the backgrounds: <see cref="P:imbSCI.Core.extensions.table.style.dataTableStyleEntry.Background"/> and <see cref="P:imbSCI.Core.extensions.table.style.dataTableStyleEntry.BackgroundAlt"/> while the rest of data is just referenced
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.table.style.dataTableStyleEntry.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.table.style.dataTableStyleSet">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.extensions.table.style.tableStyleSetterResponse">
            <summary>
            Response created by a setter
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.table.style.tableStyleSetterResponse.zone">
            <summary>
            Zone - if set - limit application of this style to the zonal borders
            </summary>
            <value>
            The zone.
            </value>
        </member>
        <member name="P:imbSCI.Core.extensions.text.imbRegex.escapePairs">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbRegex.unescapeForRegex(System.String)">
            <summary>
            Prosiren REGEX unescape
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbRegex.escapeForRegex(System.String)">
            <summary>
            Prosiren REGEX escape
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbRegexQuery">
            <summary>
            Regex data model
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.text.imbRegexQuery.options">
            <summary>
            Regex dodatne opcije
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.text.imbRegexQuery.expression">
            <summary>
            Regex expression u String formatu
            </summary>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringBuilderExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringBuilderExtensions.Backspace(System.Text.StringBuilder,System.String)">
            <summary>
            Backspaces the specified word.
            </summary>
            <param name="sb">The sb.</param>
            <param name="word">The word.</param>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringCommonTools">
            <summary>
            Zajednički alati za obradu strigova na različite načine
            </summary>
            <remarks>
            Napredniji set alata i funkcija od imbStringOperations klase
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.getDataTypeSafe(System.Object,System.Type,imbSCI.Core.process.dataLogic)">
            <summary>
            V3.5&gt; Experimentalna funkcija - na osnovu tipa vrsi konverziju
            </summary>
            <param name="input">Ulazni string</param>
            <param name="targetType">Tip</param>
            <param name="logic">The logic.</param>
            <returns></returns>
            <remarks>
            Koristi se i 2013a
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.rangeStringToIndexList(System.String,System.Int32)">
            <summary>
            Compiles range expression into list of integers. Range expression format e.g.: 3-5,8 , 2-8, 9, *
            </summary>
            <param name="rangeLine">Range expression like: &gt; 1=5, 8, 12-20, 3</param>
            <param name="indMax">The end of range</param>
            <returns>
            List with index numbers  / positional integers
            </returns>
            <exception cref="T:System.ArgumentException">rangeLine - Expression range processing error</exception>
            <remarks>
            For unlimited range on one side higher/lower symbols, e.g.: 3 &gt;  means: from 3 to the end
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.deploySpecialMarks(System.String)">
            <summary>
            Primenjuje registar specijalnih znakova na zadati unos
            </summary>
            <param name="input">Parametar na koji se primenjuje</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.trimEditorTags(System.String)">
            <summary>
            Sklanja sve specijalne editor tagove: ali i sve druge specijalne oznake&gt; {}, $$$
            </summary>
            <param name="list">Listu&gt; Key:cleanList, Value:editType, nulti clan je cist string a ostali su editor tagovi</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringCommonTools._multiOpRe">
            <summary>
            Regex za multi ops - selektuje vrednosti između tagova
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringCommonTools._numOnly">
            <summary>
            Regex za selektovanje brojeva
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringCommonTools._indexBlok">
            <summary>
            Selektuje xPath index blok - npr> [1]
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringCommonTools._multuTag">
            <summary>
            Regex selektuje karaktere koji se koriste za MultiOps tagove
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringCommonTools._editorTag">
            <summary>
            Regez selektuje karaktere koji se koriste za označavanje editora
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.text.imbStringCommonTools.specialMarks">
            <summary>
            Registar specijalnih znakova - koji se koriste u imbXmlFilter inputu
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.cleanSpecialCharForXPathTitle(System.String)">
            <summary>
            2013a> sklanja sve {} [] i vrednosti u njima, sklanja i namespace znak ako postoji
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.cleanMultiOpMarks(System.String)">
            <summary>
            Briše sve MultiOps oznake
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.multiOpsInputAdd(System.String,System.String)">
            <summary>
            V3: Dodaje nov parametar u multi input parametar.
            </summary>
            <param name="newValue">nova vrednost koja se dodaje na spisak</param>
            <param name="oldValue">vrednost parametra koja je možda multi ops a možda i nije</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.getStringLineList(System.String,System.StringSplitOptions,System.String,System.Boolean)">
            <summary>
            V3: Od multiLine Stringa pravi listu - ako string nema vise linija onda lista sadrzi Input kao prvi element
            </summary>
            <param name="input">Ulazni string</param>
            <param name="opts">Na koji način deli string</param>
            <param name="inverseNeedleTest">Da li da invertuje rezultat contain testa</param>
            <param name="onlyWithNeedle">Needle kojim se testira svaka linija. Ako je prazan onda se ne filtrira izlaz</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.multiOpsInputProcessing(System.String)">
            <summary>
            Alatka koju koristi: imbFilterLine i imbXmlFilterLine - za polja koja podržavaju više elemenata
            Razbija input string u multiOps elemente. Ako je sve jedan element onda ga broji kao jedan multiOp
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringCommonTools.deploySpecialMarks(System.Collections.Generic.List{System.String})">
            <summary>
            Primenjuje registar specijalnih znakova na zadati unos
            </summary>
            <param name="input">Lista parametara koji su proslednjeni filter komandi</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringExtensions">
            <summary>
            Proširenja operacija nad stringovima
            </summary>
            \ingroup_disabled ace_ext_string
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.SplitOnce(System.String,System.String)">
            <summary>
            Splits the String by specified needle just ONCE. Needle is not included
            </summary>
            <param name="target">The target.</param>
            <param name="needle">The needle.</param>
            <returns>List with one (if no <c>needle</c> found, original string) or two strings (if <c>needle</c> found, left and right substrings</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringExtensions._samoglasnici">
            <summary>
            AEIOU both cases - regex to capture these letters
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringExtensions._htmlTagContent">
            <summary>
            Regex to capture content inside tag square brackets
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.StripHTML(System.String)">
            <summary>
            Uses square bracket regex to extract all content outside HTML tags
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.getProperString(System.String,System.String[])">
            <summary>
            Choose first non null and not empty String from <c>primaryCandidate</c> and other <c>candidates</c>
            </summary>
            <param name="primaryCandiate">The primary candiate.</param>
            <param name="candidates">The candidates.</param>
            <returns>The first string found to be not null and not empty</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.or(System.String,System.String[])">
            <summary>
            Returns the <c>first</c> value if its not null or empty, otherwise iterates other parameters and pick the first valid
            </summary>
            <param name="first">The first.</param>
            <param name="orThese">The or these.</param>
            <returns></returns>
            <exception cref="!:aceGeneralException">None of these argument is value - null - or(first, ... orThese others)</exception>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.a(System.String,imbSCI.Data.enums.fields.templateFieldBasic)">
            <summary>
            Short string concating
            </summary>
            <param name="output"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.o(System.String,System.Object)">
            <summary>
            synonim of a() - uses .ToString() on input object
            </summary>
            <param name="output"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.a(System.String,System.String)">
            <summary>
            short string contacting - a from Add
            </summary>
            <param name="output"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbRemoveDouble(System.String,System.String[])">
            <summary>
            2014 Maj: uklanja duple substringove - dupli razmak, newline, ..
            </summary>
            <param name="source">Ulazni string</param>
            <param name="toRemove">substringovi u jednostrukoj formi - ako treba da se uklone svi .. onda navesti . - ako je null onda primenjuje default skup: space, newline, .</param>
            <returns>Ociscen string</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.substring(System.String,System.Int32)">
            <summary>
            2017: smarter substring. Negative length will go substring from right end
            </summary>
            <param name="input"></param>
            <param name="length"></param>
            <returns>Substring</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.removeFromString(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all strings from input, using dict
            </summary>
            <param name="input"></param>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.toMemoryStream(System.String)">
            <summary>
            Konvertovanje Stringa u Stream
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.ToStringEnumSmart(System.Enum)">
            <summary>
            String, comma separated, representation of flags in the <paramref name="en"/> Enum (<see cref="T:System.FlagsAttribute"/>).
            </summary>
            <param name="en">Flags to render</param>
            <returns>Comma separater representation of all flags in the <paramref name="en"/></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.JoinInFormat(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Joins the in format: applies the specified format on each instance, separator is added between
            </summary>
            <param name="input">The input.</param>
            <param name="format">The format.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.overwrite(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Od definisanog startIndex-a pa narednih length karaktera upisuje overwriteChar - koji ponavlja
            </summary>
            <param name="source"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="overwriteChar"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbCodeNameOperation(System.String)">
            <summary>
            Transforms Display Title into small_letter_codename
            </summary>
            <param name="source">Display Title</param>
            <returns>display_title</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbTitleCamelOperation(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts camel name (e.g. "imbTitleCamelOperation") into proper, space separated, caption (Imb Title Camel Operation)
            u normalan title. Ubacuje razmake i sredjuje prva slova.
            </summary>
            <param name="source"></param>
            <param name="inverse">Ako je TRUE onda ima kontra efekat> <b>Display Title</b> pretvara u <b>DisplayTitle</b> ili <b>displayTitle</b> u zavisnosti od <b>setFirstCapital</b></param>
            <param name="setFirstCapital">Da li prvo slovo treba da bude veliko</param>
            <returns>Preformatiran string</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbGetAbbrevationVariants(System.String)">
            <summary>
            2017: Pravi varijacije od skracenice
            </summary>
            <remarks>
            <para>Predstavlja primenu <b>enum wordVariationsMethodType.Abrevations</b> </para>
            <para>Primer: ako je uneto DOO pravi varijacije:</para>
            <list type="bullet" >
            <item>doo</item>
            <item>d.o.o.</item>
            <item>d. o. o.</item>
            <item>Doo</item>
            <item>DOO</item>
            </list>
            </remarks>
            <param name="source">Skracenicu koju treba da varira - npr> doo</param>
            <returns>Lista varijacija</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbGetWordAbbrevation(System.String,System.Int32,System.Boolean)">
            <summary>
            Vraca skracenicu reci
            </summary>
            <param name="source"></param>
            <param name="targetLength"></param>
            <param name="toCapital"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbGetAbbrevation(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates abbreviation from multi word phrase - it also supports single word source
            </summary>
            <param name="source"></param>
            <param name="targetLength"></param>
            <param name="toCapital"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imgFirstLetter(System.String,System.Boolean)">
            <summary>
            V3.1: Prvo slovo pretvara u malo
            </summary>
            <param name="source"></param>
            <param name="isUpper"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbGetTimeString(System.Int64,System.String,System.Int32)">
            <summary>
            V3.2: Vraca formatiran string sa vremenom u sekundama
            </summary>
            <param name="source"></param>
            <param name="sufix"></param>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbGetTimeSecond(System.Int64,System.Int32)">
            <summary>
            Vraća formatiran string sa vremenom u sekundama. bez sufiksa
            </summary>
            <param name="source"></param>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringExtensions.imbGetVariableList(System.Collections.IDictionary)">
            <summary>
            Vraca string predstavu imbCollectiona
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringFormats">
            <summary>
            Formatting strings
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getToStringDFormat(System.Int32,System.Int32)">
            <summary>
            Gets the proper to string number dn.
            </summary>
            <param name="input">Highest number of items to show row number for</param>
            <param name="minCharacters">The minimum characters - leading 0's.</param>
            <returns>Format string ready for <c>ToString(format)</c> call</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.CountDecimalDigits(System.Double)">
            <summary>
            Counts the digits.
            </summary>
            <param name="num">The number.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.toNumberedListPrefix(System.Int32,System.Int32,System.Int32)">
            <summary>
            To the numbered list prefix.
            </summary>
            <param name="ordinalPosition">The ordinal position.</param>
            <param name="level">The level.</param>
            <param name="levelLimit">The level limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.DecimalToArbitrarySystem(System.Int64,System.Int32)">
            <summary>
            Converts the given decimal number to the numeral system with the
            specified radix (in the range [2, 36]).
            </summary>
            <param name="decimalNumber">The number to convert.</param>
            <param name="radix">The radix of the destination numeral system (in the range [2, 36]).</param>
            <remarks>http://www.pvladov.com/2012/07/arbitrary-to-decimal-numeral-system.html</remarks>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.ArbitraryToDecimalSystem(System.String,System.Int32)">
            <summary>
            Converts the given number from the numeral system with the specified
            radix (in the range [2, 36]) to decimal numeral system.
            </summary>
            <param name="number">The arbitrary numeral system number to convert.</param>
            <param name="radix">The radix of the numeral system the given number
            is in (in the range [2, 36]).</param>
            <remarks>http://www.pvladov.com/2012/07/arbitrary-to-decimal-numeral-system.html</remarks>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.DecimalToOrdinalLetterSystem(System.Int64)">
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.OrdinalLetterToDecimalSystem(System.String)">
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.toPrefixedMultiline(System.String,System.String,System.Boolean)">
            <summary>
            Reformats multiline string by adding specified prefix.
            </summary>
            <param name="source">The source string with or without </param>
            <param name="prefix">The prefix.</param>
            <param name="prefixOnceOnly">if set to <c>true</c> [prefix once only].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.toExpressionString(System.Object,System.String,System.String)">
            <summary>
            Returns expression-ready string, wrapped in proper quotes if required
            </summary>
            <param name="source">The source.</param>
            <param name="valueForNull">The value for null.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.toStringSafe(System.Object,System.String,System.String)">
            <summary>
            Bezbedna konverzija u String -- ako je null onda valueForNull
            </summary>
            <param name="source"></param>
            <param name="valueForNull"></param>
            <returns>ako je null onda valueForNull</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringFormats._numOnly">
            <summary>
            Regex za selektovanje brojeva
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getFileSizeScaled(System.Int64,imbSCI.Core.extensions.text.imbStringFormats.fileSizeUnit)">
            <returns>Formated string of memory alocated: i.e.: 12.07kB, 5.62Mb</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringFormats.byteSizes">
            <summary>
            The byte sizes
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.writeFileSize(System.Int64,System.Int32)">
            <returns>Formated string of memory alocated: i.e.: 12.07kB, 5.62Mb</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getStringMemByteSize(System.String,System.Int32)">
            <summary>
            Gets the size of the string in bytes (encoded to: UTF8) in well formated string. For order <see cref="F:imbSCI.Core.extensions.text.imbStringFormats.byteSizes"/>
            </summary>
            <param name="input">The input.</param>
            <param name="order">The order: 0 (B), 1 (Kb), 2 (Mb), 3 (Gb). If -1 it will pick order automatically</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getInt32Safe(System.String,System.Int32)">
            <summary>
            Vraca Int32 na bezbedan nacin
            </summary>
            <param name="input"></param>
            <param name="ifFail"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getMByteCountFormated(System.Int64,System.Int64,System.String)">
            <summary>
            Gets the m byte count formated.
            </summary>
            <param name="input">The input - number of bytes.</param>
            <param name="factor">The factor to divide</param>
            <param name="sufix">The sufix for unit</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getSeconds(System.Double,System.Int32)">
            <summary>
            Miliseconds into seconds decimal - V3.2: Pretvara milisekunde u sekunde
            </summary>
            <param name="msec">Milisekunde</param>
            <param name="decimals">Na koliko decimala</param>
            <returns>Broj sekundi, zaogruzen prema podesavanjima</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getTimeSecString(System.Double,System.String,System.Int32)">
            <summary>
            V3.2: Pretvara milisekunde u sekundni string
            </summary>
            <param name="msec">Milisekunde</param>
            <param name="sufix">Sufix za mernu jedinicu</param>
            <returns>String formatiran na dve decimale</returns>
            <param name="decimals">Na koliko decimala</param>
            \ingroup_disabled ace_ext_strings_generators
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.getTimeSecString(System.Int64,System.String,System.Int32)">
            <summary>
            Gets the time seconds string.
            </summary>
            <param name="msec">The msec.</param>
            <param name="sufix">The sufix.</param>
            <param name="decimals">The decimals.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.imbGetPercentage(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Vraca formatiran procenat od zadatih brojeva
            </summary>
            <param name="part">Velicina dela, npr. 10  - (za whole=20, rezultat = 50.00%)</param>
            <param name="whole">Velicina celine, npr. 20  - (za part=10, rezultat = 50.00%)</param>
            <param name="decimals">Na koliko decimala zaogruzuje</param>
            <param name="suffix">Koji sufix (simbol) dodaje</param>
            <returns>Sredjen rezultat u stringu</returns>
            \ingroup_disabled ace_ext_strings_generators
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringFormats.imbGetPercentageDouble(System.Int32,System.Int32,System.Int32)">
            <summary>
            Vraca procenat od zadatih brojeva, zaokruzen na dve decimale
            </summary>
            <param name="part">Velicina dela, npr. 10  - (za whole=20, rezultat = 50.00%)</param>
            <param name="whole">Velicina celine, npr. 20  - (za part=10, rezultat = 50.00%)</param>
            <param name="decimals">Na koliko decimala zaogruzuje</param>
            <returns>Sredjen rezultat</returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringGenerators">
            <summary>
            Ekstenzije koje generisu stringove za razlicite namene> univerzalni ID ili tako nesto
            </summary>
            \ingroup_disabled ace_ext_string
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringGenerators.getSerial(System.Int32,System.Int32,System.String)">
            <summary>
            Generise "serijski" broj - tj. na broj dodaje leading 0 i spliter koji mu se zada
            </summary>
            <param name="number">Ulazni broj koji se formatira u serijsku formu</param>
            <param name="spaces">Broj karaktera u broju</param>
            <param name="spliter"></param>
            <returns>Formatiran broj</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringGenerators.getRandomString(System.Int32)">
            <summary>
            Generise random string zadate duzine
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringGenerators.makeUniqueName(System.String,imbSCI.Core.extensions.text.imbStringGenerators.IsNameTaken,System.String,System.Int32)">
            <summary>
            Creates unique string name. Refusal delegate returns true
            </summary>
            <param name="candidate">The candidate.</param>
            <param name="test">The test.</param>
            <param name="format">The format.</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringGenerators.makeUniqueName(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Int32,System.Boolean)">
            <summary>
            Pravi unikatno ime na osnovu kandidata i prosledjene liste postojecih imena
            </summary>
            <param name="candidate">String koji je trenutno kandidat za ime</param>
            <param name="used">Lista imena koja su koriscena</param>
            <param name="format">String format za formatiranje broja</param>
            <param name="limit">Na koliko pokusaja je limitiran proces</param>
            <param name="disableAutoAddToIList">if set to <c>true</c> it wil not automatically add the result to <c>used</c>.</param>
            <remarks>
            <para>Finds proper unique adding using <c>candidate</c> count sufix in provided <c>format</c></para>
            <para>If the <c>used</c> is <see cref="T:System.Collections.Generic.IList`1"/> and <c>disableAutoAddToIList</c> is <c>false</c> it will <see cref="M:System.Collections.Generic.List`1.Add(`0)"/> the result. </para>
            </remarks>
            <returns>
            Unikatno ime koje se sastoji od kandidata i dodatog broja na kraju
            </returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringIsTests">
            <summary>
            Skup testova nad stringom
            </summary>
            \ingroup_disabled ace_ext_string
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isProperHtmlDocument(System.String)">
            <summary>
            Determines whether the source is proper HTML document having DOCTYPE header or
            </summary>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is proper HTML document] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isPotentialStreetAndNumber">
            <summary>
            Regex select PotentialStreetAndNumber : ([A-ZČŠĆŽĐ]{1}[a-zžđščć]{2,}[\s]{1,4}[A-ZČŠĆŽĐ]{1}[a-zćšđčž]{2,}\s+[\w\d\\-]{1,})
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isPotentialStreetAndNumber(System.String)">
            <summary>
            Test if input matches ([A-ZČŠĆŽĐ]{1}[a-zžđščć]{2,}[\s]{1,4}[A-ZČŠĆŽĐ]{1}[a-zćšđčž]{2,}\s+[\w\d\\-]{1,})
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isPotentialStreetAndNumber</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isPotentialPersonalNamePair">
            <summary>
            Regex select PotentialPersonalNamePair : [A-ZČŠĆŽĐ]{1}[a-zžđščć]{2,}[\s]{1,4}[A-ZČŠĆŽĐ]{1}[a-zćšđčž]{2,}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isIsPotentialCityAndPost">
            <summary>
            Regex select IsPotentialCityAndPost : (\b[\d]{5}[\s\n]{1,3}([A-ZČŠĆŽĐ]{1}[a-zžđščć]{1,}|[A-ZČŠĆŽĐ]{2,}))|(([A-ZČŠĆŽĐ]{1}[a-zžđščć]{1,}|[A-ZČŠĆŽĐ]{2,}){1}[\s\n]{1,3}[\d]{5}\b)
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isQuotedSubSentence">
            <summary>
            Regex select QuotedSubSentence : ([\""]([A-Za-z\s,;:\-])+[\""])
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isEnbracedSubSentence">
            <summary>
            Regex select EnbracedSubSentence : ([\(]([A-Za-z\s,;:\-])+[\)])
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isEnumerationSubSentence">
            <summary>
            Regex select EnumerationSubSentence : \b([\:]{1}([\s]*([A-ZČŠĆŽĐa-zžđščć]{1,3})+([\s]{0,2}([,\;\-]{1}|[\s]{0,1}[\w]{1}[\s]{1}))*){1,})
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isInnerSentence">
            <summary>
            Regex select InnerSentence : (,{1}[\s]{1})([\w\d\s]*)(,{1}[\s]{1})
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isSentenceFragmentCase">
            <summary>
            Regex select SentenceFragmentCase : ^[a-zžđščć\d\.\-_,:;\(\)]{1}[A-ZČŠĆŽĐa-zžđščć\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <remarks>
            <para>Kao da predstavlja deo neke recenice -- obavezno pocinje malim slovom</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isLowerCase">
            <summary>
            Regex select LowerCase : ^[a-zžđščć\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isUpperCase">
            <summary>
            Regex select UpperCase : ^[A-ZČŠĆŽĐ]{1}[A-ZČŠĆŽĐ\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_wordcaseCamel">
            <summary>
            Regex select caseCamel : ([A-ZČŠĆŽĐ]{1}[a-zžđščć]{1,})
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_wordcaseUpper">
            <summary>
            Regex select caseUpper : ([A-ZČŠĆŽĐ]{1,})\b
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_wordcaseLower">
            <summary>
            Regex select caseLower : ([a-zžđščć]{1,})
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isSentenceCase">
            <summary>
            Regex select SentenceCase : ^[A-ZČŠĆŽĐ]{1}[A-ZČŠĆŽĐa-zžđščć\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <remarks>
            <para>Pocinje velikim slovom, a ostalo kako god</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isStrictSentenceCase">
            <summary>
            Regex select StrictSentenceCase : ^[A-ZČŠĆŽĐ]{1}[a-zžđščć\s\d\-_,\:;]{1,}$
            </summary>
            <remarks>
            <para>Proverava da li je u pitanju pravilan sentence case: prvo slovo je veliko, ostalo su mala slova</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isEndsWithExclamationPunctation">
            <summary>
            Regex select EndsWithExclamationPunctation : ([\w\s]+)[\!]+$
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isEndsWithExclamationPunctation(System.String)">
            <summary>
            Test if input matches ([\w\s]+)[\!]+$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isEndsWithExclamationPunctation</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isEndsWithQuestionPunctation">
            <summary>
            Regex select EndsWithQuestionPunctation : ([\w\s]+)[\?]+$
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isEndsWithQuestionPunctation(System.String)">
            <summary>
            Test if input matches ([\w\s]+)[\?]+$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isEndsWithQuestionPunctation</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isEndsWithEnumerationPunctation">
            <summary>
            Regex select EndsWithEnumerationPunctation : ([\w\s]+)[\:]+$
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isEndsWithEnumerationPunctation(System.String)">
            <summary>
            Test if input matches ([\w\s]+)[\:]+$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isEndsWithEnumerationPunctation</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isNoLowerCaseTokenStream">
            <summary>
            Regex select NoLowerCaseTokenStream : ^[\P{Ll}]*$
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isNoLowerCaseTokenStream(System.String)">
            <summary>
            Test if input matches ^[\P{Ll}]*$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isNoLowerCaseTokenStream</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isSymbolicContentOnly">
            <summary>
            Regex select SymbolicContentOnly : ^[\W\s]+$
            </summary>
            <remarks>
            <para>Iskljucivo simboli u sadrzaju</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isWord">
            <summary>
            Regex select Word : [A-ZČŠĆŽĐa-zžđščć]{1,}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isFormatedNumber">
            <summary>
            Regex select FormatedNumber : ([\d]{1,}[\\\/\:\.\-\|\s]{1,3}){0,5}[\d]{1,}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isNumber">
            <summary>
            Regex select Number : [\d]+
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isDecimalNumber">
            <summary>
            Regex select DecimalNumber : [\d]{1,}[\,\.]{1,}[\d]{1,}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isOrdinalNumber">
            <summary>
            Regex select OrdinalNumber : [\d]{1,}[\.]{1}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isPotentialPersonalNamePair(System.String)">
            <summary>
            Test if input matches [A-ZČŠĆŽĐ]{1}[a-zžđščć]{2,}[\s]{1,4}[A-ZČŠĆŽĐ]{1}[a-zćšđčž]{2,}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isPotentialPersonalNamePair</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isIsPotentialCityAndPost(System.String)">
            <summary>
            Test if input matches (\b[\d]{5}[\s\n]{1,3}([A-ZČŠĆŽĐ]{1}[a-zžđščć]{1,}|[A-ZČŠĆŽĐ]{2,}))|(([A-ZČŠĆŽĐ]{1}[a-zžđščć]{1,}|[A-ZČŠĆŽĐ]{2,}){1}[\s\n]{1,3}[\d]{5}\b)
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isIsPotentialCityAndPost</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isQuotedSubSentence(System.String)">
            <summary>
            Test if input matches ([\""]([A-Za-z\s,;:\-])+[\""])
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isQuotedSubSentence</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isEnbracedSubSentence(System.String)">
            <summary>
            Test if input matches ([\(]([A-Za-z\s,;:\-])+[\)])
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isEnbracedSubSentence</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isEnumerationSubSentence(System.String)">
            <summary>
            Test if input matches \b([\:]{1}([\s]*([A-ZČŠĆŽĐa-zžđščć]{1,3})+([\s]{0,2}([,\;\-]{1}|[\s]{0,1}[\w]{1}[\s]{1}))*){1,})
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isEnumerationSubSentence</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isInnerSentence(System.String)">
            <summary>
            Test if input matches (,{1}[\s]{1})([\w\d\s]*)(,{1}[\s]{1})
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isInnerSentence</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isSentenceFragmentCase(System.String)">
            <summary>
            Test if input matches ^[a-zžđščć\d\.\-_,:;\(\)]{1}[A-ZČŠĆŽĐa-zžđščć\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isSentenceFragmentCase</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isLowerCase(System.String)">
            <summary>
            Test if input matches ^[a-zžđščć\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isLowerCase</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isUpperCase(System.String)">
            <summary>
            Test if input matches ^[A-ZČŠĆŽĐ]{1}[A-ZČŠĆŽĐ\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isUpperCase</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isFirstCapitalRestLowerCase">
            <summary>
            Regex select FirstCapitalRestLowerCase : ([\p{Lu}]{1}[\p{Ll}]+)
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isFirstCapitalRestLowerCase(System.String)">
            <summary>
            Test if input matches ([\p{Lu}]{1}[\p{Ll}]+)
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isFirstCapitalRestLowerCase</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isAllCapitalLetterCaseWord">
            <summary>
            Regex select AllCapitalLetterCaseWord : ([\p{Lu}]+)\b
            </summary>
            <remarks>
            <para>Single word all capital</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isAllCapitalLetterCaseWord(System.String)">
            <summary>
            Test if input matches ([\p{Lu}]+)\b
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isAllCapitalLetterCaseWord</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isAllLowerLetterCaseWord">
            <summary>
            Regex select AllLowerLetterCaseWord : \b([\p{Ll}]+)\b
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isAllLowerLetterCaseWord(System.String)">
            <summary>
            Test if input matches \b([\p{Ll}]+)\b
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isAllLowerLetterCaseWord</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isSentenceCase(System.String)">
            <summary>
            Test if input matches ^[A-ZČŠĆŽĐ]{1}[A-ZČŠĆŽĐa-zžđščć\s\d\.\-_,:;\(\)]{1,}$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isSentenceCase</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isStrictSentenceCase(System.String)">
            <summary>
            Test if input matches ^[]{1}[a-zžđščć\s\d\-_,\:;]{1,}$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isStrictSentenceCase</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isSymbolicContentOnly(System.String)">
            <summary>
            Test if input matches ^[\W\s]+$
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isSymbolicContentOnly</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isWord(System.String)">
            <summary>
            Test if input matches [A-ZČŠĆŽĐa-zžđščć]{1,}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isWord</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isOneLetterKeyedNumber">
            <summary>
            Regex select OneLetterKeyedNumber : [A-ZČŠĆŽĐa-zžđščć]{1}[\d\.\-]+
            </summary>
            <remarks>
            <para>For text: 2000 1000 2 X-5.00 YN1500</para>
            <para>Selects: X-5.00</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isOneLetterKeyedNumber(System.String)">
            <summary>
            Proverava da li je prodledjen string u formatu [jedno slovo][- ili nista][broj koji moze biti decimalan]
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isOneLetterKeyedNumber</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_cleanWord">
            <summary>
            Regex select CleanWord : ([A-ZČŠĆŽĐa-zžđščć]{1,})\b
            </summary>
            <remarks>
            <para>For text: TOOL60101 RC 15 5 5 270 MT01</para>
            <para>Selects: RC</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isCleanWord(System.String)">
            <summary>
            Proverava da li je string cista rec ili ima jos nesto u sebi -  ([A-ZČŠĆŽĐa-zžđščć]{1,})\b
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isCleanWord</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isFormatedNumber(System.String)">
            <summary>
            Test if input matches ([\d]{1,}[\\\/\:\.\-\|\s]{1,3}){0,5}[\d]{1,}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isFormatedNumber</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isNumber(System.String)">
            <summary>
            Obican broj - nez decimale i bez negativnog znaka [\d]+
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isNumber</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isNumberFormatted">
            <summary>
            Regex select NumberFormatted : [\+]? [\p{P}]? [\d\s\p{P}]+ \d+
            </summary>
            <remarks>
            <para>From "22330 Nova Pazova, Srbija  telefon: +381 (0) 22-323-598- (centrala) | 022 332 5987 RSD sddsa 105-85680000064 godina  2015."</para>
            <para>Matches: 22330, +381 (0) 22-323-598, 022 332 5987, 105-85680000064 and 2015 but without .</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isNumberFormatted(System.String)">
            <summary>
            Test if input matches [\+]? [\p{P}]? [\d\s\p{P}]+ \d+
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isNumberFormatted</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isPercentageNumber">
            <summary>
            Regex select PercentageNumber : (([\-\+]?[\s]?)?([\d\.\,]+[\s]?%))
            </summary>
            <remarks>
            <para>For: " 120.5%  - 2.0%  +10 %"</para>
            <para>Selects: in group nr=2 </para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isPercentageNumber(System.String)">
            <summary>
            Test if input matches (([\-\+]?[\s]?)?([\d\.\,]+[\s]?%))
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isPercentageNumber</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isWithNumericChars">
            <summary>
            Regex select WithNumericChars : [\d]
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isWithNumericChars(System.String)">
            <summary>
            Test if input matches [\d]
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isWithNumericChars</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isWithLetterChars">
            <summary>
            Regex select WithLetterChars : \p{L}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isWithLetterChars(System.String)">
            <summary>
            Test if input matches \p{L}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isWithLetterChars</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isWithPunctChars">
            <summary>
            Regex select WithPunctChars : \p{P}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isWithPunctChars(System.String)">
            <summary>
            Test if input matches \p{P}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isWithPunctChars</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isWordNumber">
            <summary>
            Regex select WordNumber : \b[A-ZČŠĆŽĐa-zžđščć]{2,}[\d\.\-]+\b
            </summary>
            <remarks>
            <para>For text: Y500 YE500  004</para>
            <para>Selects: YE500</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isWordNumber(System.String)">
            <summary>
            Da li token pocinje sa jednim ili vise slova a zatim sadrzi brojeve
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isWordNumber</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isAlfaNumericWord">
            <summary>
            Regex select AlfaNumericWord : [\w\d]+
            </summary>
            <remarks>
            <para>For text: 15YN1500 TOOL60101 RC 15 5 5 270 MT01</para>
            <para>Selects: 15YN1500 TOOL60101 RC 15 5 5 270 MT01</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isAlfaNumericWord(System.String)">
            <summary>
            Vraca TRUE ako je slovna ili brojna vrednost - d  [\w\d]+
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isAlfaNumericWord</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isIntegerOrDecimalWithSign">
            <summary>
            Regex select IntegerOrDecimalWithSign : [\d\-\.]+
            </summary>
            <remarks>
            <para>For text: -5.00 YN1500</para>
            <para>Selects: -5.00</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isIntegerOrDecimalWithSign(System.String)">
            <summary>
            proverava da li je u pitanju broj koji moze biti decimalan, moze pocinjati i negaitvnom vrednoscu, a moze biti i obican broj bez decimala
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isIntegerOrDecimalWithSign</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isDecimalNumber(System.String)">
            <summary>
            Test if input matches [\d]{1,}[\,\.]{1,}[\d]{1,}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isDecimalNumber</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isOrdinalNumber(System.String)">
            <summary>
            Test if input matches [\d]{1,}[\.]{1}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isOrdinalNumber</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringIsTests._select_isBankAccountNumber">
            <summary>
            Regex select BankAccountNumber : [\d]{3}-[\d]{15}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringIsTests.isBankAccountNumber(System.String)">
            <summary>
            Test if input matches [\d]{3}-[\d]{15}
            </summary>
            <param name="input">String to test</param>
            <returns>Returns true if the string matches the bank account format, like: IsMatch against _select_isBankAccountNumber</returns>
        </member>
        <member name="P:imbSCI.Core.extensions.text.imbStringOperations.charsToIgnore_compareStrings">
            <summary>
            karakteri koje treba da ignorise prilikom specijalnih compareStrings modova
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringOperations.mySqlTypeVsSystemType">
            <summary>
            Key je mySqlTypeName *kako se koristi na serveru* a Value je .NET ekvivalent
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.getMPSLine(System.String,System.String)">
            <summary>
            Pravi MPS line na osnovu prosledjenog podatka
            </summary>
            <param name="path"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.executeStringOperation(imbSCI.Core.extensions.text.stringOperation,System.String,System.String)">
            <summary>
            Sklapanje dva stringa
            </summary>
            <param name="operation"></param>
            <param name="oldString"></param>
            <param name="newString"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.deployValuesToString(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            imbV3: Vrednosti iz prosledjenog rečnika zamenjuje tamo gde pronađe $(key) u inputu
            </summary>
            <param name="values"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.getWashed(System.Collections.Generic.List{System.String})">
            <summary>
            Cisti iz Stringa space i newLine
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.removeChars(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
            Removes all occuring chars from the <c>input</c>
            </summary>
            <param name="needle">Chars to remove from the string</param>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.compareStrings(System.String,System.String,System.String)">
            <summary>
            Poređenje stringova korišćenjem imena stringMatchPolicy enuma
            </summary>
            <param name="operantA">Prvi operant</param>
            <param name="operantB">Drugi operant</param>
            <param name="compareMode">Ime stringMatchPolicy</param>
            <returns>Rezultat</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.getLengthOrNumber(System.String)">
            <summary>
            Returns string length or it's integer value in case it is a proper number, e.g.: 4, or 6.2
            </summary>
            <param name="input">String form of a number or real textual string</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.commonStartSubstring(System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
            It extracts common substring at left end (at start, root) of input strings
            </summary>
            <param name="strings">The strings.</param>
            <param name="tolerance">The tolerance: what proportion of input strings could be excluded in order to get longest possible common root from the rest of the input</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.longestCommonSubstring(System.Collections.IList)">
            <summary>
            Extracts one longest common sugstring
            </summary>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.longestCommonSubstrings(System.Collections.IList)">
            <summary>
            Extracts the longest possibile common substrings
            </summary>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.compareStrings(imbSCI.Core.extensions.text.stringMatchPolicy,System.String,System.String)">
            <summary>
            Uporedjuje dva stringa pomocu datog string match policija
            </summary>
            <param name="compareMode">Nacin poredjenja</param>
            <param name="operantA"></param>
            <param name="operantB"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.compareStrings(System.String,System.String,imbSCI.Core.extensions.text.stringMatchPolicy)">
            <summary>
            Uporedjuje string prema zadatom uslovu
            </summary>
            <param name="operantA">Search content - source</param>
            <param name="operantB">Search needle - keyword</param>
            <param name="compareMode"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringOperations.trimToLimit(System.String,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Skraćuje string na zadati limit, ako ima potrebe. Dodace sufix samo ako je skracivao string. Podrzava snapToWord
            </summary>
            <param name="input">String koji se skraćuje</param>
            <param name="limit">Do koje dužine je dozvoljen</param>
            <param name="removeNewLine">Da li briše i NewLine tagove</param>
            <param name="sufix">Koji sufix da stavi u nastavku</param>
            <param name="isInvert">Ako je True onda ce skratiti string sa desne strane</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringPathTools">
            <summary>
            Operacije nad Binding/Property/imbProjectResource path stringovima
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.text.imbStringPathTools.allPathSegments">
            <summary>
            Kolekcija svih Charova koji se pojavljuju kao separatori putanja
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.text.imbStringPathTools.rg">
            <summary>
            Regex za prepoznavanje segmenta putanje
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getPathFromElements(System.String,System.String[])">
            <summary>
            Builds path from given elements of resource path
            </summary>
            <param name="startPath"></param>
            <param name="pathElements"></param>
            <returns></returns>
            \ingroup_disabled ace_ext_path
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getValidFileName(System.String,System.String)">
            <summary>
            Cleans up filename candidate String by removing all forbiden characters from <c>filename</c> and replaces <c>.</c> with <c>_</c>. Also adds <c>extension</c> if any provided.
            </summary>
            <param name="filename"></param>
            <param name="extensionToAdd">Ekstenzija koja treba da se nalazi na kraju fajla</param>
            <returns></returns>
            \ingroup_disabled ace_ext_filepath
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getPropertyPathElements(System.String,System.String)">
            <summary>
            2013c> obradjuje string sa binding/property pathom> npr.  object.color.hexValue - i vraca listu elemenata
            </summary>
            <param name="propertyPath"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getSQLPaths(System.String,System.String)">
            <summary>
            Vraća SQL-kompatibilnu verziju putanje. Konverzija nije reverzibilna u potpunosti!!
            </summary>
            <param name="path">Putanja imbReportCell-a ili nekog drugog resursa</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.standardizePath(System.String)">
            <summary>
            DEPRECATED
            </summary>
            <param name="pathInput">The path input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getTitleFromPath(System.String,System.Boolean)">
            <summary>
            X IZBACENO
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.toUniformPath(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Konvertuje sve simbole za segmentaciju putanje u zadati spliter
            </summary>
            <param name="complexPath">Putanja koja ima razlicite simbole segmenata> . / $ itd</param>
            <param name="spliterToUse">Simbol koji ce biti primenjen umesto pronadjenih simbola</param>
            <returns></returns>
            \ingroup_disabled ace_ext_path
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getRelativePathVersion(System.String,System.Boolean)">
            <summary>
            Ako postoji / na početku putanje on će ga skloniti
            </summary>
            <param name="xPath">Putanja koju obrađuje</param>
            <returns>Obrađena putanja</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getPathVersion(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a version of XPath or any other path format
            </summary>
            <param name="xPath">Putanja koja se obrađuje. Primarno za xPath ali moze i neka druga</param>
            <param name="decrease">Ako je >0: Koliko elemenata u putanji da skloni (od kraja), ako je manje od 0 onda koliko krajnjih elemenata da pusti </param>
            <param name="splitter">Spliter, ako ostane Empty onda ce koristiti sve splitere -- ali ce biti bug kod sklapanja multi level putanje</param>
            <param name="trimOutput">Da li da trimuje pocetak i kraj rezultata -- skida spliter</param>
            <returns>Verzija putanje - odnosno dati segment</returns>
            \ingroup_disabled ace_ext_xpath_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getPathVersionForChild(System.String,System.Int32,System.String)">
            <summary>
            Gets the path version for child nodes by skipping the deepest <c>rootSkip</c> path members
            </summary>
            <param name="xPath">Path string</param>
            <param name="rootSkip">How many members from root to skip</param>
            <param name="splitter">The splitter used for path</param>
            <returns>Shorter version of the path, without deepest <c>rootSkip</c> nodes</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringPathTools.getPathVersion(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns a version of XPath (or any other split-path format)
            </summary>
            <param name="xPath"></param>
            <param name="fromDepth"></param>
            <param name="toDepth">Do kog elementa</param>
            <returns></returns>
            \ingroup_disabled ace_ext_xpath_highlight
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringPathTools._select_groupPath">
            <summary>
            Regex select groupPath : (\w+)[\\\s]*
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringSelect">
            <summary>
            Static class with a number of Regex patterns and methods to test and retrieve
            </summary>
            \ingroup_disabled ace_ext_string
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_tokenSplitter">
            <summary>
            Regex select tokenSplitter : (([\W\s\+\.\,]+){1,}$) -- the same <c>contentToken</c> class uses
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_regexName">
            <summary>
            Regex select regexName : ([\w]{1}\.{1}\s{1}){2,}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect._replace_regexName(System.Text.RegularExpressions.Match)">
            <summary>
            Match Evaluation for regexName : _select_regexName
            </summary>
            <param name="m">Match with value to process</param>
            <returns>For m.value "something" returns "SOMETHING"</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isRegexName">
            <summary>
            Regex select RegexName : ([\w]{1}\.{1}\s{1}){2,}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isRegexName(System.String)">
            <summary>
            Test if input matches ([\w]{1}\.{1}\s{1}){2,}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isRegexName</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isIsTokenStream">
            <summary>
            Regex select IsTokenStream : [\s\,\;\-]+
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isTokenStream(System.String)">
            <summary>
            Test if input matches [\s\,\;\-]+ : checks if the input is a solid, single token (false) or it is one of token streams kinds (like: "token,token,51", "tkn tk2, 50;", "50;rk;23", "tk-tj"
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isIsTokenStream</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isSingleToken(System.String)">
            <summary>
            opposite to <see cref="M:imbSCI.Core.extensions.text.imbStringSelect.isTokenStream(System.String)"/> test
            </summary>
            <param name="input">The input.</param>
            <returns>
              <c>true</c> if [is single token] [the specified input]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_inlineTypedProperty">
            <summary>
            Regex select inlineTypedProperty : (.*):(.*)=(.*);
            </summary>
            <remarks>
            <para>cs_y0:Decimal = #.00000;</para>
            <para>Selects: cs_y0, Decimal, #.00000</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.select_inlineTypedProperty(System.String)">
            <summary>
            Match Evaluation for inlineTypedProperty : _select_inlineTypedProperty
            </summary>
            <param name="input">cs_y0:Decimal = #.00000;</param>
            <returns>[0]=paramname;[1]=typename;[2]=format</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isPostOfficeNumber">
            <summary>
            Regex select PostOfficeNumber : (([\d]{5})|([\d]{2}[\s]{1}[\d]{3})[\b]{1})[\W]{1}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isYearNumber">
            <summary>
            Regex select YearNumber : ([\d]{4}[\.])
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isAcronimByLength">
            <summary>
            Regex select AcronimByLength : [\s\b]{1}([A-Z]{3,4})[\s\b]{1}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isAcronimIrregular">
            <summary>
            Regex select AcronimIrregular : [\s]{1}([ZXCVBNMKLJHGFDSQWRTYP]{2,})[\s]{1}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isEmailAddress">
            <summary>
            Regex select EmailAddress : [a-zA-Z\d_\.]+@[a-zA-Z_\.]*?\.[a-zA-Z\.]{2,6}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isStandards">
            <summary>
            Regex select Standards : [A-Z]{1,5}[\s\-\:]*[\d]{2,5}[\d\:]*
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isLettersWithDotsFromStart">
            <summary>
            Regex select LettersWithDotsFromStart : \A([\w\.]*)
            </summary>
            <remarks>
            <para>For text: koplas.co.rs/index.php</para>
            <para>Selects: koplas.co.rs</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isLettersWithDotsFromStart(System.String)">
            <summary>
            Test if input matches \A([\w\.]*)
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isLettersWithDotsFromStart</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_isPhoneNumber">
            <summary>
            Regex select phoneNumber : [\+0^]{1,2}[\s]{0,2}([\d\(\)]{2,5}[\s\(\)\-\.\/\\]{1,2}){3,5}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isPostOfficeNumber(System.String)">
            <summary>
            Test if input matches (([\d]{5})|([\d]{2}[\s]{1}[\d]{3})[\b]{1})[\W]{1}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isPostOfficeNumber</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isYearNumber(System.String)">
            <summary>
            Test if input matches ([\d]{4}[\.])
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isYearNumber</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isAcronimByLength(System.String)">
            <summary>
            Test if input matches [\s\b]{1}([A-Z]{3,4})[\s\b]{1}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isAcronimByLength</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isAcronimIrregular(System.String)">
            <summary>
            Test if input matches [\s]{1}([ZXCVBNMKLJHGFDSQWRTYP]{2,})[\s]{1}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isAcronimIrregular</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isEmailAddress(System.String)">
            <summary>
            Test if input matches [a-zA-Z\d_\.]+@[a-zA-Z_\.]*?\.[a-zA-Z\.]{2,6}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isEmailAddress</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isStandards(System.String)">
            <summary>
            Test if input matches [A-Z]{1,5}[\s\-\:]*[\d]{2,5}[\d\:]*
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isStandards</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelect.isPhoneNumber(System.String)">
            <summary>
            Test if input matches [\+0^]{1,2}[\s]{0,2}([\d\(\)]{2,5}[\s\(\)\-\.\/\\]{1,2}){3,5}
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isphoneNumber</returns>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_wordsFromDomainname">
            <summary>
            2017 Regex select wordsFromDomainname : ([\w]{1}\.{1}\s{1}){2,}
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringSelect._select_rootDomainNameWithoutRelPath">
            <summary>
            Regex select rootDomainNameWithoutRelPath : (?:http://)?(?:www\.)?([\w\d\.-]+)
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringSelectLists">
            <summary>
            Selects proper URLs, email@adresses, #tags.
            </summary>
            \ingroup_disabled ace_ext_string
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelectLists.imbGetUrls(System.String)">
            <summary>
            Matches URLs in string using Regex
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelectLists.imbGetEmails(System.String)">
            <summary>
            Matches all email addresses in string using Regex
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringSelectLists.imbGetHashtags(System.String)">
            <summary>
            Matches all hashtags in string using Regex
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbStringWordWrap">
            <summary>
            Wraping text into HTML
            </summary>
            \ingroup_disabled ace_ext_string
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringWordWrap.splitPattern_word">
            <summary>
            Daje samo reci - a ignorise razmake i punktaciju
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.imbStringWordWrap.wordMatchMinLength">
            <summary>
            Returns words having 4 characters or more at least
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringWordWrap.getStringTokens(System.String)">
            <summary>
            Splits string into token list, excluding punctation and other extra contents
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringWordWrap.getStringTokensMinLength(System.String)">
            <summary>
            Gets clean words - at least 4 characters long
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringWordWrap.getTokens(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Simple String tokenization - extracts words without spaces and punctation
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringWordWrap.getTokens(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Simple String tokenization - extracts words without spaces and punctation
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringWordWrap.wrapLineBySpace(System.String,System.Int32)">
            <summary>
            Breaks specified text into lines of maximum width as specified by <c>innerWidth</c>. It is aware of words, so the text is splitted only at spaces - all words stay complete.
            </summary>
            <remarks>It is ok if text is less then full line</remarks>
            <param name="input"></param>
            <param name="innerWidth"></param>
            <returns>List of lines</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringWordWrap.breakLines(System.String,System.Boolean)">
            <summary>
            Breakes input string by NewLine character. Trim space and tabs fir each line
            </summary>
            <param name="input">If null returns empty list</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbStringWordWrap.wrapLine(System.String,System.Int32,System.String)">
            <summary>
            Iz jedne linije lomi u vise
            </summary>
            <param name="input"></param>
            <param name="innerWidth"></param>
            <param name="lineBreaker"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.imbTextFormatTools">
            <summary>
            Set alata za obradu Stringova za potrebe NC
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.log(System.String,System.String)">
            <summary>
            Helper method, actually just adds <see cref="P:System.Environment.NewLine"/> before the message specified -- alias of <see cref="M:imbSCI.Core.extensions.text.imbTextFormatTools.addLine(System.String,System.String)"/>, don't use this.
            </summary>
            <param name="output">The output.</param>
            <param name="msg">The MSG.</param>
            <returns></returns>
            <exception cref="!:aceCommonTypes.core.exceptions.aceGeneralException"></exception>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.addLine(System.String,System.String)">
            <summary>
            Adds the line.
            </summary>
            <param name="output">The output.</param>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.addVal(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds the value.
            </summary>
            <param name="output">The output.</param>
            <param name="input">The input.</param>
            <param name="value">The value.</param>
            <param name="separator">The separator.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.newLine(System.String)">
            <summary>
            News the line.
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.Repeat(System.String,System.Int32)">
            <summary>
            Repeats the specified times.
            </summary>
            <param name="input">The input.</param>
            <param name="times">The times.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.toWidthExact(System.String,System.Int32,System.String)">
            <summary>
            To the width exact.
            </summary>
            <param name="target">The target.</param>
            <param name="targetWidth">Width of the target.</param>
            <param name="charToRepeat">The character to repeat.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.toWidthMaximum(System.String,System.Int32,System.String)">
            <summary>
            To the width maximum.
            </summary>
            <param name="target">The target.</param>
            <param name="targetWidth">Width of the target.</param>
            <param name="charToRepeat">The character to repeat.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.toWidthMinimum(System.String,System.Int32,System.String)">
            <summary>
            Makes a String with defined minimal width. Longer strings are unchanged, shorter are expanded by <c>charToRepeat</c> until the width is achieved.
            </summary>
            <param name="target">The target.</param>
            <param name="targetWidth">Targeted width</param>
            <param name="charToRepeat">The character to repeat to extend strings shorter than target.</param>
            <returns>String that has at least width specified </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.adds(System.String,System.String,System.String[])">
            <summary>
            Calls multiple <c>add</c> times using provided <c>separator</c> and collection of inputs.
            </summary>
            <param name="output">The output - string to be added</param>
            <param name="seperator">The seperator - to be inserted between content and added content</param>
            <param name="inputs">The inputs: strings and/or IEnumerable with strings</param>
            <returns>String versuon with all inputs added</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.imbTextFormatTools.getFormatFromExample(System.String,System.Int32)">
            <summary>
            VRaca string format vrednost - u skladu sa string format pravilima> #.000 ce vratiti broj sa tri decimale
            </summary>
            <param name="numericInput">String koji sadrzi brojnu vrednost sa decimalama, npr. 25.00 </param>
            <param name="defaultDecNumbers">Koliko ce decimalnih vrednosti zabeleziti ako nema uopste decimale</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.text.stringMatchPolicy">
            <summary>
            Način upoređivanja stringova
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.exact">
            <summary>
            Identična vrednost
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.standard">
            <summary>
            legacy
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.caseFree">
            <summary>
             ignorise razlike mala/velika slova
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.trimSpaceExact">
            <summary>
            brise razmake sa pocetka i kraja
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.trimSpaceCaseFree">
            <summary>
             brise razmake sa pocetka i kraja, i case free
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.trimSpaceContainExact">
            <summary>
            brise razmake sa pocetka i kraja, i contain proverava
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.trimSpaceContainCaseFree">
            <summary>
            brise razmake sa pocetka i kraja, i contain case free proverava
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.containExact">
            <summary>
            A se nalazi u B
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.containCaseFree">
            <summary>
            A se nalazi u B
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.length">
            <summary>
            da li imaju iste duzine
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.overrideTrue">
            <summary>
            Uvek vraca true
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.overrideFalse">
            <summary>
            Uvek vraca false
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.atBeginingCaseFree">
            <summary>
            needle index of == 0
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.atEndCaseFree">
            <summary>
            index of == length - needle.length
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.similar">
            <summary>
            Ignorise dosta znakovnih karaktera, razmak i case
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringMatchPolicy.regexQuery">
            <summary>
            Da li string A zadovoljava Regex Query iz stringa B
            </summary>
        </member>
        <member name="T:imbSCI.Core.extensions.text.stringOperation">
            <summary>
            Operacija sa izlaznim Stringom
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringOperation.after">
            <summary>
            Ubacuje na kraj
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringOperation.before">
            <summary>
            Ubacuje na pocetak
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.text.stringOperation.replace">
            <summary>
            Brise prethodni output
            </summary>
        </member>
        <member name="P:imbSCI.Core.extensions.text.stringPresetList.defaultPresets">
            <summary>
            imbControl property defaultPresets tipa imbCollection
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.text.stringPresetList.getDefaultPreset(System.String)">
            <summary>
            Vraća Default Preset list - prema zadatom presetName-u
            U većini slučajeva je bolje koristiti getSeparatedPresetLists - jer podržava više defaultList poziva
            </summary>
            <param name="presetName"></param>
            <returns>String u DefaultPresetList formatu</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.stringPresetList.getDefaultListElementWith(System.String,System.String,imbSCI.Core.extensions.text.stringPresetList.presetListElement)">
            <summary>
            Vraca element default liste koji ima neki needle
            </summary>
            <param name="defaultListString">lista</param>
            <param name="needle">needle. * znaci da je podrazumevani, {} da podrzava multiopts, $$$ da podrzava dinamicka polja</param>
            <param name="whatElement">value, desc ili all</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.stringPresetList.getSeparatedPresetLists(System.String)">
            <summary>
            V3: Za svaki #defaultPresetListCall# pravi poseban Dictionary item . Sve stavke koje nisu u ## liste odvaja u [0] element
            Koristiti: kada očekuješ više #defList1##defList2# poziva u stringu
            </summary>
            <param name="defaultListString">String linija sa svim default listama</param>
            <returns>Recnik sa svim listama. Key je naziv pod liste, Value je spisak default vrednosti </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.stringPresetList.getProcessedPresetList(System.String)">
            <summary>
            Pretvara #defaultListe# u defaultList format
            </summary>
            <param name="defaultList"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.stringPresetList.getDefaultListElement(System.String,imbSCI.Core.extensions.text.stringPresetList.presetListElement)">
            <summary>
            Vraća listu stringova na osnovu DefaultList stringa
            </summary>
            <param name="defaultList">List u DefaultString formatu</param>
            <param name="element">elementi su: value, desc, all</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.stringPresetList.getDefaultListDictionary(System.String)">
            <summary>
            Vraća listu stringova na osnovu DefaultList stringa
            </summary>
            <param name="defaultList">List u DefaultString formatu</param>
            <param name="element">elementi su: value, desc, all</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.text.stringPresetList.getDefaultListString(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Pravi String u DefaultList formatu iz niza vrednosti - ako je niz opisa null onda koristi default opis
            </summary>
            <param name="values">Lista sa vrednostima</param>
            <param name="desc">List sa opisima</param>
            <param name="defaultDescSuffix">Suffix da doda posle countera u descriptionu</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool">
            <summary>
            Utility object that performs Assembly loading, resolves referenced assemblies and containes the result
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.LoadAssembly(System.String,imbSCI.Core.reporting.ILogBuilder,System.Boolean,System.Boolean)">
            <summary>
            Static utility method - internally creates <see cref="T:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool"/> and loads specified assemly file
            </summary>
            <param name="dllFile">The DLL file.</param>
            <param name="_log">The log.</param>
            <param name="loadReferencedAssemblies">if set to <c>true</c> [load referenced assemblies].</param>
            <param name="loadReflectionOnly">if set to <c>true</c> [load reflection only].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.#ctor(imbSCI.Core.reporting.ILogBuilder,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool"/> class and deploys general settings.
            </summary>
            <param name="log">The log.</param>
            <param name="loadReferencedAssemblies">if set to <c>true</c> [load referenced assemblies].</param>
            <param name="loadReflectionOnly">if set to <c>true</c> [load reflection only].</param>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.GetSubLoader">
            <summary>
            Creates new instance of <see cref="T:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool"/> and copies general settings into new instance: <see cref="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.LoadReflectionOnly"/>, <see cref="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.LoadReferencedAssemblies"/>, <see cref="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.log"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.log">
            <summary>
            Gets or sets the log.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.LoadReferencedAssemblies">
            <summary>
            Gets or sets a value indicating whether [load referenced assemblies].
            </summary>
            <value>
              <c>true</c> if [load referenced assemblies]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.LoadReflectionOnly">
            <summary>
            Gets or sets a value indicating whether [load reflection only].
            </summary>
            <value>
              <c>true</c> if [load reflection only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.assembly">
            <summary>
            Gets or sets the assembly.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.directory">
            <summary>
            Gets or sets the directory.
            </summary>
            <value>
            The directory.
            </value>
        </member>
        <member name="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.fileInfo">
            <summary>
            Reference to the file
            </summary>
            <value>
            The file information.
            </value>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.LoadAssembly(System.String)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="dllFile">The DLL file.</param>
            <exception cref="T:System.ArgumentNullException">dllFile - Path can not be null nor empty</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">File not found at specified path [" + dllFile + "] - dllFile</exception>
        </member>
        <member name="P:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.RelatedAssemblies">
            <summary>
            Gets or sets the related assemblies.
            </summary>
            <value>
            The related assemblies.
            </value>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.AssemblyLoaderTool.Domain_ReflectionOnlyAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handles the ReflectionOnlyAssemblyResolve event of the Domain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.sumValues(System.Object,System.Object)">
            <summary>
            Supports> String, Int32, any number via Double and Boolean
            </summary>
            <param name="exValue"></param>
            <param name="cnValue"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.getInstance(System.Type,System.Object[])">
            <summary>
            Pravi instancu preko konstruktora kojem odgovaraju ovi parametri
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.toStringTypeTitle(System.Type)">
            <summary>
            Returns type category string description: enum, array (for collections), object or type name if type is simple input.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.imbConvertValueSafe(System.Object,System.Type)">
            <summary>
            2014c> bezbedna konverzija vrednosti
            </summary>
            <param name="input">Objekat sa izvornom vrednosti</param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.imbToNumber(System.Object,System.Type)">
            <summary>
            Konvertuje u broj prema zadatom tipu
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.imbToInstance(System.Object,System.Type)">
            <summary>
            Konvertuje u potrebni tip. Ukoliko postoji konstruktor sa parametrom koji je IsInstanceOfType(input) onda ce koristit njega
            </summary>
            <remarks>
            Vraca Null: Ako je targetType == null, input == null
            Vraca Input (nepromenjen): Ako je targetType.IsInstanceOfType(input)
            Ako postoji konstruktor> new targetType(input) (isti ili kompatibilan tip parametra, onda ce pozvati taj konstruktor). isti tip parametra ima prednost nad kompatibilnim
            Ako nema kompatibilnog konstruktora, pravi novu instancu i kopira istoimene propertije iz inputa
            </remarks>
            <param name="input"></param>
            <param name="targetType"></param>
            <returns>Instancu objekta</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.imbToBoolean(System.Object,System.Boolean)">
            <summary>
            Konvertuje bilo koju vrednost u Boolean
            </summary>
            <param name="input">Objekat razlicite vrednosti</param>
            <param name="defaultResult">Rezultat koji se vraca ako je null. Kontra od ovoga ce vratiti ako je u pitanju instanca</param>
            <returns>true ili false u skladu sa konverzijom</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeExtensions.compareTypes(System.Type,System.Type)">
            <summary>
            Da li su prosledjeni tipovi isti ili da li je jedan od tipova null
            </summary>
            <param name="typeA"></param>
            <param name="typeB"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeObjectOperations.setObjectValueTypesBySource(System.Object,System.Object,imbSCI.Core.interfaces.IAceLogable)">
            <summary>
            Sets the object by source, but only ValueTypes and string and only properties declared at top inherence level. Returns dictionary with updated properties (only if value changed)
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeObjectOperations.setObjectBySource(System.Object,System.Object,System.String[])">
            <summary>
            Sets the object by source.
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
            <param name="ignoreList">List of properties to ignore.</param>
            <returns>number of values updated at target object</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeObjectOperations._GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object[],System.Boolean)">
            <summary>
            CORE TECH> pristup propertiju koji treba svi metodi da koriste
            </summary>
            <param name="pi"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeObjectOperations._SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.Object,System.Object[],System.Boolean)">
            <summary>
            CORE TECH> postavljanje propertija koji treba svi metodi da koriste
            </summary>
            <param name="source"></param>
            <param name="pi"></param>
            <param name="newValue"></param>
            <param name="indexers"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions">
            <summary>
            Collection of extension methods for Type object: is...() tests and getProperty by path
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.getProperty(System.Object,System.String,System.String)">
            <summary>
            Retrieves PropertyInfo found on path specified
            </summary>
            <param name="input"></param>
            <param name="propertyPath"></param>
            <param name="spliter"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isCompatibileWith(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines whether the <see cref="T:System.Reflection.MemberInfo"/> <c>mi</c> is <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> the specified <c>targetType</c>
            </summary>
            <param name="mi">The mi.</param>
            <param name="targetType">Type of the target.</param>
            <returns>
              <c>true</c> if [is compatibile with] [the specified target type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.getRelevantType(System.Reflection.MemberInfo)">
            <summary>
            Gets the <see cref="T:System.Type"/> that is relevant for specified <see cref="T:System.Reflection.MemberInfo"/>. If the <c>mi</c> is Type its ok too
            </summary>
            <param name="mi">The mi.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="ti">Type to test.</param>
            <returns>
              <c>true</c> if the specified ti is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.getTypeGroup(System.Type)">
            <summary>
            Returns imbTypeGroup for supplied type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isNumber(System.Type)">
            <summary>
            Da li je tip Broj
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isText(System.Type)">
            <summary>
            Da li je tip tekst ili char
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isBoolean(System.Type)">
            <summary>
            Returns TRUE if the type is Boolean or bool
            </summary>
            <param name="type">Type to test</param>
            <returns>TRUE if it is boolean</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isTextOrNumber(System.Type)">
            <summary>
            Ovo se koristi u smislu> da li je dozvoljeno slobodno upisivanje nove vrednosti kroz InputLine
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isSimpleInputEnough(System.Type)">
            <summary>
            Returns TRUE if the type is simple enough to be edited with simple text input field
            </summary>
            <param name="type">Type to test</param>
            <returns>TRUE if its editable by text or FALSE if the type is not that simple</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isCollection(System.Type)">
            <summary>
            Returns TRUE if the type has IEnumerable interface implemented
            </summary>
            <param name="type">Type to test</param>
            <returns>TRUE if it is array, collection, list or any other IEnumerable type</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isToggleValue(System.Type)">
            <summary>
            Returns TRUE if type is: enum, boolean or implements ILimitedValueRange interface
            </summary>
            <param name="type">Type to test</param>
            <returns>TRUE if the type is a kind of toggle value</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isNull(System.Type)">
            <summary>
            Returns TRUE if the type is DBNull
            </summary>
            <param name="type">Type to test</param>
            <returns>TRUE if it is DBNull, FALSE in other case</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypeQueryExtensions.isEnum(System.Type)">
            <summary>
            Returns TRUE if type is enum. Basicaly it just wraps Type.IsEnum value.
            </summary>
            <param name="type">Type to test</param>
            <returns>The value of Type.IsEnum</returns>
        </member>
        <member name="T:imbSCI.Core.extensions.typeworks.imbTypologyHelpers">
            <summary>
            Advanced reflection operations
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.CollectTypes(imbSCI.Core.extensions.typeworks.CollectTypeFlags,System.Reflection.Assembly,System.Type)">
            <summary>
            Collects the types that are discovered around <c>hostType</c>, according to rules defined with <c>flags</c>
            </summary>
            <param name="flags">The flags.</param>
            <param name="hostAssembly">The host assembly.</param>
            <param name="hostType">Type of the host.</param>
            <returns>List of types that are discovered around <c>hostType</c>, according to rules defined with <c>flags</c></returns>
            <seealso cref="T:imbSCI.Core.extensions.typeworks.CollectTypeFlags"/>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.FilterTypeList(System.Collections.Generic.List{System.Type},imbSCI.Core.extensions.typeworks.CollectTypeFlags)">
            <summary>
            Filters the type list.
            </summary>
            <param name="types">The types.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.FilterByNamespace(System.Collections.Generic.List{System.Type},System.String,imbSCI.Core.extensions.typeworks.CollectTypeFlags)">
            <summary>
            Filters the by namespace.
            </summary>
            <param name="types">The types.</param>
            <param name="namespaceString">The namespace string.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.TypeListToDictionary(System.Collections.Generic.List{System.Type})">
            <summary>
            Converts a list of <see cref="T:System.Type"/> to Dictionary having <see cref="!:Type.Name"/> as key
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.CollectTypes(System.Type,imbSCI.Core.extensions.typeworks.CollectTypeFlags)">
            <summary>
            Collects the types around the <c>hostType</c> - according to specified flags
            </summary>
            <param name="hostType">Type of the host.</param>
            <param name="flags">The flags.</param>
            <returns>Dictionary of collected types, keys are <see cref="!:Type.Name"/>s.</returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.getTypeFromName(System.String,System.Type)">
            <summary>
            Gets the name of the type from.
            </summary>
            <param name="typename">The typename.</param>
            <param name="defaultResult">The default result.</param>
            <returns></returns>
            \ingroup_disabled ace_ext_type_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.getCleanTypeFullName(System.String)">
            <summary>
            Gets the clean full name the type.
            </summary>
            <param name="typeFullName">Full name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.getTypePathFilter(System.Type)">
            <summary>
            Gets the type path filter.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.describeTypes(System.Collections.Generic.IEnumerable{System.Type},System.String)">
            <summary>
            Describes the types.
            </summary>
            <param name="types">The types.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.GetBaseTypes(System.Type,System.Int32)">
            <summary>
            Returns all types that are in parent chain of the specified one
            </summary>
            <param name="type">The type.</param>
            <param name="callCount">The call count.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.GetBaseTypeList(System.Type,System.Boolean,System.Boolean,System.Type,System.Int32)">
            <summary>
            Returns list of all inherited types, in order of inherence: classBase.classInherited
            </summary>
            <param name="type">Tip za koji se vracaju nasledjeni tipovi</param>
            <param name="includeSelf">da li da na kraju liste ubaci i sebe</param>
            <param name="uniqueTypes">da li da budu samo unikatni tipovi</param>
            <param name="untilClass">Do koje klase da ide duboko u nasledjivanju? ako je null onda sve</param>
            <param name="callCount">The call count.</param>
            <returns>
            Listu nasledjivanja
            </returns>
            \ingroup_disabled ace_ext_type_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.GetDefaultValue``1(System.Object)">
            <summary>
            Vraca tipiziranu podrazumevanu vrednost
            </summary>
            <typeparam name="T"></typeparam>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.GetDefaultValue(System.Type)">
            <summary>
            Returns default value for type. It may be new instance if <c>t</c> is class type.
            </summary>
            <param name="t">The Type to get value for.</param>
            <returns>Proper default value</returns>
            \ingroup_disabled ace_ext_type_highlight
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.hasParameterlessConstructor(System.Type)">
            <summary>
            Determines whether Type has parameterless constructor
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [has parameterless constructor] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyHelpers.isImbSerializableSimple(System.Type)">
            <summary>
            Determines whether is Type a simple (String, number, enum...) one that can be serialized ToString() way easy.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is imb serializable simple] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet">
            <summary>
            Skup ekstenzija za smestanje i preuzimanje podataka iz propertija
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.ReadStaticField(System.Type,System.String)">
            <summary>
            Vraca vrednost statickog polja iz type-a (const, static property its)
            </summary>
            <param name="name">ime statickog polja</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags">
            <summary>
            Flagovi koji aktiviraju odredjena ponasanja kod checkGetSetPropertyCompatibility
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.checkForSetting">
            <summary>
            Proverava da li newValue moze da se dodeli propertyInfo-u
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.checkForGetting">
            <summary>
            Proverava da li tip propertyInfo-a moze da se dodeli objektu kao sto je newValue
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.ignoreWriteProtection">
            <summary>
            Ignorisace write zastitu kod propertyInfoa
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.throwException">
            <summary>
            Napravice exception i baciti ga
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.justLog">
            <summary>
            Ako nije kompatibilno onda samo log
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.noteException">
            <summary>
            Prosledice exception note logu
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.noteScilent">
            <summary>
            Napravice exception i tiho ga zabeleziti
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.reportingOff">
            <summary>
            Izvestavanje se iskljucuje
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.returnBoolean">
            <summary>
            Vratice Boolean
            </summary>
        </member>
        <member name="F:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.getSetCheckFlags.returnReport">
            <summary>
            Vratice String izvestaj
            </summary>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbGetAllValues(System.Object)">
            <summary>
            Vraca sve vrednosti iz svih propertija koji su Public i Instance
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbGetAllProperties(System.Object)">
            <summary>
            Vraca sve propertije iz objekta koji su Public i Instance. Vraca i nasledjene propertije ali ako su pregazeni onda vraca samo najnoviji
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbSetPropertyConvertSafe(System.Object,System.Reflection.PropertyInfo,System.Object,System.Object[],System.Boolean)">
            <summary>
            Algoritam sa konverzijom koja podrzava i Collection objekta koji imaju Add method.
            </summary>
            <param name="target"></param>
            <param name="p"></param>
            <param name="vl"></param>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbSetPropertySafe(System.Object,System.String,System.Object,System.Boolean,System.Object[],System.Boolean)">
            <summary>
            2013> Sigurano postavljanje vrednosti objekta
            </summary>
            <param name="input"></param>
            <param name="propertyName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbSetPropertySafe(System.Object,System.Reflection.PropertyInfo,System.Object,System.Boolean,System.Object[],System.Boolean)">
            <summary>
            2013> Sigurano postavljanje vrednosti objekta
            </summary>
            <param name="input"></param>
            <param name="propertyName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbPropertyToString(System.Object,System.String,System.String)">
            <summary>
            Sigurno iscitavanje stringa
            </summary>
            <param name="input"></param>
            <param name="propertyName"></param>
            <param name="defaultOutput"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbGetPropertySafe(System.Object,System.String,System.Object,System.String)">
            <summary>
            2013> Sigurno preuzimanje vrednosti objekta - podržava path:
            </summary>
            <param name="input"></param>
            <param name="propertyName">Predstavlja putanju ka proportiju - podrzava .</param>
            <param name="defaultOutput"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbGetPropertySafe(System.Object,System.Reflection.PropertyInfo,System.Object,System.Boolean,System.Object[])">
            <summary>
            2013> Sigurno preuzimanje vrednosti objekta - podržava path:
            </summary>
            <param name="input"></param>
            <param name="propertyName">Predstavlja putanju ka proportiju - podrzava .</param>
            <param name="defaultOutput"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.extensions.typeworks.imbTypologyPropertyGetSet.imbGetPropertySafe``1(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            2014:Maj - uzima property i odmah vrsi bezbednu konverziju!
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.files.backup.backupPolicy.noBackup">
            <summary>
            Iskljucuje backup opciju
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.backup.backupPolicy.zipSelected">
            <summary>
            Zipuje sve selektovane fajlove
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.backup.backupPolicy.copySelectedWithFileNameSufix">
            <summary>
            Kopira sve fajlove koji su selektovani - dodaje im sufix na filename
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.backup.backupPolicy.copySelectedToBakExtension">
            <summary>
            Kopira sve selektovane fajlove - pretvara ih u bak ekstenziju
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataAttribute.#ctor(System.String,imbSCI.Core.files.fileDataStructure.fileDataPropertyMode,imbSCI.Core.files.fileDataStructure.fileDataPropertyOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataAttribute"/> class.
            </summary>
            <param name="__customName">Custom filename prefix (without extension)</param>
            <param name="__formatMode">Mode of serialization</param>
            <param name="__options">Special options</param>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataAttribute.#ctor(imbSCI.Core.files.fileDataStructure.fileDataFilenameMode,imbSCI.Core.files.fileDataStructure.fileDataPropertyMode,imbSCI.Core.files.fileDataStructure.fileDataPropertyOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataAttribute"/> class.
            </summary>
            <param name="__filename">The filename mode</param>
            <param name="__mode">Mode of serialization</param>
            <param name="__options">Special options</param>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataBaseAttribute.formatMode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataBaseAttribute.filenameMode">
            <summary>
            Gets or sets the filename mode.
            </summary>
            <value>
            The filename mode.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataBaseAttribute.nameOrPropertyPath">
            <summary>
            Gets or sets the name or property path.
            </summary>
            <value>
            The name or property path.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataBaseAttribute.options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase">
            <summary>
            Common base class for <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataPropertyDescriptor"/> and <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataStructureDescriptor"/>
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithNameAndDescription" />
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.nameOrPropertyPath">
            <summary>
            Gets or sets the name or property path.
            </summary>
            <value>
            The name or property path.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.filenameMode">
            <summary>
            Gets or sets the filename mode.
            </summary>
            <value>
            The filename mode.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.formatMode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.filename">
            <summary>
            Resolved file name
            </summary>
            <value>
            The filename.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.memberMetaInfo">
            <summary>
            Descriptive information on the memberInfo
            </summary>
            <value>
            The s mi.
            </value>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.SaveDataFile(System.Object,System.String,imbSCI.Core.reporting.ILogBuilder,System.Boolean)">
            <summary>
            Saves the data file.
            </summary>
            <param name="instance">The instance.</param>
            <param name="fullpath">The fullpath.</param>
            <param name="output">The output.</param>
            <param name="preventThrow">if set to <c>true</c> it will prevent throwing exception.</param>
            <exception cref="T:System.NotImplementedException">JSON not implemented yet
            or
            binary file not implemented yet</exception>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.ListStringSeparator">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.LoadDataFile(System.String,imbSCI.Core.reporting.ILogBuilder,System.Type)">
            <summary>
            Loads the data file.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="output">The output.</param>
            <param name="itemType">Type of the item.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">
            JSON not implemented yet
            or
            binary file not implemented yet
            </exception>
            <exception cref="T:System.IO.InvalidDataException">Format type [" + formatMode + "] not supported for type [" + type.Name + "]" + "Format not supported - LoadDataFile</exception>
            <exception cref="T:System.NotImplementedException">JSON not implemented yet
            or
            binary file not implemented yet</exception>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase.deployDescriptorBase(System.Reflection.MemberInfo,imbSCI.Core.files.fileDataStructure.fileDataBaseAttribute,System.Object)">
            <summary>
            Deploys the descriptor base.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="attribute">The attribute.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileDataFilenameMode.customName">
            <summary>
            The custom name: custom filename prefix is specified
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileDataFilenameMode.memberInfoName">
            <summary>
            The property name: property name is used
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileDataFilenameMode.propertyValue">
            <summary>
            Value of a String property specified trough customName
            </summary>
        </member>
        <member name="T:imbSCI.Core.files.fileDataStructure.fileDataPropertyDescriptor">
            <summary>
            Descriptor for a property within <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataStructure"/> class, defined by <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataAttribute"/>
            </summary>
            <seealso cref="T:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase" />
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileDataPropertyDescriptor.WILLCARD_SUFIX">
            <summary>
            The willcard sufix added to filename, before extension
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataPropertyDescriptor.GetFilepath(System.String,imbSCI.Core.files.fileDataStructure.IFileDataStructure,System.Boolean)">
            <summary>
            Gets the filepath. Optionally sets instance property if <see cref="!:path"/> contains filename. In the most cases you want to use this without parameters
            </summary>
            <param name="path">Optional target path information, may provide property value if <see cref="F:imbSCI.Core.files.fileDataStructure.fileDataFilenameMode.propertyValue"/> mode is set</param>
            <param name="instance">Optionally, instance to set property value if <see cref="F:imbSCI.Core.files.fileDataStructure.fileDataFilenameMode.propertyValue"/> mode is used</param>
            <param name="appendPathInOutput">if set to true it will use <paramref name="path"/> as prefix to output.</param>
            <returns>filename with extension, optionally full path with prefix <paramref name="path"/></returns>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataPropertyDescriptor.SaveData(imbSCI.Core.files.fileDataStructure.IFileDataStructure,imbSCI.Core.files.folders.folderNode,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Saves the data for instance
            </summary>
            <param name="instance">The instance.</param>
            <param name="parentFolder">The parent folder.</param>
            <param name="output">The output.</param>
            <exception cref="!:imbACE.Core.core.exceptions.aceGeneralException">Type [" + memberMetaInfo.relevantTypeName + "] of property [" + memberMetaInfo.name + "] has no parameterless constructor. - null - Property [" + memberMetaInfo.name + "] is not new() type</exception>
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileDataPropertyMode.autoTextOrXml">
            <summary>
            If the property is String it will create text file, if class instance it will be XML
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileDataPropertyOptions.textDescription">
            <summary>
            The text description: creates additional descriptive text file
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileDataPropertyOptions.itemAsFile">
            <summary>
            Works for List and Dictionary: index or key is added to defined filename prefix, each item is saved as separate file
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataStructure.folder">
            <summary>
            Parent folder or it's own folder
            </summary>
            <value>
            The folder.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.fileDataStructure.fileDataStructure.descriptor">
            <summary>
            Meta information about this file data structure
            </summary>
            <value>
            The descriptor.
            </value>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructure.SetFolderDescription(System.Boolean,imbSCI.Core.data.aceAuthorNotation)">
            <summary>
            Sets the folder description
            </summary>
            <param name="generateReadme">If true it will call <see cref="!:folderNode.generateReadmeFiles(aceAuthorNotation, string)"/> after description set.</param>
            <param name="notation">Information on author or application</param>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructure.CustomFolderDescriptionLines">
            <summary>
            OVERIDE THIS TO PROVIDE ADDITIONAL FILE-FOLDER DESCRIPTION
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructure.Save(imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Saves this data structure
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructure.OnLoaded">
            <summary>
            Called when object is loaded
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructure.OnBeforeSave">
            <summary>
            Called when before saving the data structure
            </summary>
        </member>
        <member name="T:imbSCI.Core.files.fileDataStructure.fileDataStructureDescriptor">
            <summary>
            Descriptor for class implementing <see cref="T:imbSCI.Core.files.fileDataStructure.IFileDataStructure"/> interface. Metadata are defined with <see cref="T:imbSCI.Core.files.fileDataStructure.fileStructureAttribute"/>
            </summary>
            <seealso cref="T:imbSCI.Core.files.fileDataStructure.fileDataDescriptorBase" />
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureDescriptor.LoadDataStructure(System.String,imbSCI.Core.files.folders.folderNode,imbSCI.Core.files.fileDataStructure.IFileDataStructure,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the data structure.
            </summary>
            <param name="path">The path.</param>
            <param name="parentFolder">The parent folder.</param>
            <param name="instance">The instance.</param>
            <param name="output">The output.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Can't have File Data Structure loaded if no file structure mode specified</exception>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureDescriptor.DeleteDataStructure(imbSCI.Core.files.fileDataStructure.IFileDataStructure,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Deletes the data structure file, where filepath is determined using the <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataStructureDescriptor"/> of <see cref="T:imbSCI.Core.files.fileDataStructure.IFileDataStructure"/> instance specified.
            </summary>
            <param name="instance">The instance.</param>
            <param name="output">The output.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Can't have File Data Structure loaded if no file structure mode specified</exception>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureDescriptor.SaveDataStructure(imbSCI.Core.files.fileDataStructure.IFileDataStructure,imbSCI.Core.files.folders.folderNode,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Saves the data structure: its properties marked with <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataAttribute"/> attribute and it self
            </summary>
            <param name="instance">The instance that has to be saved</param>
            <param name="parentFolder">The parent folder in which this instance will be saved - if not specified the application current folder is used</param>
            <param name="output">Logger</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Can't have File Data Structure loaded if no file structure mode specified</exception>
        </member>
        <member name="T:imbSCI.Core.files.fileDataStructure.fileDataStructureExtensions">
            <summary>
            Methods used via <see cref="T:imbSCI.Core.files.fileDataStructure.IFileDataStructure"/> interface
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureExtensions.FileDataStructureError(System.String,imbSCI.Core.files.folders.folderNode,imbSCI.Core.reporting.ILogBuilder,System.Exception,imbSCI.Core.files.fileDataStructure.IFileDataStructure)">
            <summary>
            Files the data structure error.
            </summary>
            <param name="message">The message.</param>
            <param name="folder">The folder.</param>
            <param name="logger">The logger.</param>
            <param name="ex">The ex.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureExtensions.GetFileDataStructureDescriptor(imbSCI.Core.files.fileDataStructure.IFileDataStructure)">
            <summary>
            Gets the file data structure descriptor.
            </summary>
            <param name="dataStructure">The data structure.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureExtensions.GetFileDataStructureDescriptor``1">
            <summary>
            Gets the file data structure descriptor for class implementing <see cref="T:imbSCI.Core.files.fileDataStructure.IFileDataStructure"/> interface
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureExtensions.GetExtension(imbSCI.Core.files.fileDataStructure.fileDataPropertyMode)">
            <summary>
            Gets the file extension.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureExtensions.LoadDataStructure``1(System.String,imbSCI.Core.files.folders.folderNode,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the data structure from path. Use path with file name if <see cref="F:imbSCI.Core.files.fileDataStructure.fileDataFilenameMode.propertyValue" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <param name="parentFolder">The parent folder.</param>
            <param name="output">The output.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Can't have File Data Structure loaded if no file structure mode specified
            or
            JSON not implemented yet
            or
            binary file not implemented yet</exception>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileDataStructureExtensions.DeleteDataStructure``1(``0,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Deletes the data structure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataStructure">The data structure.</param>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.fileStructureAttribute.#ctor(System.String,imbSCI.Core.files.fileDataStructure.fileStructureMode,imbSCI.Core.files.fileDataStructure.fileDataFilenameMode,imbSCI.Core.files.fileDataStructure.fileDataPropertyOptions)">
            <summary>
            Defining <see cref="T:imbSCI.Core.files.fileDataStructure.fileDataStructureDescriptor"/> that uses propertyValue as folder name
            </summary>
            <param name="__nameOrPath">The name or path.</param>
            <param name="__mode">The mode.</param>
            <param name="__filenameMode">The filename mode.</param>
            <param name="__options">The options.</param>
        </member>
        <member name="F:imbSCI.Core.files.fileDataStructure.fileStructureMode.subdirectory">
            <summary>
            FileDataStructure is saved in its own subdirectory, and inside there is serialized object with name same as classname
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.IFileDataStructure.SetFolderDescription(System.Boolean,imbSCI.Core.data.aceAuthorNotation)">
            <summary>
            Sets description for the folder
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.IFileDataStructure.OnLoaded">
            <summary>
            Called when object is loaded
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileDataStructure.IFileDataStructure.OnBeforeSave">
            <summary>
            Called before saving the data structure
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:imbSCI.Core.files.fileDataStructure.NamespaceDoc" -->
        <member name="T:imbSCI.Core.files.filepath">
            <summary>
            Information about filepath
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.filepath.toPath(System.String,System.Data.PropertyCollection)">
            <summary>
            Returns the path with data applied
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.files.filepath.isRooted">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.files.filepath.flags">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.files.filepath.filename">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.files.filepath.extension">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.files.filepath.directoryPath">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.files.fileTools">
            <summary>
            Some easy file tools
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.fileTools.DeleteFolder(imbSCI.Core.files.folders.folderNode)">
            <summary>
            Deletes the folder.
            </summary>
            <param name="di">The di.</param>
        </member>
        <member name="M:imbSCI.Core.files.fileTools.DeleteFolder(System.IO.DirectoryInfo)">
            <summary>
            Deletes the folder, including all files inside
            </summary>
            <param name="di">The di.</param>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.etc">
            <summary>
            configuration files, external media resources
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.var">
            <summary>
            logs, crash info, backup files
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.lib">
            <summary>
            script/job/task presets - categorised by folder structure
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.bin">
            <summary>
            contins external tools: text editor, html viewer, image viewer etc.
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.usr">
            <summary>
            user projects/jobs
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.tmp">
            <summary>
            temporary files that are safe to be deleted
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.root">
            <summary>
            root folder
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.source">
            <summary>
            folder sa fajlovima koji treba da se obrade
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.result">
            <summary>
            folder sa rezultatom - obradjeni
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.aceFolderType.notChanged">
            <summary>
            folder sa neobradjenim - jer ne ispunjavaju uslov
            </summary>
        </member>
        <member name="T:imbSCI.Core.files.folders.folderNode">
            <summary>
            Subfolder in the <see cref="T:imbSCI.Core.files.folders.folderStructure"/>
            </summary>
            <seealso cref="T:imbSCI.Data.data.imbBindable" />
            <seealso cref="!:imbACE.Core.files.folders.IFolderNode" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String, imbACE.Core.files.folders.folderNode&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.ScanForResources(System.String)">
            <summary>
            Returns index with found xml files
            </summary>
            <param name="searchString">The search string.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.#ctor">
            <summary>
            Refers to the current directory of application
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.files.folders.folderNode"/> class.
            </summary>
            <param name="__name">The name.</param>
            <param name="__caption">The caption.</param>
            <param name="__description">The description.</param>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.Add(System.Enum,System.String,System.String)">
            <summary>
            Creates new folder node as subdirectory
            </summary>
            <param name="nameEnum">The name enum.</param>
            <param name="__caption">The caption.</param>
            <param name="__description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.Add(imbSCI.Core.files.folders.folderNode)">
            <summary>
            Nests the specified folder node into this instance
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.Add(System.String,System.String,System.String)">
            <summary>
            Adds new node or nodes to correspond to specified path or name. <c>pathOrName</c> can be path like: path1\\path2\\path3
            </summary>
            <remarks>
            If directory under specified path already exists, it will update its <see cref="P:imbSCI.Core.files.folders.folderNode.caption"/> and <see cref="P:imbSCI.Core.files.folders.folderNode.description"/> if these are empty, and return the existing node.
            </remarks>
            <param name="pathOrName">Name of the path or.</param>
            <param name="__caption">The caption - display name of the folder</param>
            <param name="__description">The description - description about the folder</param>
            <returns>Newly created or existing directory node</returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.AttachSubfolders(System.String,System.Boolean,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Scans the File System for unregistered sub directories at this folder, and returns newly registered ones.
            </summary>
            <param name="searchPattern">The search pattern - to match subdires names.</param>
            <param name="forceScan">if set to <c>true</c> it will force scan of readme file, that will pick up folder description and registered files.</param>
            <param name="attachSubdirectories">if set to <c>true</c> it will run the procedure recursevly over complete directory tree.</param>
            <param name="logger">The logger - to send debug information.</param>
            <returns>List of all previously unregistered subfolders</returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.Attach(System.String,System.String,System.String,System.Boolean,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Attaches sub directory, sets <see cref="P:imbSCI.Core.files.folders.folderNode.caption"/> and <see cref="P:imbSCI.Core.files.folders.folderNode.description"/>. If these are not specified, it will scan the directory for readme file. <see cref="M:imbSCI.Core.files.folders.folderNode.ScanReadMe(imbSCI.Core.reporting.ILogBuilder)"/>
            </summary>
            <param name="directory">The subdirectory name.</param>
            <param name="__caption">The caption.</param>
            <param name="__description">The description.</param>
            <param name="forceScan">if set to <c>true</c> it will force readme file scan <see cref="M:imbSCI.Core.files.folders.folderNode.ScanReadMe(imbSCI.Core.reporting.ILogBuilder)"/>.</param>
            <param name="autoCreate">if set to <c>true</c> it will create the directory, if not existing already.</param>
            <param name="logger">The logger.</param>
            <returns>Reference on newly attached directory, or null if it wasn't found nor created</returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.Attach(System.IO.DirectoryInfo,System.String,System.String,System.Boolean,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Attaches sub directory, sets <see cref="P:imbSCI.Core.files.folders.folderNode.caption"/> and <see cref="P:imbSCI.Core.files.folders.folderNode.description"/>. If these are not specified, it will scan the directory for readme file. <see cref="M:imbSCI.Core.files.folders.folderNode.ScanReadMe(imbSCI.Core.reporting.ILogBuilder)"/>
            </summary>
            <param name="directory">The directory.</param>
            <param name="__caption">The caption.</param>
            <param name="__description">The description.</param>
            <param name="forceScan">if set to <c>true</c> it will force readme file scan <see cref="M:imbSCI.Core.files.folders.folderNode.ScanReadMe(imbSCI.Core.reporting.ILogBuilder)"/>.</param>
            <param name="autoCreate">if set to <c>true</c> it will create the directory, if not existing already.</param>
            <param name="logger">The logger.</param>
            <returns>Reference on newly attached directory, or null if it wasn't found nor created</returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.ScanReadMe(imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Searches for readme file (<see cref="F:imbSCI.Core.files.folders.folderNode.directory_readme_filename"/>) in this folder and extracts: <see cref="P:imbSCI.Core.files.folders.folderNode.caption"/>, <see cref="P:imbSCI.Core.files.folders.folderNode.description"/> and list of files
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.items">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.Contains(System.String)">
            <summary>
            Determines whether it has a subdirectory under specified key. Important: it only accounts for already registered filesystem entries. Check: <see cref="M:imbSCI.Core.files.folders.folderNode.Attach(System.IO.DirectoryInfo,System.String,System.String,System.Boolean,System.Boolean,imbSCI.Core.reporting.ILogBuilder)"/>
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if [contains] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:imbSCI.Core.files.folders.folderNode._description">
            <summary>
            description/comment - objasnjenje
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.description">
            <summary>
            description/comment - objasnjenje
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.caption">
            <summary>
            Display title
            </summary>
        </member>
        <member name="F:imbSCI.Core.files.folders.folderNode._name">
            <summary>
            file system ime direktorijuma
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.name">
            <summary>
            file system ime direktorijuma
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.findFile(System.Boolean@,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Finds the file - and returns relative path
            </summary>
            <param name="found">if set to <c>true</c> [found].</param>
            <param name="partOrPattern">The part or pattern.</param>
            <param name="options">The options.</param>
            <param name="returnRelative">if set to <c>true</c> [return relative].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.findFile(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Finds the file - and returns relative path. If not found returns emptry string
            </summary>
            <param name="partOrPattern">The part or pattern.</param>
            <param name="options">The options.</param>
            <param name="returnRelative">if set to <c>true</c> [return relative].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.findFiles(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Finds the files - returns relative paths
            </summary>
            <param name="partOrPattern">The part or pattern.</param>
            <param name="options">The options.</param>
            <param name="returnRelative">if set to <c>true</c> [return relative].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.GetOrFindFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Tries to locate files specified in inputNames if no files specified, than applies search pattern
            </summary>
            <param name="inputNames">Comma separated list of filenames, leave empty if search pattern should be used</param>
            <param name="searchPattern">The search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.findFiles(System.Collections.Generic.IEnumerable{System.String},System.IO.SearchOption)">
            <summary>
            Collects all files for all patterns
            </summary>
            <param name="partOrPatterns">The part or patterns.</param>
            <param name="options">The options.</param>
            <param name="returnRelative">if set to <c>true</c> [return relative].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.findNodeTreeMatch(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Detects subtree matches in the filesystem
            </summary>
            <param name="filePatterns">The file patterns.</param>
            <param name="min">The minimum.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.findDirectories(System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
            Finds the directories - returns relative paths
            </summary>
            <param name="partOrPattern">The part or pattern.</param>
            <param name="options">The options.</param>
            <param name="returnRelative">if set to <c>true</c> [return relative].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.createDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Creates the directory, child node and finds unique name if required
            </summary>
            <param name="nameOrPath">The proposal.</param>
            <param name="desc">The desc.</param>
            <param name="findUniqueName">if set to <c>true</c> [find unique name].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.findUniqueDirectoryName(System.String)">
            <summary>
            Finds a unique directory name, for new directory to be created
            </summary>
            <param name="proposal">The proposal.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.pathMake(System.String)">
            <summary>
            Returns properly compiled path, without file registration. This is alternative to <see cref="M:imbSCI.Core.files.folders.folderNode.pathFor(System.String,imbSCI.Data.enums.getWritableFileMode,System.String,System.Boolean)"/>
            </summary>
            <param name="filename">The filename.</param>
            <returns>Just makes path</returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.SaveText(System.String,System.String,imbSCI.Data.enums.getWritableFileMode,System.String,System.Boolean)">
            <summary>
            Saves the <c>content</c> string as text file. Returns path with filename specified. Optionally, sets <c>fileDescription</c> for directory readme generator
            </summary>
            <remarks>
            This method calls: <see cref="M:imbSCI.Core.files.folders.folderNode.pathFor(System.String,imbSCI.Data.enums.getWritableFileMode,System.String,System.Boolean)"/> and then uses <see cref="M:System.IO.File.WriteAllText(System.String,System.String)"/> to save the file.
            </remarks>
            <param name="content">The textual content to be saved</param>
            <param name="filename">The filename, if has no extension it will set .txt</param>
            <param name="mode">The mode.</param>
            <param name="fileDescription">The file description - if not specified, it will try to improvize :)</param>
            <param name="updateExistingDesc">if set to <c>true</c> it will force update if any existing file description was found. <see cref="M:imbSCI.Core.files.folders.folderNode.RegisterFile(System.String,System.String,System.Boolean)" /></param>
            <returns>
            The path
            </returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.pathFor(System.String,imbSCI.Data.enums.getWritableFileMode,System.String,System.Boolean)">
            <summary>
            Returns path with filename specified. Optionally, sets <c>fileDescription</c> for directory readme generator
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
            <param name="fileDescription">The file description - if not specified, it will try to improvize :)</param>
            <param name="updateExisting">if set to <c>true</c> it will force update if any existing file description was found. <see cref="M:imbSCI.Core.files.folders.folderNode.RegisterFile(System.String,System.String,System.Boolean)"/></param>
            <returns>The path</returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.RegisterFile(System.String,System.String,System.Boolean)">
            <summary>
            Registers the file, with description provided. Later, this description is used for <see cref="M:imbSCI.Core.files.folders.folderNode.generateReadmeFiles(imbSCI.Core.data.aceAuthorNotation,System.String,System.Int32)"/> />
            </summary>
            <param name="filename">The filename.</param>
            <param name="fileDescription">The file description.</param>
            <param name="updateExisting">if set to <c>true</c> it will force update if any existing file description was found.</param>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.deleteFiles(System.String,System.Boolean)">
            <summary>
            Deletes all files, matching the <c>selectionPattern</c> in the folder and all sub folders if <c>subfolders</c> is <c>true</c>
            </summary>
            <param name="selectionPattern">The selection pattern.</param>
            <param name="subFolders">if set to <c>true</c> [sub folders].</param>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.parent">
            <summary>
            Reference to the registered parent node (if any)
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.level">
            <summary>
            Depth level, from the root <see cref="T:imbSCI.Core.files.folders.folderNode"/> object in the hierarchy
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.root">
            <summary>
            Gets the root node in the structure
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.Item(System.Enum)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.files.folders.folderNode"/> with the specified key. If not found it will create new sub folder with <c>key</c> name
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.files.folders.folderNode"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.files.folders.folderNode"/> with the specified key. If not found it will create new sub folder with <c>key</c> name
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.files.folders.folderNode"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.generateFolderReadme(imbSCI.Core.data.aceAuthorNotation,imbSCI.Core.reporting.render.ITextRender,System.Int32)">
            <summary>
            Generates the folder readme.
            </summary>
            <param name="notation">The notation.</param>
            <param name="builder">The builder.</param>
            <param name="directoryStructureDepthLimit">The directory structure depth limit - i.e. until what subdirectory depth is described in the readme file.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.AdditionalDescriptionLines">
            <summary>
            These are additional description lines that will be inserted in readme file generated by <see cref="!:generateReadmeFiles(aceAuthorNotation, string)" />
            </summary>
            <value>
            The additional description lines.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.AdditionalFileEntries">
            <summary>
            Gets or sets the additional file entries.
            </summary>
            <value>
            The additional file entries.
            </value>
        </member>
        <member name="F:imbSCI.Core.files.folders.folderNode.directory_readme_filename">
            <summary>
            Default directory readme filename, used for <see cref="!:generateReadmeFiles(aceAuthorNotation, string)"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.generateReadmeFiles(imbSCI.Core.data.aceAuthorNotation,System.String,System.Int32)">
            <summary>
            Generates the readme files for complete folder tree
            </summary>
            <param name="notation">The notation data object</param>
            <param name="readmeFileName">Overrides the default readme file name, defined by <see cref="F:imbSCI.Core.files.folders.folderNode.directory_readme_filename" />.</param>
            <param name="directoryStructureDepthLimit">The directory structure depth limit.</param>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderNode.Count">
            <summary>
            Gets the number of registered subfolders
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.CountAll">
            <summary>
            Gets the number of all registered subfolders in full subtree depth
            </summary>
            <returns>Number of all registered subfolders - including the ones from child nodes</returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.System#Collections#Generic#IEnumerable{imbSCI#Core#files#folders#folderNode}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.Remove(System.String)">
            <summary>
            Unregisteres an subfolder from the node. It will not delete actual directory from the file system
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.System#Collections#Generic#IEnumerable{imbSCI#Data#interfaces#IObjectWithPathAndChildren}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNode.imbSCI#Data#interfaces#IObjectWithPathAndChildren#Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderNodeFileDescriptorTools.GetFileDescription(System.String)">
            <summary>
            Gets the file description.
            </summary>
            <param name="descriptionLine">The description line.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.files.folders.folderStructure">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderStructure.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.files.folders.folderStructure"/> class.
            </summary>
            <param name="__baseDirectoryPath">The base directory path - le</param>
            <param name="__caption">The caption.</param>
            <param name="__description">The description.</param>
        </member>
        <member name="M:imbSCI.Core.files.folders.folderStructure.#ctor(System.IO.DirectoryInfo,System.String,System.String,System.IO.SearchOption)">
            <summary>
            Creates new instance of structure by scanning <see cref="T:System.IO.DirectoryInfo"/> object subfolders
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="P:imbSCI.Core.files.folders.folderStructure.baseDirectoryPath">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.files.folders.SerializedXMLFileDictionary">
            <summary>
            XML resources scan result
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.folders.SerializedXMLFileDictionary.folder">
            <summary>
            Gets or sets the folder.
            </summary>
            <value>
            The folder.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.folders.SerializedXMLFileDictionary.filesByType">
            <summary>
            Gets or sets the type of the files by.
            </summary>
            <value>
            The type of the files by.
            </value>
        </member>
        <member name="M:imbSCI.Core.files.folders.SerializedXMLFileDictionary.Register(imbSCI.Core.files.folders.SerializedXMLFile)">
            <summary>
            Registers the specified x file.
            </summary>
            <param name="xFile">The x file.</param>
        </member>
        <member name="M:imbSCI.Core.files.folders.SerializedXMLFileDictionary.GetResources``1(System.String)">
            <summary>
            Gets the resources.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.folders.SerializedXMLFileDictionary.ScanFolder(imbSCI.Core.files.folders.folderNode,System.String)">
            <summary>
            Scans the folder.
            </summary>
            <param name="folder">The folder.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.files.imbFileException">
            <summary>
            Exception related to this namespace
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:imbSCI.Core.files.job.aceFileJobBase">
            <summary>
            2017: Polazna klasa za ACE radni projekat / Job. Primenjuje se na ncFileJob ali ima ulogu i u imbVeles projektu.
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.job.aceFileJobBase.name">
            <summary>
            Name for this Job - used for filename and for menu navigation
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.job.aceFileJobBase.scanFiles">
            <summary>
            Podesavanja skeniranja fajla
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.job.aceFileJobBase.processTakeSize">
            <summary>
            Number of files to be processed in one processing take; 0 and -1 will set program default
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.job.aceFileJobBase.explainJob">
            <summary>
            Generise string izvestaj o trenutnom poslu
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.files.job.aceFileToolBase`1">
            <summary>
            aceFileToolBase :: basic layer of Ace Terminal Application "kernel" (the main stuff that lib/app are doing)
            </summary>
            <remarks>
            <para>Role: access to terminal instance, job (T) management, target files managment</para>
            <para>It maintaines sultural/serialization/string reading settings</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.files.job.aceFileToolBase`1.#ctor(imbSCI.Core.files.job.IAceComponent,imbSCI.Core.interfaces.IAceLogable)">
            <summary>
            The main constructor.
            </summary>
            <param name="__terminal">AceTerminal instance</param>
        </member>
        <member name="P:imbSCI.Core.files.job.aceFileToolBase`1.currentFileList">
            <summary>
            Lista fajlova koji su selektovani
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.job.aceFileToolBase`1.currentNCFile">
            <summary>
            Current NC file loaded and processed
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.job.aceFileToolBase`1.getVersion">
            <summary>
            Returns string information about tool version
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.job.aceFileToolBase`1.scanAndBackup(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Pokrece skeniranje fajlova i vrsi backup fajlova
            </summary>
            <param name="doScan">Da li da skenira targetirano mesto?</param>
            <param name="doBackup">Da li da naprvi backup fajl</param>
            <param name="doLog"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.files.job.aceProjectToolBase`1">
            <summary>
            Basic project definition
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbSCI.Data.data.dataBindableBase" />
        </member>
        <member name="P:imbSCI.Core.files.job.aceProjectToolBase`1.component">
            <summary>
            Reference to component
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.job.aceProjectToolBase`1.jobLoadList">
            <summary>
            List of .job files saved in runtime folder
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.job.aceProjectToolBase`1.setDefaultCurrentJob(System.String)">
            <summary>
            Podesava default current job
            </summary>
            <param name="jobName"></param>
        </member>
        <member name="P:imbSCI.Core.files.job.aceProjectToolBase`1.projectFolderPath">
            <summary>
            Path to save, search and to load projects/jobs from
            </summary>
            <value>
            The project folder path.
            </value>
        </member>
        <member name="M:imbSCI.Core.files.job.aceProjectToolBase`1.scanForJobFiles">
            <summary>
            Skenira okruženje (runtime path po defaltu) za snimljene job definicije
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.files.job.IAceFileJobBase.name">
            <summary>
            Name for this Job - used for filename and for menu navigation
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.job.IAceFileJobBase.scanFiles">
            <summary>
            Podesavanja skeniranja fajla
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.job.IAceFileJobBase.processTakeSize">
            <summary>
            Number of files to be processed in one processing take; 0 and -1 will set program default
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.job.IAceFileJobBase.explainJob">
            <summary>
            Generise string izvestaj o trenutnom poslu
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.job.IAceFileJobBase.OnPropertyChanged(System.String)">
            <summary>
            Kreira event koji obaveštava da je promenjen neki parametar
            </summary>
            <remarks>
            Neće biti kreiran event ako nije spremna aplikacija: imbSettingsManager.current.isReady
            </remarks>
            <param name="name"></param>
        </member>
        <member name="T:imbSCI.Core.files.NamespaceDoc">
            <summary>
            Object serialization, <see cref="!:folderNode"/> structure, text search engines, fileDataStructure base classes 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.files.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.files.objectSerialization">
            <summary>
            Tool for easy object serialization
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.CloneViaXML``1(``0,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Creates clone of the object, using XML serialization. Only serializable properties will be set to the result object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.CloneViaBinary``1(``0,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Clones the via binary.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.ObjectToXML``1(``0)">
            <summary>
            Serialize object to XML
            </summary>
            <typeparam name="T"></typeparam>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.ObjectToXML(System.Object,System.Type)">
            <summary>
            Serializes object of provided type (to be used for interface instances
            </summary>
            <param name="data">The data.</param>
            <param name="dataType">Type of the data.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.ObjectFromXML``1(System.String,System.Type)">
            <summary>
            Unserialize object from XML
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml">The XML.</param>
            <param name="targetType">The t.</param>
            <returns>Deserialized instance, casted to specified generic type</returns>
            <exception cref="T:System.ArgumentException">Generic type T is a interface and target type was not specified - please specify argument for target type - targetType</exception>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.saveObjectToXML``1(System.String,``0,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Saves the object to XML file at specified filepath
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath">The filepath.</param>
            <param name="data">The data instance to be saved</param>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.loadObjectFromXML(System.String,System.Type,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the object from XML.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="type">The type.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.objectSerialization.loadObjectFromXML``1(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the object from XML.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filepath">The filepath.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextInMemoryBlocks">
            <summary>
            Internally used collection of text blocks <see cref="T:imbSCI.Core.files.search.fileTextInMemoryBlockUnit"/>.
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;imbSCI.Core.files.search.fileTextInMemoryBlockUnit&gt;" />
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextInMemoryBlocks.blockSize">
            <summary>
            Number of lines per one block
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextInMemoryBlocks.loadFile(System.String,System.Int32)">
            <summary>
            Loads the file from <c>filepath</c> and splits it into <see cref="T:imbSCI.Core.files.search.fileTextInMemoryBlockUnit"/>s
            </summary>
            <param name="filepath">The filepath to load</param>
            <param name="__blockSize">Size of the block, if -1 it will use standard block size as defined by: <see cref="P:imbSCI.Core.extensions.io.fileOpsBase.standardBlockSize"/>.</param>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextInMemoryBlocks.saveFile(System.String,System.Boolean)">
            <summary>
            Saves the content grom the blocks into file, on the specified file path.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="filterEmptyLines">if set to <c>true</c> it will exclude empty lines</param>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextInMemoryBlocks.Item(System.Int32)">
            <summary>
            Provides direct access to the line at <c>ln</c>. Line number is indexed to the content as a whole.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="ln">The ln.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextInMemoryBlocks.items">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextInMemoryBlockUnit">
            <summary>
            Internal use. Collection of content lines, separated into blocks.
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;System.String&gt;" />
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextInMemoryBlockUnit.lineStart">
            <summary>
            Index of the line (in original content) when this block starts
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextInMemoryBlockUnit.#ctor(System.Int32)">
            <summary>
            Initializes empty block unit, that starts at <c>__ln</c>
            </summary>
            <param name="__ln">The ln.</param>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextLineCollection">
            <summary>
            Collection of lines extracted/found in a file
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextLineCollection.CountThreadSafe">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextLineCollection.getLineNumberList">
            <summary>
            Returns the list of line numbers on which the lines were found
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextLineCollection.getLineContentList">
            <summary>
            Returns the list of matched lines
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextLineCollection.saveLineContent(System.String,imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            Saves the content of the line.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="mode">The mode.</param>
            <returns>reference to file just saved</returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextLineCollection.ToString(System.Boolean,System.String)">
            <summary>
            String representation of the matched lines
            </summary>
            <param name="showNumber">if set to <c>true</c> [show number].</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextLineCollection.ToString(imbSCI.Core.reporting.render.ITextRender,System.Boolean,System.String)">
            <summary>
            To the string.
            </summary>
            <param name="output">The output.</param>
            <param name="showNumber">if set to <c>true</c> [show number].</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextLineCollection.ToString">
            <summary>
            String representation of the matched lines with line number shown
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextLineCollection.results">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextOperater">
            <summary>
            Text file search and modification
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextOperater.filePath">
            <summary>Path of the source file</summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextOperater.file">
            <summary>Reference to the source file info</summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextOperater.memMap">
            <summary>
            Content block units - used for parallel execution
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextOperater.useMemMap">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.#ctor(System.String,System.Boolean)">
            <summary>
            Loads content from the file. Optionally uses parallel execution optimization, if <c>__useMemMap</c> is true
            </summary>
            <param name="__filePath">The path of the source content</param>
            <param name="__useMemMap">if True Enables optimization for parallel execution</param>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextOperater.estLinesInFile">
            <summary>
            Estimeted number of lines in the file
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Append(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Appends the file with lines not already contained in the file, from the specified line list
            </summary>
            <param name="lineList">The line list.</param>
            <param name="altPath">The alt path -- if specified it will create new file and will return operator for it</param>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.TakeAll">
            <summary>
            Takes all lines of the source file
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Take(System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Takes the specified number of lines from the file
            </summary>
            <param name="linesToTake">The lines to take.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Split(System.String,imbSCI.Core.files.search.lineEvaluator,System.Boolean)">
            <summary>
            Splits source file content into separate results set according to the evaluator result
            </summary>
            <param name="filepathFormat">The filepath format.</param>
            <param name="evaluator">The evaluator. if result is empty then line is not taken from the source list</param>
            <param name="autoremove">if set to <c>true</c> it will remove all lines contained in the output <see cref="T:imbSCI.Core.files.search.fileTextSplitResultSet"/></param>
            <returns>Parts that are separated from the source content</returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Remove(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Removes the specified line number list.
            </summary>
            <param name="lineNumList">The line number list.</param>
            <param name="altPath">If specified output is written to the path, original file is not changed</param>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Remove(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Removes all lines matching the lineList
            </summary>
            <param name="lineList">the list of lines to remove</param>
            <param name="altPath">If specified output is written to the path, original file is not changed</param>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Search(imbSCI.Core.files.search.fileTextLineCollection,System.String,System.Boolean,System.Int32,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified cached lines.
            </summary>
            <param name="cachedLines">The cached lines.</param>
            <param name="__needle">The needle.</param>
            <param name="useRegex">if set to <c>true</c> [use regex].</param>
            <param name="limitResult">The limit result.</param>
            <param name="regexOptions">The regex options.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Search(System.String,System.Boolean,System.Int32,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches lines with specified needle and returns resulting collection
            </summary>
            <param name="__needle">The needle to search for or regex expression to test lines against</param>
            <param name="useRegex">if set to <c>true</c> it will interpret the needle as regex</param>
            <param name="limitResult">Result size limit - it stops the search procedure once the limit is reached. Leave it -1 to disable the limit</param>
            <param name="regexOptions">The regex options, used in combination with <c>useRegex</c> = true</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperater.Search(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Search file with multiple needles - performs search with multiple needles.
            </summary>
            <param name="__needles">Set of needles or regex expressions to evaluate lines with</param>
            <param name="useRegex">if set to <c>true</c> it will interpret the needle as regex</param>
            <param name="comparison">The comparison.</param>
            <param name="regexOptions">The regex options, used in combination with <c>useRegex</c> = true</param>
            <param name="limitResult">Result size limit (per needle) - it stops the search procedure once the limit is reached. Leave it -1 to disable the limit</param>
            <returns>Set of results</returns>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextOperaterMulti">
            <summary>
            Collection of <see cref="T:imbSCI.Core.files.search.fileTextOperater"/> instances, used when multiple files should be searched
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String, imbSCI.Core.files.search.fileTextOperater&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperaterMulti.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Populates it self with <see cref="T:imbSCI.Core.files.search.fileTextOperater"/>s for each file path specified in the <c>filepaths</c> argument
            </summary>
            <param name="filepaths">The filepaths.</param>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextOperaterMulti.items">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextOperaterWorker">
            <summary>
            Helper class used for parallelization
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperaterWorker.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Instance constructor, when used for multiple needle search
            </summary>
            <param name="__needles">The needles.</param>
            <param name="useRegex">if set to <c>true</c> [use regex].</param>
            <param name="regexOptions">The regex options.</param>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextOperaterWorker.#ctor(System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Instance constructor, when used for single needle search
            </summary>
            <param name="__needle">The needle.</param>
            <param name="useRegex">if set to <c>true</c> [use regex].</param>
            <param name="regexOptions">The regex options.</param>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextOperationCoordinate">
            <summary>
            Text coordinate axis
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSearchMultiSourceSet.items">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextSearchResult">
            <summary>
            Results for one needle
            </summary>
            <seealso cref="T:imbSCI.Core.files.search.fileTextLineCollection" />
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSearchResult.useRegex">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSearchResult.resultLimitTriggered">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSearchResult.needle">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSearchResult.filePath">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextSearchResultSet">
            <summary>
            Set of results for IEnumerable query
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;imbACE.Core.files.search.fileTextSearchResult&gt;" />
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSearchResultSet.resultSet">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSearchResultSet.CountThreadSafe">
            <summary>
            Gets the count thread safe.
            </summary>
            <value>
            The count thread safe.
            </value>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextSearchResultSet.getLines(System.Boolean)">
            <summary>
            Gets the distinct lines
            </summary>
            <param name="distinct">if set to <c>true</c> it will return only distinct lines</param>
            <returns>List of resulting lines</returns>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextSearchResultSet.getLineNumbers(System.Boolean)">
            <summary>
            Gets the line numbers.
            </summary>
            <param name="distinct">if set to <c>true</c> [distinct].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.files.search.fileTextSplitResultSet">
            <summary>
            Result set of file slitting operation
            </summary>
            <seealso cref="T:imbSCI.Core.files.search.fileTextSearchResultSet" />
        </member>
        <member name="P:imbSCI.Core.files.search.fileTextSplitResultSet.filepathFormat">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.files.search.fileTextSplitResultSet.saveSlits(System.String,imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            Saves the slits.
            </summary>
            <param name="pathPrefix">The path prefix.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:imbSCI.Core.files.search.lineEvaluator">
            <summary>
            External delegate used for custom text line evaluation, used to split file content into named groups.
            </summary>
            <param name="lineInput">Input line sent for classification</param>
            <returns>Name of the group to classify the input line into. Returns "none" if the line should be excluded.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:imbSCI.Core.files.search.NamespaceDoc" -->
        <member name="T:imbSCI.Core.files.unit.fileunit">
            <summary>
            Represents one file on harddrive
            </summary>
            <seealso cref="T:imbSCI.Data.data.changeBindableBase" />
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.MergeFiles(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Merges the files with and/or into <c>pathForResult</c> file
            </summary>
            <param name="pathForResult">The path for result.</param>
            <param name="filePaths">The file paths.</param>
            <param name="uniqueLines">if set to <c>true</c> [unique lines].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.MergeFiles(System.String,System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Boolean)">
            <summary>
            Merges the files with and/or into <c>pathForResult</c> file
            </summary>
            <param name="pathForResult">The path for result.</param>
            <param name="files">The files.</param>
            <param name="uniqueLines">if set to <c>true</c> [unique lines].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.files.unit.fileunit"/> class.
            </summary>
            <param name="__path">The path.</param>
        </member>
        <member name="P:imbSCI.Core.files.unit.fileunit.lastWrite">
            <summary>
            last file write time
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.getOperater(System.Boolean)">
            <summary>
            Gets the text file search operater
            </summary>
            <param name="useMemMap">if set to <c>true</c> [use memory map].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.getContent(System.Boolean)">
            <summary>
            Gets the content as single string
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.getContentLines(System.Boolean)">
            <summary>
            Gets the content lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.setContent(System.String)">
            <summary>
            Sets the content - overwriting any existing
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.setContentLines(System.Collections.Generic.IList{System.String})">
            <summary>
            Sets the content lines - overwriting any existing
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:imbSCI.Core.files.unit.fileunit.contentChanged">
            <summary>
            Gets TRUE if the content was changed after the last load
            </summary>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.SaveAs(System.String,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Saves to new path
            </summary>
            <param name="newPath">The new path.</param>
            <param name="mode">The mode.</param>
            <param name="loger">The loger.</param>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.getByteSize">
            <summary>
            Gets the size of the file in the bytes;
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.getLineCount">
            <summary>
            Gets the line count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.files.unit.fileunit.preloadContent">
            <summary>
            Preloads the content.
            </summary>
        </member>
        <member name="P:imbSCI.Core.files.unit.fileunit.contentLines">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.files.unit.fileunit.path">
            <summary>
            The path of the file
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:imbSCI.Core.files.unit.fileunit.info">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.imbSCICoreManager">
            <summary>
            Static container for settings and other global information
            </summary>
        </member>
        <member name="M:imbSCI.Core.imbSCICoreManager.GetTestMessageContent">
            <summary>
            [no real use, just internal testing I-ve used]
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.interfaces.IAceMathUnitDecadic.decadeBase">
            <summary>
            Type of basic unit for the decade system
            </summary>
            <value>
            The decade base.
            </value>
        </member>
        <member name="T:imbSCI.Core.interfaces.IDisplayInfo">
            <summary>
            Osnovni podaci za prikaz
            </summary>
        </member>
        <member name="T:imbSCI.Core.interfaces.IDisplayInfoExtended">
            <summary>
            Prosireni podaci prikaza
            </summary>
        </member>
        <member name="T:imbSCI.Core.interfaces.IMeasure`1">
             <summary>
            
             </summary>
             <typeparam name="TValue">The type of the value.</typeparam>
             <seealso cref="T:imbSCI.Core.interfaces.IMeasure" />
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasure`1.alarmCriteria">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasure`1.defValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasure`1.valueRange">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasure`1.primValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasure`1.baseValue">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.interfaces.IMeasure">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Core.interfaces.IMeasure" />
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasure.isValuePlural">
            <summary>
            Gets a value indicating whether the current value is plural.
            </summary>
            <value>
            <c>true</c> if this instance is value plural; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.interfaces.IMeasure.convertToOptimalUnitLevel">
            <summary>
            TRUE if current value is in alarmant value range
            </summary>
        </member>
        <member name="M:imbSCI.Core.interfaces.IMeasure.ToString">
            <summary>
            Returns a string that represents the meassure - according to
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:imbSCI.Core.interfaces.IMeasure.GetContent(imbSCI.Core.math.measureSystem.enums.measureToStringContent)">
            <summary>
            Gets the informational content about this measure
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasureBasic.isAlarmTurnedOn">
            <summary>
            If true it will use alarm range to fire alarm
            </summary>
        </member>
        <member name="M:imbSCI.Core.interfaces.IMeasureBasic.GetFormatForValue(System.Boolean)">
            <summary>
            Gets the format for value or value-and-unit if forValueAndUnit is TRUE.
            </summary>
            <param name="forValueAndUnit">if set to <c>true</c> returns format for value and unit.</param>
            <returns>Format string</returns>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMeasureBasic.isValueDefault">
            <summary>
            TRUE if current value is same as default value specified with constructor
            </summary>
            <value>
            <c>true</c> if this instance is value default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbSCI.Core.interfaces.IMetaContentNested">
            <summary>
            Interaface for all metaContent model classes
            </summary>
        </member>
        <member name="M:imbSCI.Core.interfaces.IMetaContentNested.Count">
            <summary>
            Number of child items
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.interfaces.IMetaContentNested.sortChildren">
            <summary>
            Sorts children in ascending order using id/priority information
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.isThisRootPage">
            <summary>
            checks if this instance is page closest to document
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.isThisRoot">
            <summary>
            checks if this instance is DocumentSet
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.isThisDocument">
            <summary>
            checks if this instance is Document
            </summary>
        </member>
        <member name="M:imbSCI.Core.interfaces.IMetaContentNested.setVisibility(System.Boolean)">
            <summary>
            Is visibility changed?
            </summary>
            <param name="newValue">Value of visibility to be set</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.path">
            <summary>
            Path from root object to this object - including this
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.root">
            <summary>
            Reference to top parent object
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.context">
            <summary>
            reference to root context reference
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.page">
            <summary>
            Reference to containing page -- first page in parent hierarchy
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.document">
            <summary>
            Reference to containing document -- first document in parent hierarchy
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.parent">
            <summary>
            reference to item parent object
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.content">
            <summary>
            Text content of the meta item. For headers it is written below description block. For footers it comes before bottomline
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.priority">
            <summary>
            Priority defines order of blocks
            </summary>
        </member>
        <member name="P:imbSCI.Core.interfaces.IMetaContentNested.visible">
            <summary>
            Controls render visibility of the content block
            </summary>
        </member>
        <member name="T:imbSCI.Core.interfaces.NamespaceDoc">
            <summary>
            <para>Shared interfaces of the imbSCI middle layer</para>
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.aggregation.dataPointAggregationAspect.subSetOfRows">
            <summary>
            Computes falue from sub set of a row
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.aggregation.dataPointAggregationDefinition.lateralRightColumns">
            <summary>
            Defines if some columns should be created for
            </summary>
            <value>
            The lateral columns.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.aggregation.dataPointAggregationDefinition.subSetOfRows">
            <summary>
            Grouped by a column
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.aggregation.dataPointAggregationDefinition.multiTableType">
            <summary>
            Type to be used when multiple tables are aggregated one on top of other
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.aggregation.dataPointAggregationDefinition.multiRowType">
            <summary>
            What types of aggregation it allows for multiRow scenario (on bottom of table)
            </summary>
            <value>
            The type of the multi row.
            </value>
        </member>
        <member name="F:imbSCI.Core.math.aggregation.dataPointAggregationType.count">
            <summary>
            The count of dataPoints (non null) sent to the aggregation
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.aggregation.dataPointAggregationType.clear">
            <summary>
            Shows the column but writes nothing
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.aggregation.dataPointAggregationType.groupCaption">
            <summary>
            Value will be caption for column in multitable scenario
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.aggregation.NamespaceDoc">
            <summary>
            Data structures and enumerations used with <see cref="T:imbSCI.Core.attributes.imbAttribute"/>s to define data aggegations, used in reporting
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.math.aggregation.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="M:imbSCI.Core.math.analysisExtensions.ClipToP(System.Double,System.Double,System.Double)">
            <summary>
            Clips to p: from -1 to 1
            </summary>
            <param name="input">The input.</param>
            <param name="minLimit">The minimum limit.</param>
            <param name="maxLimit">The maximum limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.analysisExtensions.ClipToK(System.Double,System.Double,System.Double)">
            <summary>
            Clips to k: from 0 to 1
            </summary>
            <param name="input">The input.</param>
            <param name="minLimit">The minimum limit.</param>
            <param name="maxLimit">The maximum limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.analysisExtensions.GetRatio(System.Collections.IList,System.Collections.IList,System.Double,System.Double)">
            <summary>
            Gets the ratio of Counts between two <see cref="T:System.Collections.IList"/> collections
            </summary>
            <param name="part">The part.</param>
            <param name="whole">The whole.</param>
            <param name="ifPartIsZero">If part is zero.</param>
            <param name="ifWholeIsZeroAndPartNot">If whole is zero and part not.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.analysisExtensions.GetRatio(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zero-input safe ratio calculation: part / whole
            </summary>
            <param name="part">The part - upper part of fraction equasion</param>
            <param name="whole">The whole - lower part of fraction equasion</param>
            <param name="ifPartIsZero">Value for case when <c>part</c> is 0</param>
            <param name="ifWholeIsZeroAndPartNot">Value for case when <c>whole</c> is 0 but part is not zero</param>
            <returns>Ratio from 0 to 1</returns>
        </member>
        <member name="M:imbSCI.Core.math.analysisExtensions.GetRatio(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Zero-input safe ratio calculation: part / whole
            </summary>
            <param name="part">The part - upper part of fraction equasion</param>
            <param name="whole">The whole - lower part of fraction equasion</param>
            <param name="ifPartIsZero">Value for case when <c>part</c> is 0</param>
            <param name="ifWholeIsZeroAndPartNot">Value for case when <c>whole</c> is 0 but part is not zero</param>
            <returns>Ratio from 0 to 1</returns>
        </member>
        <member name="M:imbSCI.Core.math.analysisExtensions.GetRatio(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Zero-input safe ratio calculation: part / whole
            </summary>
            <param name="part">The part - upper part of fraction equasion</param>
            <param name="whole">The whole - lower part of fraction equasion</param>
            <param name="ifPartIsZero">Value for case when <c>part</c> is 0</param>
            <param name="ifWholeIsZeroAndPartNot">Value for case when <c>whole</c> is 0 but part is not zero</param>
            <returns>Ratio from 0 to 1</returns>
        </member>
        <member name="T:imbSCI.Core.math.angle">
            <summary>
            Holds an angle as both radians and degrees, with conversions
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.angle.#ctor">
            <summary>
            Blank constructor. Remember to manually set some data to the properties!
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.angle.isUndefined">
            <summary>
            Is angle value left undefined
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.angle.#ctor(System.Double,imbSCI.Core.math.angle.Type)">
            <summary>
            Construct an angle with either a degree or a radian value
            </summary>
            <param name="input">angle value</param>
            <param name="angleType">Specify whether input is in radians or degrees</param>
        </member>
        <member name="M:imbSCI.Core.math.angle.#ctor(imbSCI.Core.math.angle.Preset)">
            <summary>
            Quickly construct a common angle
            </summary>
            <param name="preset">Choose angle</param>
        </member>
        <member name="P:imbSCI.Core.math.angle.Degrees">
            <summary>
            angle in degrees
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.angle.Radians">
            <summary>
            angle in radians between -pi to pi
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.angle.Radians2pi">
            <summary>
            angle in radians, modified to fall between 0 and 2pi. Read-only.
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.angle.Degrees360">
            <summary>
            Value in degrees between 0 and 360. Read-only.
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.angle.Preset">
            <summary>
            Presets for quick setup of angle constructor
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.angle.ToRadians(System.Double)">
            <summary>
            Convert an input angle of degrees to radians. Does not affect any properties in this class - set properties instead.
            </summary>
            <param name="val">Input in degrees</param>
            <returns>Value in radians</returns>
        </member>
        <member name="M:imbSCI.Core.math.angle.ToDegrees(System.Double)">
            <summary>
            Convert an input angle of radians into degrees. Does not affect any properties in this class - set properties instead.
            </summary>
            <param name="val">Input in radians</param>
            <returns>Value in degrees</returns>
        </member>
        <member name="M:imbSCI.Core.math.angle.FixAngle(System.Double,imbSCI.Core.math.angle.Type)">
            <summary>
            Fixes an angle to between 0 and 360 or 2pi.
            </summary>
            <param name="val">Input angle</param>
            <param name="type">Specify whether the input angle is radians or degrees</param>
            <returns>The angle, fixed to between 0 and 360 or 0 and 2pi</returns>
        </member>
        <member name="M:imbSCI.Core.math.angle.updateFixedangles">
            <summary>
            Looks at the radians and degrees properties, and updates their respective fixed angles
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbSCI.Core.math.angle.FixAngles" -->
        <member name="M:imbSCI.Core.math.angle.op_Addition(imbSCI.Core.math.angle,imbSCI.Core.math.angle)">
            <summary>
            Returns the sum of two angles
            </summary>
            <param name="a1">First angle</param>
            <param name="a2">Second angle</param>
            <returns>An angle constructed from the radian sum of the input angles</returns>
        </member>
        <member name="M:imbSCI.Core.math.angle.op_Subtraction(imbSCI.Core.math.angle,imbSCI.Core.math.angle)">
            <summary>
            Returns the difference between two angles
            </summary>
            <param name="a1">First angle</param>
            <param name="a2">Second angle</param>
            <returns>An angle constructed from the value that is the first angle minus the second angle</returns>
        </member>
        <member name="M:imbSCI.Core.math.angle.op_Division(imbSCI.Core.math.angle,imbSCI.Core.math.angle)">
            <summary>
            Returns the exact division between two angles (i.e. how many times does the second angle fit into the first)
            </summary>
            <param name="a1">Numerator angle</param>
            <param name="a2">Dedominator angle</param>
            <returns>A new angle constructed from the value that is the first angle in radians divided by the second angle in radians</returns>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationEval">
            <summary>
            Entry for <see cref="T:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet"/>, keeping performance records for a label/category/class
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEval.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.classificationMetrics.classificationEval"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEval.#ctor(System.String)">
            <summary>
            Sets the name for metric struct
            </summary>
            <param name="_name">The name.</param>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.name">
            <summary>
            Optional name assigned to this metric structure
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.positives">
            <summary>
            Gets or sets the positives.
            </summary>
            <value>
            The positives.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.truePositives">
            <summary>
            T_p - prediction was [true], and truth table said [true]
            </summary>
            <value>
            The true positives.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.falsePositives">
            <summary>
            F_p - prediction was [true], but truth table said [false]
            </summary>
            <value>
            The false positives.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.falseNegatives">
            <summary>
            F_n - prediction was [false], but the truth table said [true]
            </summary>
            <value>
            The false negatives.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.trueNegatives">
            <summary>
            T_n - prediction was [false], and the truth table said [false]
            </summary>
            <value>
            The true negatives.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.correct">
            <summary>
            Gets or sets the correct: when used for simple precision computation
            </summary>
            <value>
            The correct.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.wrong">
            <summary>
            Gets or sets the wrong: when used for simple precission computation
            </summary>
            <value>
            The wrong.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetError">
            <summary>
            Gets the Error measure: ( Fp + Fn ) / ( Tp + Tn + Fp + Fn)
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetAccuracy">
            <summary>
            Gets the Accuracy measure: ( Tp + Tn ) / ( Tp + Tn + Fp + Fn)
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetF1">
            <summary>
            Gets the F1 measure: harmonic mean of <see cref="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetPrecision"/> and <see cref="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetRecall"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetPrecision">
            <summary>
            Gets the precision: Tp / (Tp + Fp)
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetRecall">
            <summary>
            Gets the recall: Tp / (Tp + Fn)
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEval.targets">
            <summary>
            Gets the targets.
            </summary>
            <value>
            The targets.
            </value>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet">
            <summary>
            Classification performance records dictionary, keeping records for each category/label separatly
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String, imbSCI.Core.math.classificationMetrics.classificationEval&gt;&gt;" />
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.name">
            <summary>
            Optional name for the classification metric set
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.#ctor(System.String)">
            <summary>
            Constructor with name assigment
            </summary>
            <param name="_name">The name.</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs eval metrics with categories specified <c>labels</c>
            </summary>
            <param name="_name">The name.</param>
            <param name="labels">The labels.</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.AddRecord(System.String,System.String)">
            <summary>
            Adds the record in the confusion matrix
            </summary>
            <param name="testResult">Class label - What was the prediction?</param>
            <param name="truth">Class label - What the truth table said?</param>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.Item(System.String)">
            <summary>
            Gets a <see cref="T:imbSCI.Core.math.classificationMetrics.classificationEval"/> for the specified category name, if not known so far - creates new <see cref="T:imbSCI.Core.math.classificationMetrics.classificationEval"/> for it
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.math.classificationMetrics.classificationEval"/>.
            </value>
            <param name="categoryName">The name of category.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetAllEntries">
            <summary>
            Gets all entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetAllCategories">
            <summary>
            Gets all category names
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetError(imbSCI.Core.math.classificationMetrics.classificationMetricComputation)">
            <summary>
            Gets the Error measure, computed in respect to the <c>method</c> specified
            </summary>
            <param name="method">The method of Error measure computation.</param>
            <seealso cref="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetError"/>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetAccuracy(imbSCI.Core.math.classificationMetrics.classificationMetricComputation)">
            <summary>
            Gets the Accuracy measure, computed in respect to the <c>method</c> specified
            </summary>
            <param name="method">The method of Accuracy measure computation.</param>
            <seealso cref="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetAccuracy"/>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetPrecision(imbSCI.Core.math.classificationMetrics.classificationMetricComputation)">
            <summary>
            Gets the Precission measure, computed in respect to the <c>method</c> specified
            </summary>
            <param name="method">The method of Precission measure computation.</param>
            <seealso cref="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetPrecision"/>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetRecall(imbSCI.Core.math.classificationMetrics.classificationMetricComputation)">
            <summary>
            Gets the Recall measure, computed in respect to the <c>method</c> specified
            </summary>
            <param name="method">The method of Recall measure computation.</param>
            <seealso cref="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetRecall"/>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetF1(imbSCI.Core.math.classificationMetrics.classificationMetricComputation)">
            <summary>
            Gets the F1 measure, computed in respect to the <c>method</c> specified
            </summary>
            <param name="method">The method of F1 measure computation.</param>
            <seealso cref="M:imbSCI.Core.math.classificationMetrics.classificationEval.GetF1"/>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet.GetSummary(System.String)">
            <summary>
            Gets the summary metrics, for all categories. Optionally, a descriptive name can be specified.
            </summary>
            <param name="structName">Name of the metric structure.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationMetricComputation">
            <summary>
            Type of classification metric computation
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.classificationMetrics.classificationMetricComputation.microAveraging">
            <summary>
            The micro averaging: result is computed from sum of metrics for each category in the set. So called: "global" approach
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.classificationMetrics.classificationMetricComputation.macroAveraging">
            <summary>
            The macro averaging: result is average of the same measure computed on level of category. So called: "local" approach
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationReport">
            <summary>
            Base class for classification reporting
            </summary>
            <seealso cref="T:imbSCI.Core.math.classificationMetrics.IClassificationReport" />
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReport.Load(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the classification report
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="log">The log.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReport.#ctor(imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet,imbSCI.Core.math.classificationMetrics.classificationMetricComputation)">
            <summary>
            Creates the report from metrics given, using averaging computation specified
            </summary>
            <param name="_metrics">The metrics to build report entry from</param>
            <param name="averageComputation">The average computation method to apply for F1, P and R</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReport.GetSetMetrics(imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet)">
            <summary>
            Sets (if specified <c>_metrics</c> is not null) and Gets (earlier or just set) metrics object. Makes no change to report content, just stores the metrics temporarrly
            </summary>
            <param name="_metrics">The metrics.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Name">
            <summary> the title attached to this k-fold evaluation case instance </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Classifier">
            <summary> Name of post classifier </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Correct">
            <summary> Correct classifications </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Wrong">
            <summary> Wrong </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Targets">
            <summary> Number of web sites designated for model evaluation </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Precision">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Recall">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.F1measure">
            <summary> F1 measure - harmonic mean of precision and recall </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Comment">
            <summary> Optional information or comment on the data in the row </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.EntryFlags">
            <summary> Basic enumeration of the report entry, i.e. data row </summary>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReport.Count">
            <summary> Number of cases that were aggregated in this row </summary>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationReportCollection">
            <summary>
            
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbSCI.Core.math.classificationMetrics.classificationReportExpanded&gt;" />
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReportCollection.rootPath">
            <summary>
            Gets or sets the root path.
            </summary>
            <value>
            The root path.
            </value>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationReportExpanded">
            <summary>
            Expanded version of the report
            </summary>
            <seealso cref="T:imbSCI.Core.math.classificationMetrics.classificationReport" />
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReportExpanded.filepath">
            <summary>
            Gets or sets the filepath on which the report was found
            </summary>
            <value>
            The filepath.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReportExpanded.filecreation">
            <summary>
            Gets or sets the file creation.
            </summary>
            <value>
            The filecreation.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportExpanded.LoadSimpleReport(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the simple report and builds the expanded version
            </summary>
            <param name="reportFile">The report file.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportExpanded.#ctor(imbSCI.Core.math.classificationMetrics.classificationReport)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.classificationMetrics.classificationReportExpanded"/> class.
            </summary>
            <param name="report">The report.</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportExpanded.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.classificationMetrics.classificationReportExpanded"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationReportExtensions">
            <summary>
            Extension methods for <see cref="T:imbSCI.Core.math.classificationMetrics.IClassificationReport"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportExtensions.AddValues(imbSCI.Core.math.classificationMetrics.IClassificationReport,imbSCI.Core.math.classificationMetrics.classificationEvalMetricSet,imbSCI.Core.math.classificationMetrics.classificationMetricComputation)">
            <summary>
            Sets or Adds the values from specified <c>metrics</c> object. 
            </summary>
            <param name="a">a.</param>
            <param name="metrics">The metrics.</param>
            <param name="method">The method of ratios computation (F1, Precision, Recall)</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportExtensions.AddValues(imbSCI.Core.math.classificationMetrics.IClassificationReport,imbSCI.Core.math.classificationMetrics.IClassificationReport)">
            <summary>
            Adds the values from specified <c>source</c>
            </summary>
            <param name="a">a.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportExtensions.DivideValues(imbSCI.Core.math.classificationMetrics.IClassificationReport,System.Double,System.Boolean)">
            <summary>
            Divides the values stored in the report
            </summary>
            <param name="a">a.</param>
            <param name="divisor">The divisor.</param>
            <param name="OnlyRatios">if set to <c>true</c> [only ratios].</param>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.classificationReportSpace">
            <summary>
            Data structure used for report construction
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportSpace.ConstructTable(System.String,System.String,imbSCI.Core.math.classificationMetrics.classificationReportTableMode)">
            <summary>
            Constructs the table.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="style">The style.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportSpace.SetF1(System.String,System.Int32,imbSCI.Core.math.classificationMetrics.classificationReportExpanded,System.Int32)">
            <summary>
            Sets the F1 score and returns alternatuve run name - if had to be assigned, or original
            </summary>
            <param name="runName">Name of the run.</param>
            <param name="size">The size.</param>
            <param name="F1">The f1.</param>
            <param name="iteration">The iteration.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportSpace.BuildReportSpace(System.Collections.Generic.IEnumerable{imbSCI.Core.math.classificationMetrics.classificationReportExpanded},System.String,System.Text.RegularExpressions.Regex,imbSCI.Core.math.classificationMetrics.classificationReportStyleDefinition,System.String)">
            <summary>
            Builds the report space from report collection
            </summary>
            <param name="reports">The reports.</param>
            <param name="dataset">The dataset.</param>
            <param name="SELECT_REPORT_NAME_PARTS">The select report name parts.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.classificationMetrics.classificationReportSpace.max_total">
            <summary>
             Maximum for the complete space
            </summary>
            <value>
            The maximum total.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.classificationReportSpace.Complete">
            <summary>
            Performs closing computations, using aggregated data
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.ExperimentRunNameGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.ExperimentRunNameGroup.DeployForRunNames(System.Collections.Generic.List{System.String})">
            <summary>
            Deploys for run names.
            </summary>
            <param name="runs">The runs.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.ExperimentRunNameGroups">
            <summary>
            Declaration of runName groups, used for comparation reporting
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.ExperimentRunNameGroups.CheckForDefault">
            <summary>
            Checks for default.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.ExperimentRunNameGroups.DeployForRunNames(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Returns clone filtered for matched runNames
            </summary>
            <param name="runNames">The run names.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.IClassificationReport">
            <summary>
            Interface to classification report objects
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.NamespaceDoc">
            <summary>
            Confusion matrix, classification performance reporting
            </summary>
            <remarks>
            Basic tools for test results evaluation and F1-score computation
            </remarks>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportDataFlag.Deploy(System.String,System.String,System.String,System.String)">
            <summary>
            Deploys the specified name.
            </summary>
            <param name="_name">The name.</param>
            <param name="_needles">The needles.</param>
            <param name="_replacement">The replacement.</param>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.reportDataFlagDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportDataFlagDictionary.ProcessRunName(System.String,imbSCI.Core.math.classificationMetrics.reportExpandedData)">
            <summary>
            Processes the name of the run, and assignes data entries for matched flags
            </summary>
            <param name="_name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportDataFlagDictionary.Add(System.String,System.String,System.String,System.String)">
            <summary>
            Deploys the specified name.
            </summary>
            <param name="_name">The name.</param>
            <param name="_needles">The needles.</param>
            <param name="_replacement">The replacement.</param>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.reportExpandedData">
            <summary>
            Collection of custom data entries
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbSCI.Core.math.classificationMetrics.reportExpandedDataPair&gt;" />
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportExpandedData.GetStringValue(System.String,System.String)">
            <summary>
            Gets the string value.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">If not found</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportExpandedData.GetDictionary">
            <summary>
            Gets the dictionary of the data pairs
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportExpandedData.Add(System.String,System.String,System.String)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="_key">The key.</param>
            <param name="_value">The value.</param>
            <param name="_description">The description.</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportExpandedData.Merge(System.Collections.Generic.IEnumerable{imbSCI.Core.math.classificationMetrics.reportExpandedDataPair})">
            <summary>
            Merges the specified pairs.
            </summary>
            <param name="pairs">The pairs.</param>
        </member>
        <member name="M:imbSCI.Core.math.classificationMetrics.reportExpandedData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.classificationMetrics.reportExpandedData"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.classificationMetrics.reportExpandedDataPair">
            <summary>
            Custom data entry, embedded in the report
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.counter">
            <summary>
            Univerzalni brojac
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.counter.setup(System.Int32,System.Boolean)">
            <summary>
            Ako je __limit = 0, onda ce isRunning biti false
            </summary>
            <param name="__limit"></param>
            <param name="__isRunning"></param>
        </member>
        <member name="M:imbSCI.Core.math.counter.check(System.Int32,System.Boolean)">
            <summary>
            Proverava da li je index dostigao limit.
            </summary>
            <param name="moveIndex">Za koliko da pomeri index</param>
            <returns>TRUE ako je limit dostignut</returns>
        </member>
        <member name="M:imbSCI.Core.math.counter.reset(System.Int32)">
            <summary>
            Vraca index na dati index. vraca index koji je bio pre nego sto je resetovano
            </summary>
            <param name="indexToStart"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.counter.index">
            <summary>
            trenutna Index pozicija
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.counter.limit">
            <summary>
            postavljen limit
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.counter.onLimitReached_hasHandler">
            <summary>
            Proverava da li ima handler vec
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.counter.callLimitReached">
            <summary>
            Event invoker za LimitReached - ako je ovaj objekat uzrok dogadjaja onda moze i bez argumenata da se pozove
            </summary>
            <param name="sender">Objekat koji je pozvao izvrsavanje - ako je null smatrace da je ovaj objekat uzrok dogadjaja</param>
            <param name="args">Argumenti dogadjaja - ako je null postavlja da je unknown</param>
        </member>
        <member name="E:imbSCI.Core.math.counter.onLimitReached">
            <summary>
            Event handler za LimitReached
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.counter.onLimitReached_addHandler(imbSCI.Core.math.counterEvent)">
            <summary>
            Postavlja event handler za LimitReached (onLimitReached)
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.counter.onCounterReset_hasHandler">
            <summary>
            Proverava da li ima handler vec
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.counter.callCounterReset(System.Int32)">
            <summary>
            Event invoker za CounterReset - ako je ovaj objekat uzrok dogadjaja onda moze i bez argumenata da se pozove
            </summary>
            <param name="sender">Objekat koji je pozvao izvrsavanje - ako je null smatrace da je ovaj objekat uzrok dogadjaja</param>
            <param name="args">Argumenti dogadjaja - ako je null postavlja da je unknown</param>
        </member>
        <member name="E:imbSCI.Core.math.counter.onCounterReset">
            <summary>
            Event handler za CounterReset
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.counter.onCounterReset_addHandler(imbSCI.Core.math.counterEvent)">
            <summary>
            Postavlja event handler za CounterReset (onCounterReset)
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.counter.onCounterChecked_hasHandler">
            <summary>
            Proverava da li ima handler vec
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.counter.callCounterChecked">
            <summary>
            Event invoker za CounterChecked - ako je ovaj objekat uzrok dogadjaja onda moze i bez argumenata da se pozove
            </summary>
            <param name="sender">Objekat koji je pozvao izvrsavanje - ako je null smatrace da je ovaj objekat uzrok dogadjaja</param>
            <param name="args">Argumenti dogadjaja - ako je null postavlja da je unknown</param>
        </member>
        <member name="E:imbSCI.Core.math.counter.onCounterChecked">
            <summary>
            Event handler za CounterChecked
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.counter.onCounterChecked_addHandler(imbSCI.Core.math.counterEvent)">
            <summary>
            Postavlja event handler za CounterChecked (onCounterChecked)
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.counter.isRunning">
            <summary>
            da li je counter pokrenut? ako TRUE onda ce check pomeriti index, ako je FALSE onda se index ne mrda
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.counter.title">
            <summary>
            naziv countera
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.counterEvent">
            <summary>
            Delegat eventa
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:imbSCI.Core.math.counterEventArgs">
            <summary>
            Objekat koji opisuje dogadjaj koji se desio objektu: counter
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.counterEventArgs.type">
            <summary>
            Tip dogadjaja - ne moze da se prepravlja kasnije
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.counterEventType">
            <summary>
            Tip dogadjaja - za objekat: counter
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.counterEventType.counterChecked">
            <summary>
            Counter checked
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.counterEventType.limitReached">
            <summary>
            Counter limit is reached
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.counterEventType.counterReset">
            <summary>
            Counter reset
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.DescriptiveStatistics">
            <summary>
            
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.DescriptiveStatistics"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="isSample">if set to <c>true</c> [is sample].</param>
        </member>
        <member name="T:imbSCI.Core.math.Fraction">
            <summary>
            Expended version of Microsoft example code for Operator
            https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/operator
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.functions.core.functionBase">
            <summary>
            Base of function generator class
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.functions.core.functionBase.outputRange">
            <summary>
            Gets or sets the output range.
            </summary>
            <value>
            The output range.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.functions.core.functionBase.GetOutput(System.Double)">
            <summary>
            Gets the output.
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.core.functionBase.GetOutput(System.Int32)">
            <summary>
            Gets the output.
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.functions.core.IFunctionGenerator">
            <summary>
            Interface for function classes, used for procedural generation of [whatever]s :)
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.functions.core.IFunctionGenerator.outputRange">
            <summary>
            Output scalling range adjusts function output before returning final result from <see cref="M:imbSCI.Core.math.functions.core.IFunctionGenerator.GetOutput(System.Double)"/> and <see cref="M:imbSCI.Core.math.functions.core.IFunctionGenerator.GetOutput(System.Int32)"/> methods
            </summary>
            <value>
            The output range.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.functions.core.IFunctionGenerator.GetOutput(System.Double)">
            <summary>
            Gets the output.
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.core.IFunctionGenerator.GetOutput(System.Int32)">
            <summary>
            Gets the output.
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.functions.functionArray">
            <summary>
            Macro function containing multiple <see cref="T:imbSCI.Core.math.functions.core.IFunctionGenerator"/>
            </summary>
            <seealso cref="T:imbSCI.Core.math.functions.core.functionBase" />
        </member>
        <member name="M:imbSCI.Core.math.functions.functionArray.GetOutput(System.Double)">
            <summary>
            Gets the output produced by contained functions.
            </summary>
            <param name="alpha">The alpha input - used for as initial input and general alpha</param>
            <seealso cref="T:imbSCI.Core.math.functions.functionArray.functionArrayEntry"/>
            <seealso cref="T:imbSCI.Core.math.functions.functionArray.functionArrayEntryMode"/>
            <seealso cref="P:imbSCI.Core.math.functions.functionArray.items"/>
            <returns>Summed result of returned outputs</returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.functionArray.GetOutput(System.Int32)">
            <summary>
            Gets the output produced by contained functions.
            </summary>
            <param name="alpha">The alpha input - used for as initial input and general alpha</param>
            <seealso cref="T:imbSCI.Core.math.functions.functionArray.functionArrayEntry"/>
            <seealso cref="T:imbSCI.Core.math.functions.functionArray.functionArrayEntryMode"/>
            <seealso cref="P:imbSCI.Core.math.functions.functionArray.items"/>
            <returns>Summed result of returned outputs</returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.functionArray.Add(imbSCI.Core.math.functions.core.IFunctionGenerator,System.Double,imbSCI.Core.math.functions.functionArray.functionArrayEntryMode)">
            <summary>
            Adds the specified function.
            </summary>
            <param name="function">The function.</param>
            <param name="weight">The weight.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.functions.functionArray.items">
            <summary>
            Contained functions, with their weights and computation mode. The functions are called in the same order as in the list
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:imbSCI.Core.math.functions.functionArray.functionArrayEntryMode">
            <summary>
            Designates how functions are used in <see cref="T:imbSCI.Core.math.functions.functionArray"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.functions.functionArray.functionArrayEntryMode.useGeneralAlpha">
            <summary>
            The function (<see cref="M:imbSCI.Core.math.functions.core.functionBase.GetOutput(System.Double)"/>) will get <see cref="M:imbSCI.Core.math.functions.functionArray.GetOutput(System.Double)"/> general alpha value
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.functions.functionArray.functionArrayEntryMode.usePrevResultAsAlpha">
            <summary>
            The function will get output from function invoked in previous step. If it is the first in the array, then it gets general alpha
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.functions.functionArray.functionArrayEntry">
            <summary>
            Holder for a function in the <see cref="T:imbSCI.Core.math.functions.functionArray"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.functions.functionArray.functionArrayEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.functionArray.functionArrayEntry"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.functions.functionArray.functionArrayEntry.mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.functions.functionArray.functionArrayEntry.weight">
            <summary>
            Scale factor, applied when multiply functions are mixed
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.functions.functionArray.functionArrayEntry.function">
            <summary>
            Gets or sets the function.
            </summary>
            <value>
            The function.
            </value>
        </member>
        <member name="T:imbSCI.Core.math.functions.NamespaceDoc">
            <summary>
            Elementary functions - used to generate cyclic values from <c>alpha</c> (phase: from 0.0 to 1.0). It may be seen as signal generating functions as well.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.math.functions.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.math.functions.noiseFunction">
            <summary>
            Random noise value generator, within specified <see cref="P:imbSCI.Core.math.functions.core.functionBase.outputRange"/>
            </summary>
            <seealso cref="T:imbSCI.Core.math.functions.core.functionBase" />
        </member>
        <member name="M:imbSCI.Core.math.functions.noiseFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.noiseFunction"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.functions.noiseFunction.GetOutput(System.Double)">
            <summary>
            Gets random value within <see cref="P:imbSCI.Core.math.functions.core.functionBase.outputRange"/>. Alpha input is ignored
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.noiseFunction.GetOutput(System.Int32)">
            <summary>
            Gets random value within <see cref="P:imbSCI.Core.math.functions.core.functionBase.outputRange"/>. Alpha input is ignored
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.functions.pseudoFunction">
            <summary>
            Returns predefined fixed value
            </summary>
            <seealso cref="T:imbSCI.Core.math.functions.core.functionBase" />
        </member>
        <member name="M:imbSCI.Core.math.functions.pseudoFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.pseudoFunction"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.functions.pseudoFunction.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.pseudoFunction"/> class.
            </summary>
            <param name="outputValue">The output value.</param>
        </member>
        <member name="M:imbSCI.Core.math.functions.pseudoFunction.GetOutput(System.Double)">
            <summary>
            Gets the output.
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.pseudoFunction.GetOutput(System.Int32)">
            <summary>
            Gets the output.
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.functions.rampFunction">
            <summary>
            Ramp waveform function: starts with <see cref="P:imbSCI.Core.math.functions.core.functionBase.outputRange"/> minimum and ends with maximum value.
            </summary>
            <seealso cref="T:imbSCI.Core.math.functions.core.functionBase" />
        </member>
        <member name="M:imbSCI.Core.math.functions.rampFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.rampFunction"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.functions.rampFunction.alphaDimension">
            <summary>
            Gets or sets the alpha dimension scale: relevant only when <see cref="M:imbSCI.Core.math.functions.rampFunction.GetOutput(System.Int32)"/> -- integer input alpha is used
            </summary>
            <value>
            The alpha dimension.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.functions.rampFunction.GetOutput(System.Double)">
            <summary>
            Gets the output -- <c>alpha</c> should be 0-1, it is decimal phase position
            </summary>
            <param name="alpha">Decimal phase position</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.rampFunction.GetOutput(System.Int32)">
            <summary>
            Gets the output.
            </summary>
            <param name="alpha">The alpha.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.functions.sequenceFunction">
            <summary>
            Repeats sequence of pre-set output values.
            </summary>
            <seealso cref="T:imbSCI.Core.math.functions.core.functionBase" />
        </member>
        <member name="M:imbSCI.Core.math.functions.sequenceFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.sequenceFunction"/> class. Constructor for XmlSerialization, better use: <see cref="T:imbSCI.Core.math.functions.sequenceFunction"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.functions.sequenceFunction.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.sequenceFunction"/> class.
            </summary>
            <param name="firstStep">The first step value, the step at index = 0</param>
        </member>
        <member name="M:imbSCI.Core.math.functions.sequenceFunction.AddStep(System.Double)">
            <summary>
            Adds new value into step sequence
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:imbSCI.Core.math.functions.sequenceFunction.steps">
            <summary>
            The steps in the sequence
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.functions.sequenceFunction.GetOutput(System.Double)">
            <summary>
            Computes sequence step from decimal phase ratio. e.g. alpha=0.5 for sequence of 10 steps will return value for step 5. <see cref="F:imbSCI.Core.math.functions.sequenceFunction.steps"/>
            </summary>
            <param name="alpha">Decimal phase of the sequence, e.g. 0.25 gets 2nd step of sequence having 8 steps.</param>
            <remarks>
            <para>Negative <c>alpha</c> will return n-th step from the end (reversed query)</para>
            <para>Input is recomputed: alpha % 1. e.g. for <c>alpha</c> 1.2, the same output is returned like for <c>alpha</c> = 0.2. </para>
            </remarks>
            <seealso cref="F:imbSCI.Core.math.functions.sequenceFunction.steps"/>
            <seealso cref="M:imbSCI.Core.math.functions.sequenceFunction.AddStep(System.Double)"/>
            <returns>Value of step n, where n is: |steps| * (alpha % 1)</returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.sequenceFunction.GetOutput(System.Int32)">
            <summary>
            Returns step value at specified index, <c>alpha</c>. See <see cref="M:imbSCI.Core.math.functions.sequenceFunction.GetOutput(System.Double)"/> for other remarks.
            </summary>
            <param name="alpha">The index of step to be returned</param>
            <returns></returns>
            <seealso cref="M:imbSCI.Core.math.functions.sequenceFunction.GetOutput(System.Double)"/>
        </member>
        <member name="T:imbSCI.Core.math.functions.sineFunction">
            <summary>
            Function provides sine and cosine values.
            </summary>
            <seealso cref="T:imbSCI.Core.math.functions.core.functionBase" />
        </member>
        <member name="M:imbSCI.Core.math.functions.sineFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.functions.sineFunction"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.functions.sineFunction.useCosine">
            <summary>
            If true, it will produce cosine value instead of sine
            </summary>
            <value>
              <c>true</c> if [use cosine]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.functions.sineFunction.offset">
            <summary>
            Phase offset in decrees
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.functions.sineFunction.GetOutput(System.Double)">
            <summary>
            Producing output from decimal phase position (0 is 0 degree, 0.5 is 180 degree... 1.0 is 360)
            </summary>
            <param name="alpha">The alpha: number of full cycles. e.g. 0.25 is 90 degree</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.functions.sineFunction.GetOutput(System.Int32)">
            <summary>
            Produces output from degree input.
            </summary>
            <param name="alpha">Degrees</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.md5">
            <summary>
            Main MD algorithm
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.md5.isCacheEnabled">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.md5.cache">
            <summary>
            Description of $property$
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.md5.md5Hash">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.md5.emptyInput">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.math.md5.GetMd5Hash(System.String,System.Boolean)">
            <summary>
            Gets the MD5 hash for the string
            </summary>
            <param name="input">The input data to create hash for</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.md5.VerifyMd5Hash(System.String,System.String)">
            <summary>
            Verifies the MD5 <c>hash</c> against the string <c>input</c>
            </summary>
            <param name="input">The input.</param>
            <param name="hash">The hash.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measurement.generalContentMetrics">
            <summary>
            Page content metrics
            </summary>
            <seealso cref="T:imbSCI.Core.math.measurement.measureSetBase" />
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.urlAddress">
            <summary>
            HNusspel recognized d
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.blocks">
            <summary>
            Blocks on the page - count
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.hnusspel_language_Match">
            <summary>
            Number of HNusspel recongized words for the test language {{{lang_eName}}} ({{{lang_iso}}}
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.language_word_count">
            <summary>
            Normal words of a language
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.hnusspel_word_ratio">
            <summary>
            Ratio: number of [words hnusspel recognized] / [total word count]
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.linkOutCount">
            <summary>
            Number of links pointing to another TLD
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.linkInCount">
            <summary>
            Number of links leading to pages inside the same TLD
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.linkInOutCount">
            <summary>
            Total number of links on page, any kind of (including: on-page-anchor-links, inner pages and out-of-the-TLD links, excluding: multimedia srcs,  css, js and other source includes)
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.linkWithKnownWords">
            <summary>
            Inner links with title having hnuspell-test positive words
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.sentenceTitleCount">
            <summary>
            Title Sentence total Count
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.sentenceNormalCount">
            <summary>
            Normal sentence total count
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.linkPerSentenceNormal">
            <summary>
            Ratio: [links count (any kind of)] / [Normal sentence count]
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.wordPerSentenceNormal">
            <summary>
            Ratio: [word count (any kind of)] / [Normal sentence count]
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.titlePerSentenceNormal">
            <summary>
            Ratio: [Title sentence count)] / [Normal sentence count]
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.sentenceNormalCountInHSNCBlock">
            <summary>
            Count of normal sentences in the block with the highest count of normal sentences
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.generalContentMetrics.linkInCountInHILCBlock">
            <summary>
            Count of inner links in the block with the highest count of inner links
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.measureDisplayGroup.name">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.measureDisplayGroup.description">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measurement.measureDisplayGroups.export">
            <summary>
            Exports all groups to list
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measurement.measureSetBase">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.measureSetBase.Item(System.String)">
            <summary>
            Gets the <see cref="!:aceCommonTypes.interfaces.IMeasure"/> with the specified path.
            </summary>
            <value>
            The <see cref="!:aceCommonTypes.interfaces.IMeasure"/>.
            </value>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.measurement.measureSetBase.Item(System.String,System.String)">
            <summary>
            Gets the <see cref="!:aceCommonTypes.interfaces.IMeasure"/> with the specified group.
            </summary>
            <value>
            The <see cref="!:aceCommonTypes.interfaces.IMeasure"/>.
            </value>
            <param name="group">The group.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.measurement.measureSetBase.name">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measurement.measureSetBase.description">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measurement.measureSetBase.setItem(System.Reflection.PropertyInfo)">
            <summary>
            Sets the item.
            </summary>
            <param name="pi">The pi.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.measureSetBase.calculateAll">
            <summary>
            Calculates all.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measurement.measureSetBase.connect(System.Reflection.PropertyInfo)">
            <summary>
            Connects the specified pi.
            </summary>
            <param name="pi">The pi.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.measureSetBase.doAutoSet(System.Reflection.PropertyInfo[])">
            <summary>
            Performes automatic setup of the properties
            </summary>
            <param name="props">The props.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.measureSetBase.doAutoScan(System.Reflection.PropertyInfo[])">
            <summary>
            Does the automatic scan.
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.measurement.measureSetExternal">
            <summary>
            MeasureSet for external application
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sums the specified metrics.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="metrics">The metrics.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measurement.MetricsBase">
            <summary>
            Base class for metrics containers
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.SendTo(imbSCI.Core.math.classificationMetrics.reportExpandedData,System.String)">
            <summary>
            Sends metric data into
            </summary>
            <param name="target">The target.</param>
            <param name="formatDouble">The format double.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.Plus``1(``0)">
            <summary>
            Pluses the specified b.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="b">The b.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.Minus``1(``0)">
            <summary>
            Minuses the specified b.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="b">The b.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.Divide``1(``0)">
            <summary>
            Divides the specified b.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="b">The b.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.Power``1(``0)">
            <summary>
            Powers the specified b.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="b">The b.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.Divide(System.Double)">
            <summary>
            Divides the specified b.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="b">The b.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.Power(System.Double)">
            <summary>
            Powers the specified b.
            </summary>
            <param name="b">The b.</param>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.Init">
            <summary>
            Initializes this instance, registers all Integers and Doubles
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.GetVector(System.String)">
            <summary>
            Gets value of specified property or 0 if no property found under that name
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.GetDictionary(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the dictionary.
            </summary>
            <param name="includeIntegers">if set to <c>true</c> [include integers].</param>
            <param name="includeDoubles">if set to <c>true</c> [include doubles].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.GetVectors(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets list of integer and double properties
            </summary>
            <param name="includeIntegers">if set to <c>true</c> [include integers].</param>
            <param name="includeDoubles">if set to <c>true</c> [include doubles].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measurement.MetricsBase.GetFields(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets list of integer and double properties
            </summary>
            <param name="includeIntegers">if set to <c>true</c> [include integers].</param>
            <param name="includeDoubles">if set to <c>true</c> [include doubles].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.core.measure`1">
             <summary>
            
             </summary>
             <typeparam name="TValue">The type of the value.</typeparam>
             <seealso cref="!:aceCommonTypes.interfaces.IAceMathMeasure" />
             <seealso cref="T:imbSCI.Data.interfaces.IObjectWithNameAndDescription" />
             <seealso cref="!:aceCommonTypes.interfaces.IValueWithFormat" />
             <seealso cref="!:aceCommonTypes.interfaces.IValueWithImportanceInfo" />
             <seealso cref="!:aceCommonTypes.interfaces.IValueWithRoleInfo" />
             <seealso cref="!:aceCommonTypes.interfaces.IValueWithToString" />
             <seealso cref="!:aceCommonTypes.interfaces.IValueWithUnitInfo" />
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.calculateTasks">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.#ctor(System.Enum,imbSCI.Core.math.measureSystem.enums.measureSystemsEnum,`0,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.measureSystem.core.measure`1"/> class.
            </summary>
            <param name="role">The role.</param>
            <param name="system">The system.</param>
            <param name="defaultValue">The default value.</param>
            <param name="defaultBaseValue">The default base value.</param>
            <param name="levelsFromRoot">The levels from root.</param>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.isAlarmTurnedOn">
            <summary>
            If true it will use alarm range to fire alarm
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.alarmCriteria">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.doUnitOptimization">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.getUnitOptimization">
            <summary>
            Gets a value indicating whether [do unit optimization].
            </summary>
            <value>
              <c>true</c> if [do unit optimization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.convertToOptimalUnitLevel">
            <summary>
            Converts to optimal unit level.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.ToString">
            <summary>
            Returns a string that represents the meassure - according to
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.checkUnitSufix">
            <summary>
            Checks the unit sufix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.GetContent(imbSCI.Core.math.measureSystem.enums.measureToStringContent)">
            <summary>
            Gets the informational content about this measure
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.ToString(imbSCI.Core.math.measureSystem.enums.measureToStringContent)">
            <summary>
            To the string.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.GetFormatForValue(System.Boolean)">
            <summary>
            Gets the format for value or value-and-unit if forValueAndUnit is TRUE.
            </summary>
            <param name="forValueAndUnit">if set to <c>true</c> returns format for value and unit.</param>
            <returns>Format string</returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measure`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.info">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.defaultValueAndUnit">
            <summary>
            string representation of default value with Unit
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.valueType">
            <summary>
            Type of <c>TValue</c>
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.valueTypeGroup">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.defValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.valueRange">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.primValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.baseValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.isValuePlural">
            <summary>
            Gets a value indicating whether the current value is plural.
            </summary>
            <value>
            <c>true</c> if this instance is value plural; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.isValueDefault">
            <summary>
            TRUE if current value is same as default value specified with constructor
            </summary>
            <value>
            <c>true</c> if this instance is value default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.relevance">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.role_name">
            <summary>
            Gets the name of the role.
            </summary>
            <value>
            The name of the role.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.role_symbol">
            <summary>
            Gets the role symbol.
            </summary>
            <value>
            The role symbol.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measure`1.role_letter">
            <summary>
            Gets the role letter.
            </summary>
            <value>
            The role letter.
            </value>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.core.measureBase">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureBase.name">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureBase.description">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureBase.metaModelName">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureBase.metaModelPrefix">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureBase.metaModelFull">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureInfo.system">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureInfo.unit">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureInfo.role">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.core.measureOperand">
            <summary>
            One element of calculation
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureOperand.operationWithOperand">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureOperand.operandName">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureOperand.operand">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.core.measureOperandList">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureOperandList.items">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measureOperandList.Add(System.Int32,imbSCI.Core.enums.operation,imbSCI.Core.interfaces.IMeasure)">
            <summary>
            Adds the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="opera">The opera.</param>
            <param name="__operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measureOperandList.Add(System.Int32,imbSCI.Core.enums.operation,System.String)">
            <summary>
            Adds the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="opera">The opera.</param>
            <param name="operandName">Name of the operand.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry">
            <summary>
            Possible application role of a measuteSysteUnitEntry
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.separator">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry"/> class.
            </summary>
            <param name="__letter">The letter.</param>
            <param name="__symbol">The symbol.</param>
            <param name="__name">The name.</param>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.setFormat(System.String,System.String,System.String)">
            <summary>
            Sets format overrides. Leave blank to disable overrides.
            </summary>
            <param name="__formatForValue">The format to override <see cref="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.formatForValue"/> value at <see cref="T:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry"/> .</param>
            <param name="__formatForValueAndUnit">The format to override <see cref="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.formatForValueAndUnit"/> value at <see cref="T:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry"/></param>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.unitOverride">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.valueFormatOverride">
            <summary>
            The value format override (to be applied instead of unit's format)
            </summary>
            <value>
            The value format override.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.valueAndUnitFormatOverride">
            <summary>
            The valueAndUnit format override (to be applied instead of unit's format)
            </summary>
            <value>
            The value and unit format override.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.letter">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.symbol">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry.name">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry">
            <summary>
            Definition of an unit of <see cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.#ctor(System.String,System.Double,System.String,imbSCI.Core.math.measureSystem.systems.measureDecadeSystem,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry"/> class.
            </summary>
            <param name="__unit">The unit.</param>
            <param name="__level">The level.</param>
            <param name="__nameSingular">The name singular.</param>
            <param name="__rootLevel">The root level.</param>
            <param name="__namePlural">The name plural.</param>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.unit">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.namePlural">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.nameSingular">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.checkValueMap(System.Object)">
            <summary>
            Checks if there is mapped value defined for this value.
            </summary>
            <param name="val">The value.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.factor">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.hasValueMap">
            <summary>
            Gets a value indicating whether this instance has any value map entry
            </summary>
            <value>
            <c>true</c> if this instance has value map; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.valueMap">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.setFormat(System.String,System.String)">
            <summary>
            Sets formats for <see cref="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.formatForValue"/> and <see cref="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.formatForValueAndUnit"/>
            </summary>
            <param name="__formatForValue">The format for value.</param>
            <param name="__formatForValueAndUnit">The format for value and unit.</param>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.formatForValue">
            <summary>
            String.Format formatting definition applied only on value - expects only one parameter
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.formatForValueAndUnit">
            <summary>
            String.Format formatting definition applied only on value - expects only one parameter
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.contentForValueAndUnitOutput">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.isUsingBaseValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry.system">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitRegistry.items">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitRegistry.byFactor">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.core.measureSystemUnitRegistry.sortedByFactor">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.decadeSystemExtensions.toFactor(imbSCI.Core.math.measureSystem.enums.decadeLevel)">
            <summary>
            Gets the factor.
            </summary>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.enums.decadeLevel">
            <summary>
            Dekadni nivo - vrednost enuma je exponent
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureToStringContent.baseValue">
            <summary>
            secondary value used in proportions, counters, indexers, exponents, logarithms and etc
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureToStringContent.expression">
            <summary>
            The expression: L = 25.5 mm
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.enums.measureUnitLevelChange">
            <summary>
            Quality score of the current unit level
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitLevelChange.goLower">
            <summary>
            The go lower
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitLevelChange.optimum">
            <summary>
            Nothing to change
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitLevelChange.goHigher">
            <summary>
            Unit should be converted to higher level
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitType.time">
            <summary>
            Vreme: dan, sekund, godina itd
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitType.space">
            <summary>
            Prostor: dužina, površina, ugao itd
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitType.change">
            <summary>
            Brzina, tempo promene itd
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitType.energy">
            <summary>
            Energija, snaga, volti, struja
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitType.force">
            <summary>
            Sila, pritisak itd.
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitType.mass">
            <summary>
            Masa
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.measureSystem.enums.measureUnitType.property">
            <summary>
            Opis fizičke osobine
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.measureBoolean">
            <summary>
            Measure with Boolean value
            </summary>
            <seealso cref="!:measure&lt;TValue&gt;.Boolean&gt;" />
            <seealso cref="T:System.ICloneable" />
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.measureBoolean.calculate(imbSCI.Core.interfaces.IMeasure,imbSCI.Core.enums.operation)">
            <summary>
            Calculates the specified second.
            </summary>
            <param name="second">The second.</param>
            <param name="op">The op.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.measureDecimal">
            <summary>
            base implementation of measure based on <see cref="T:System.Decimal"/> value
            </summary>
            <seealso cref="!:measure&lt;TValue&gt;.Decimal&gt;" />
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.measureString">
             <summary>
            
             </summary>
             <seealso cref="!:measure&lt;TValue&gt;.String&gt;" />
             <seealso cref="T:System.ICloneable" />
             <seealso cref="T:imbSCI.Core.interfaces.IMeasure" />
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.measureString.formatZone">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.measureString.calculate(imbSCI.Core.interfaces.IMeasure,imbSCI.Core.enums.operation)">
            <summary>
            Calculates the specified second.
            </summary>
            <param name="second">The second.</param>
            <param name="op">The op.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.measureSystemManager">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.measureSystemManager.registry">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.measureSystemManager.GetFactorDistance(imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry,imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry)">
            <summary>
            Gets the factor distance.
            </summary>
            <param name="current">The current.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.measureSystemManager.GetFactorStrLenChange(System.Double)">
            <summary>
            Gets expected string length change after factor distance applied
            </summary>
            <param name="distance">The distance.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.measureSystemManager.getMeasureInfo(System.Enum,System.Enum,imbSCI.Core.math.measureSystem.enums.measureSystemsEnum)">
            <summary>
            Gets the measure information.
            </summary>
            <param name="roleName">Name of the role.</param>
            <param name="unitName">Name of the unit.</param>
            <param name="system">The system.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.measureSystemManager.getMeasureInfo(System.Enum,System.Int32,System.String)">
            <summary>
            Gets the measure information.
            </summary>
            <param name="role">The role.</param>
            <param name="level">The level.</param>
            <param name="system">The system.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.measureSystemManager.getMeasureInfo(System.Enum,System.Int32,imbSCI.Core.math.measureSystem.enums.measureSystemsEnum)">
            <summary>
            Gets the measure information.
            </summary>
            <param name="role">The role.</param>
            <param name="level">The level.</param>
            <param name="system">The system.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.memory.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.measureSystem.memory"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.memory.calculate(imbSCI.Core.interfaces.IMeasure,imbSCI.Core.enums.operation)">
            <summary>
            Calculates the specified second.
            </summary>
            <param name="second">The second.</param>
            <param name="op">The op.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.numericMeasure">
            <summary>
            General numeric measure
            </summary>
            <seealso cref="T:imbSCI.Core.math.measureSystem.measureDecimal" />
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.systems.instanceMeasureSystem">
            <summary>
            Measure system for> percentage, permile, ratios
            </summary>
            <seealso cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem" />
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.systems.measureBooleanSystem">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem" />
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureBooleanSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.measureSystem.systems.measureBooleanSystem"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.name">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.#ctor(imbSCI.Core.math.measureSystem.enums.measureSystemsEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem"/> class.
            </summary>
            <param name="__name">The name.</param>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetUnitByName(System.String)">
            <summary>
            Gets the unit by short name or sufix. i.e.: <c>mm</c> for milimeters
            </summary>
            <param name="unitSufix">The unit sufix.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetUnit(System.Int32)">
            <summary>
            Gets the unit relative from root
            </summary>
            <param name="levelFromRoot">The level from root.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.targetStringLength">
            <summary>
            Defines desired maximum string length used for <see cref="!:measure&lt;TValue&gt;.unitLevelQuality()"/> evaluation
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetOrMakeUnit(System.Tuple{System.Enum,System.String,System.String,System.String,System.String},imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry)">
            <summary>
            Gets the or make unit.
            </summary>
            <param name="tup">The tup.</param>
            <param name="unit">The unit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetOrMakeRole(System.Tuple{System.Enum,System.String,System.String,System.String,System.String},imbSCI.Core.math.measureSystem.core.measureSystemRoleEntry)">
            <summary>
            Gets the or make role.
            </summary>
            <param name="tup">The tup.</param>
            <param name="mainRole">The main role.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetUnit(imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry,System.Int32)">
            <summary>
            Gets the unit.
            </summary>
            <param name="current">The current.</param>
            <param name="levelFromCurrent">How much levels from the current unit? same factors are ignored</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetUnit(imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry,imbSCI.Core.math.measureSystem.enums.measureUnitLevelChange)">
            <summary>
            Gets next unit in specified direction <see cref="T:imbSCI.Core.math.measureSystem.enums.measureUnitLevelChange"/>
            </summary>
            <param name="current">The current.</param>
            <param name="direction">The direction to get next unit</param>
            <returns>Next defined unit level with different factor</returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetOptimalUnit(imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry,System.Int32)">
            <summary>
            Gets the optimal unit.
            </summary>
            <param name="current">The current.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetFactorDistance(imbSCI.Core.math.measureSystem.core.measureSystemUnitEntry,imbSCI.Core.math.measureSystem.enums.measureUnitLevelChange)">
            <summary>
            Gets the factor distance.
            </summary>
            <param name="current">The current.</param>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.GetRole(System.Enum)">
            <summary>
            Gets the role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.AddUnit(imbSCI.Core.math.measureSystem.enums.decadeLevel)">
            <summary>
            Adds the unit.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.rootUnitAutofind">
            <summary>
            Auto detects the root unit
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.AddUnit(System.String,System.Enum)">
            <summary>
            Adds the unit.
            </summary>
            <param name="sufix">The sufix.</param>
            <param name="nameEnum">The name enum.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.AddUnit(System.String,System.Double,System.String,System.String)">
            <summary>
            Adds the unit.
            </summary>
            <param name="unit">The unit.</param>
            <param name="level">The level.</param>
            <param name="name">The name.</param>
            <param name="namePlural">The name plural.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.AddRole(System.String,System.String,System.String)">
            <summary>
            Adds the role.
            </summary>
            <param name="name">The name.</param>
            <param name="letter">The letter.</param>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.AddRole(System.Enum,System.String,System.String)">
            <summary>
            Adds the role for numberic measures
            </summary>
            <param name="name">The name.</param>
            <param name="letter">The letter.</param>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.rootUnit">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem.measureType">
            <summary>
            Gets or sets the type of the measure.
            </summary>
            <value>
            The type of the measure.
            </value>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystemRegistry">
            <summary>
            measure system registry
            </summary>
            <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.String, aceCommonTypes.math.measureSystem.measureDecadeSystem&gt;" />
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureDecadeSystemRegistry.Add(imbSCI.Core.math.measureSystem.systems.measureDecadeSystem)">
            <summary>
            Adds the specified system.
            </summary>
            <param name="system">The system.</param>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.systems.measureDecadeSystemRegistry.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Exception">System not found in the registry! "+key</exception>
        </member>
        <member name="P:imbSCI.Core.math.measureSystem.systems.measureDecadeSystemRegistry.Item(imbSCI.Core.math.measureSystem.enums.measureSystemsEnum)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.systems.measureStringSystem">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem" />
        </member>
        <member name="M:imbSCI.Core.math.measureSystem.systems.measureStringSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.measureSystem.systems.measureStringSystem"/> class.
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.systems.proportionMeasureSystem">
            <summary>
            Measure system for> percentage, permile, ratios
            </summary>
            <seealso cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem" />
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.systems.temporalMeasureSystem">
            <summary>
            System for time measurement
            </summary>
            <seealso cref="T:imbSCI.Core.math.measureSystem.systems.measureDecadeSystem" />
        </member>
        <member name="T:imbSCI.Core.math.measureSystem.temporalMeasure">
            <summary>
            Time measure
            </summary>
            <seealso cref="T:imbSCI.Core.math.measureSystem.measureDecimal" />
        </member>
        <member name="T:imbSCI.Core.math.measureUnit.money">
            <summary>
            Decimal number with two decimals and thousants separation
            </summary>
            <seealso cref="!:aceCommonTypes.math.units.aceMathUnitBase&lt;System.Decimal&gt;" />
        </member>
        <member name="T:imbSCI.Core.math.measureUnit.proportion">
            <summary>
            Proportion information representing count of total i.e. 5 of 13
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.NamespaceDoc">
            <summary>
            Math, statistics and specialized helpers: <see cref="T:imbSCI.Core.math.counter"/>, <see cref="T:imbSCI.Core.math.md5"/>, <see cref="!:classificationReport"/>...
            </summary>
            <remarks>
            Also covers: aggregation, classificaton performance metrics (confusion matrix), functions (signal generators), matrix procedural pattern generation, value range tools...
            </remarks>
        </member>
        <member name="T:imbSCI.Core.math.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.math.range.finder.NamespaceDoc">
            <summary>
            <para>Range finders are utility objects, used to make descriptive statistics from collection of numbers and add agregate rows and conditional formatting to DataTable reports</para>
            </summary>
            <remarks>
            <para>rangeFinder comes in three flavors</para>
            <list>
            	<item>
            		<term>Lightweight</term>
            		<description>basic <see cref="T:imbSCI.Core.math.range.finder.rangeFinder"/> finds min, max, avg, sum and count</description>
            	</item>
            	<item>
            		<term>Record keeper</term>
            		<description><see cref="T:imbSCI.Core.math.range.finder.rangeFinderWithData"/> keeps all values sent trough <see cref="M:imbSCI.Core.math.range.finder.rangeFinder.Learn(System.Double)"/> method, taking some memory to have ability to compute standard deviation, entropy ... etc.</description>
            	</item>
            	<item>
            		<term>Report utility</term>
            		<description><see cref="T:imbSCI.Core.math.range.finder.rangeFinderForDataTable"/> is capable to scan and modify <see cref="!:DataTable"/> by adding agregate rows and conditional formatting for min and max rows</description>
            	</item>
            </list>
            </remarks>
            <seealso cref="!:DataTableExtensions" />
        </member>
        <member name="T:imbSCI.Core.math.range.finder.rangeFinder">
            <summary>
            Math utility class for: min-max-range computations
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.finder.rangeFinder"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.finder.rangeFinder"/> class.
            </summary>
            <param name="_id">The identifier.</param>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinder.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinder.Learn(System.Double)">
            <summary>
            Updates the instance with data
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.IsLearned">
            <summary>
            Gets a value indicating whether this instance is learned.
            </summary>
            <value>
              <c>true</c> if this instance is learned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinder.GetPositionInRange(System.Double)">
            <summary>
            Returns 0 (min) to 1 (max) position of the <c>input</c>, within <see cref="P:imbSCI.Core.math.range.finder.rangeFinder.Minimum"/> - <see cref="P:imbSCI.Core.math.range.finder.rangeFinder.Maximum"/> range
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinder.GetDictionary(System.String)">
            <summary>
            Returns dictionary with values
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.Minimum">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.Maximum">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.Range">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.Count">
            <summary> Count </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.Average">
            <summary> Average </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinder.Sum">
            <summary> Summary of all values </summary>
        </member>
        <member name="T:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1">
            <summary>
            rangeFinders for numeric properties of the object {T}
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1.#ctor(imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1"/> class.
            </summary>
            <param name="learnMetaDataFrom">The learn meta data from.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1.Deploy(System.Type)">
            <summary>
            Deploys the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1.GetDictionary">
            <summary>
            Gets the dictionary with all values
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1.SetDataTable(System.Data.DataTable)">
            <summary>
            Adds columns and transfers formating and other meta information specified in the <see cref="T:imbSCI.Core.data.settingsPropertyEntry"/> entries. 
            </summary>
            <param name="table">The table to write columns into. If not specified, it will create new with name of the group.</param>
            <remarks>The method will declare only <see cref="T:imbSCI.Core.data.settingsPropertyEntry"/>s, not the entries of other type</remarks>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1.SetDataRow(System.Data.DataRow)">
            <summary>
            Sets values to the datarow
            </summary>
            <param name="dr">The dr.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dr</exception>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderCollectionForMetrics`1.Learn(`0)">
            <summary>
            Performs one learning call
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="T:imbSCI.Core.math.range.finder.rangeFinderForDataTable">
            <summary>
            Performs aggregation over data in the specified data table and inserts the aggregation rows
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForDataTable.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.finder.rangeFinderForDataTable"/> class.
            </summary>
            <param name="targetTable">The target table.</param>
            <param name="keyDataColumn">The key data column.</param>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinderForDataTable.keyColumn">
            <summary>
            Gets or sets the key column.
            </summary>
            <value>
            The key column.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinderForDataTable.keyColumnName">
            <summary>
            Name of column that is UID
            </summary>
            <value>
            The name of the key column.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinderForDataTable.columnsToSignIn">
            <summary>
            Columns to write the aggregate row name into
            </summary>
            <value>
            The columns to sign in.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinderForDataTable.rowsToSkipFromLearning">
            <summary>
            The rows to skip from learning.
            </summary>
            <value>
            The rows to skip from learning.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForDataTable.prepareForNextAggregationBlock(System.Data.DataTable,System.String)">
            <summary>
            Prepares for the next aggregation block. You are using this when reporting more one aggregations i.e. splitting the table into more groups and then reporting max,min... for each group
            </summary>
            <param name="targetTable">The target table.</param>
            <param name="keyDataColumn">The key data column.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForDataTable.prepareForTable(System.Data.DataTable,System.String)">
            <summary>
            Prepares for the table shema -- later can be used with other data tables with the same shema
            </summary>
            <param name="targetTable">The target table.</param>
            <param name="keyDataColumn">The key (name/uid) column.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForDataTable.GetRangerStartingWith(System.String)">
            <summary>
            Returns all rangers having key starting with the specified string
            </summary>
            <param name="columnNameStart">The column name start.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinderForDataTable.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.math.range.finder.rangeFinderWithData"/> with the specified key (property name and/or data table column name
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.math.range.finder.rangeFinderWithData"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForDataTable.AddRangeRows(System.String,System.Data.DataTable,System.Boolean,imbSCI.Core.math.aggregation.dataPointAggregationType)">
            <summary>
            Adds the range rows into table.
            </summary>
            <param name="namePrefix">Row name prefix.</param>
            <param name="targetTable">The target table.</param>
            <param name="placeDataRowMarks">if set to <c>true</c> it will set styling conditioners to this table</param>
            <param name="rowsToAdd">The rows.</param>
        </member>
        <member name="F:imbSCI.Core.math.range.finder.rangeFinderForDataTable.finders">
            <summary>
            The finders
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.range.finder.rangeFinderForProperty`1">
            <summary>
            Typed version of <see cref="T:imbSCI.Core.math.range.finder.rangeFinderForProperty"/> 
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbSCI.Core.math.range.finder.rangeFinderForProperty" />
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForProperty`1.Learn(`0)">
            <summary>
            Performs one learning call
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="T:imbSCI.Core.math.range.finder.rangeFinderForProperty">
            <summary>
            Range finder set to a property
            </summary>
            <seealso cref="T:imbSCI.Core.math.range.finder.rangeFinderForProperty" />
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForProperty.GetSettingsInfoGroup">
            <summary>
            Gets the settings information group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForProperty.SetDataTable(System.Data.DataTable)">
            <summary>
            Declares data columns in the data table
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForProperty.SetDataRow(System.Data.DataRow)">
            <summary>
            Sets values to the datarow
            </summary>
            <param name="dr">The dr.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">dr</exception>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderForProperty.Learn(System.Object)">
            <summary>
            Learns property value from the specified data object.
            </summary>
            <param name="dataObject">The data object.</param>
        </member>
        <member name="T:imbSCI.Core.math.range.finder.rangeFinderWithData">
            <summary>
            Version of <see cref="T:imbSCI.Core.math.range.finder.rangeFinder"/> that stores all values sent trough <see cref="P:imbSCI.Core.math.range.finder.rangeFinderWithData.doubleEntries"/>
            </summary>
            <seealso cref="!:imbWBI.Core.math.rangeFinder" />
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderWithData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.finder.rangeFinderWithData"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderWithData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.finder.rangeFinderWithData"/> class.
            </summary>
            <param name="_id">The identifier.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderWithData.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.finder.rangeFinderWithData.Learn(System.Double)">
            <summary>
            Updates the instance with data
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:imbSCI.Core.math.range.finder.rangeFinderWithData.doubleEntries">
            <summary>
            The double entries
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.range.frequency.frequencyCounter`1">
            <summary>
            Counts instance frequencies 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.Core.math.range.frequency.frequencyCounter`1.Any">
            <summary>
            Returns if any <see cref="M:imbSCI.Core.math.range.frequency.frequencyCounter`1.Count(`0)"/> call was made, i.e. if <see cref="P:imbSCI.Core.math.range.frequency.frequencyCounter`1.TotalFrequency"/> is above 0
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.range.histogram.histogramModel">
            <summary>
            Splits sampled data into <see cref="P:imbSCI.Core.math.range.histogram.histogramModel.bins"/> bins, with equal value span.
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;imbSCI.Core.math.range.histogram.histogramModelBin&gt;" />
        </member>
        <member name="P:imbSCI.Core.math.range.histogram.histogramModel.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.math.range.histogram.histogramModelBin"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.math.range.histogram.histogramModelBin"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.histogram.histogramModel"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModel.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.histogram.histogramModel"/> class.
            </summary>
            <param name="_binCount">The bin count.</param>
            <param name="_name">The name.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModel.GetDataTableForFrequencies(System.Data.DataTable)">
            <summary>
            Generates data table with bins
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModel.GetDataTableForFunction(System.Func{imbSCI.Core.math.range.histogram.histogramModelBin,System.Double},System.Data.DataTable)">
            <summary>
            Generates data table with bins
            </summary>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.range.histogram.histogramModelBin">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModelBin.#ctor(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.histogram.histogramModelBin"/> class.
            </summary>
            <param name="_label">The lavel.</param>
            <param name="_start">The start.</param>
            <param name="_end">The end.</param>
            <param name="_binPlace">The bin place.</param>
        </member>
        <member name="P:imbSCI.Core.math.range.histogram.histogramModelBin.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.histogram.histogramModelBin.start">
            <summary>
            Gets or sets the start.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.histogram.histogramModelBin.end">
            <summary>
            Gets or sets the end.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.histogram.histogramModelBin.binPlace">
            <summary>
            Gets or sets the bin place.
            </summary>
            <value>
            The bin place.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.histogram.histogramModelBin.values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModelBin.Add(System.Double)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.range.histogram.histogramModelBin.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModelExtensions.GetHistogramModel``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Double},System.Int32)">
            <summary>
            Gets the histogram model.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceSet">The source set.</param>
            <param name="name">The name.</param>
            <param name="selector">The selector.</param>
            <param name="bins">The bins.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.histogram.histogramModelExtensions.ProcessData``1(imbSCI.Core.math.range.histogram.histogramModel,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Processes the data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model">The model.</param>
            <param name="sourceSet">The source set.</param>
            <param name="selector">The selector.</param>
        </member>
        <member name="T:imbSCI.Core.math.range.imbNumberScale">
            <summary>
            Matematički alat koji radi sa min-max skalom
            konvertuje apsolutni i relativni (ratio) broj
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.imbNumberScale.maxValue">
            <summary>
            Maksimalna vrednost u skali
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.imbNumberScale.minValue">
            <summary>
            Minimalna vrednost u skali
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.imbNumberScale.applyPreset(imbSCI.Core.math.range.numberRangePresetEnum)">
            <summary>
            Applies the preset. See: <see cref="T:imbSCI.Core.math.range.numberRangePresetEnum"/>
            </summary>
            <param name="preset">The preset.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.imbNumberScale.#ctor(System.Double,System.Double)">
            <summary>
            Konstruktor koji postavlja min i max
            </summary>
            <param name="_min"></param>
            <param name="_max"></param>
        </member>
        <member name="M:imbSCI.Core.math.range.imbNumberScale.#ctor(System.Collections.Generic.List{System.Double})">
            <summary>
            Konstruktor koji postavlja min i max ali iz Liste
            pri čemu je 0 član min a 1 član max
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:imbSCI.Core.math.range.imbNumberScale.getAbsoluteValue(System.Double,System.Boolean)">
            <summary>
            Vraća apsolutni broj za zadati racio
            koristeći postavljeni min-max raspon
            </summary>
            <param name="ratio">koeficijent na osnovu kojeg se dobija absolutni broj</param>
            <param name="normalizeRatio">If <c>true</c>, the <c>ratio</c> input is normalized: ratio = ratio % 1, and negative values are interpreted as inverse position (i.e. from right to left)</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.imbNumberScale.getRatioValue(System.Double)">
            <summary>
            Vraća koeficijent na osnovu ranije definisanog raspona
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.range.matrix.HeatMapModel">
            <summary>
            Intensity matrix
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;System.Double&gt;&gt;" />
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.HeatMapModel.deployed">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.matrix.HeatMapModel"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.HeatMapModel.ArtificialMaximum">
            <summary>
            Gets or sets the artificial maximum.
            </summary>
            <value>
            The artificial maximum.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes square heat map matrix
            </summary>
            <param name="columnsAndRows">The columns and rows.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.Deploy(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes rectanglural heat map matrix
            </summary>
            <param name="columns">The columns.</param>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.Create(System.Int32,System.Int32,System.String)">
            <summary>
            Creates the specified width.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="axisFormat">The axis format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.CreateRandom(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates randomized heat map, with specified x-y axis size.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="axisFormat">The axis format.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.HeatMapModel.weight">
            <summary>
            Gets the weight.
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.HeatMapModel.height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.HeatMapModel.Item(System.String,System.String)">
            <summary>
            Selection by string labels
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.AllocateSize(System.Int32,System.Int32)">
            <summary>
            Makes sure that matrix cells up to of specified dimensions is instantiated the size.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.HeatMapModel.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> with the specified x.
            </summary>
            <value>
            The <see cref="T:System.Double"/>.
            </value>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.Randomize(System.Int32,System.Int32)">
            <summary>
            Randomizes the values writen in the matrix
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.GetRatioValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Gets the value that is
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="floor">The floor.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.HeatMapModel.ranger">
            <summary>
            Gets or sets the ranger.
            </summary>
            <value>
            The ranger.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.HeatMapModel.DetectMinMax">
            <summary>
            Sets the ranger
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.range.matrix.imageToHeatMap">
            <summary>
            Static methods for <see cref="T:imbSCI.Core.math.range.matrix.HeatMapModel"/> creation from images
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.imageToHeatMap.GetIntesity(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets average intesity of sample patch located at x/y
            </summary>
            <param name="grayImage">The gray image.</param>
            <param name="x">horizobtal index of the field</param>
            <param name="y">vertical index of the field</param>
            <param name="bs">Sample patch size (side of the sampling square, in pixels)</param>
            <returns>Mean brightness value for the patch at x,y</returns>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.imageToHeatMap.CreateFromImage(System.String,System.Int32,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Creates a heat map model from image file. Supported formats: JPEG, PNG, TIFF etc. See: <see cref="M:System.Drawing.Image.FromFile(System.String,System.Boolean)"/>
            </summary>
            <param name="imageFile">Path of the image file.</param>
            <param name="widthOfMap">The width of map - number of horizontal fields, vertical are computed in respect to image dimensional proportion </param>
            <param name="loger">The loger.</param>
            <returns>Heat map model, fields have mean brightness value</returns>
        </member>
        <member name="T:imbSCI.Core.math.range.matrix.proceduralHeatMapGenerator">
            <summary>
            Generator for <see cref="T:imbSCI.Core.math.range.matrix.HeatMapModel"/> using X and Y function arrays to set value
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.proceduralHeatMapGenerator.PresetSineWave">
            <summary>
            Generator for horizontal sine function waves
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.proceduralHeatMapGenerator.PresetDoubleSineWave(System.Double)">
            <summary>
            Generates sine function waves in both horizontal and vertical directions
            </summary>
            <param name="xVsYRatio">Weight of the horizontal sine function, complementary to the vertical sine function. </param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.proceduralHeatMapGenerator.xAxisFunction">
            <summary>
            Gets or sets the x axis function.
            </summary>
            <value>
            The x axis function.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.range.matrix.proceduralHeatMapGenerator.yAxisFunction">
            <summary>
            Gets or sets the y axis function.
            </summary>
            <value>
            The y axis function.
            </value>
        </member>
        <member name="M:imbSCI.Core.math.range.matrix.proceduralHeatMapGenerator.MakeHeatMap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders HeatMapModel of specified size
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.range.NamespaceDoc">
            <summary>
            Tools for numeric ranges: value scaling, looping, histogram generation, descriptive statistics and procedural matrix generation
            </summary>
            <remarks>
            The matrix generation uses <see cref="T:imbSCI.Core.math.functions.functionArray"/> and functions for procedural pattern generation.
            </remarks>
        </member>
        <member name="T:imbSCI.Core.math.range.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.math.range.numberRange">
            <summary>
            Scaling scalar numbers
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.numberRange.rangeChange(System.Single,System.Single,System.Single,imbSCI.Core.math.range.numberRangeModifyRule,System.String)">
            <summary>
            Održava vrednost u zadatom rasponu
            </summary>
            <param name="old">Postojeća vrednost</param>
            <param name="delta">Razlika kojom pravimo korekciju</param>
            <param name="max">Maksimalna vrednost</param>
            <param name="rule">Pravilo kojim menjamo vrednost</param>
            <param name="op">Operator koji se primenjuje</param>
            <returns>
            Broj koji je sigurno u rasponu
            </returns>
            <seealso cref="!:aceCommonTypes.extensions.imbValueChangers.checkRange(int,int,int,bool)"/>
        </member>
        <member name="M:imbSCI.Core.math.range.numberRange.calculate(System.Decimal,imbSCI.Core.enums.operation,System.Decimal)">
            <summary>
            Calculates the specified oper.
            </summary>
            <param name="ad">The ad.</param>
            <param name="oper">The oper.</param>
            <param name="bd">The bd.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.numberRange.calculate(System.Double,imbSCI.Core.enums.operation,System.Double)">
            <summary>
            Calculates the specified operation.
            </summary>
            <param name="a">a.</param>
            <param name="operation">The operation.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.numberRange.calculate(System.Boolean,imbSCI.Core.enums.operation,System.Boolean)">
            <summary>
            Calculates the specified operation.
            </summary>
            <param name="a">if set to <c>true</c> [a].</param>
            <param name="operation">The operation.</param>
            <param name="b">if set to <c>true</c> [b].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.range.numberRange.calculate(System.String,imbSCI.Core.enums.operation,System.String)">
            <summary>
            Calculates the specified operation.
            </summary>
            <param name="a">a.</param>
            <param name="operation">The operation.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.range.numberRangeModifyRule">
            <summary>
            Na koji način menjam boju
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangeModifyRule.clipToMax">
            <summary>
            Dodaje prosledjene vrednosti i ako dođu do maksimuma onda ih ostavi na maksimumu (ne važi za HUE)
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangeModifyRule.loop">
            <summary>
            Ako dođu do maksimuma vrati ih na početak
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangeModifyRule.set">
            <summary>
            Postavlja prosleđene vrednosti, bez obzira na trenutne vrednosti
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangeModifyRule.bypass">
            <summary>
            Prosleđuje staru vrednost
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangeModifyRule.multiply">
            <summary>
            Množi sa delta
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangeModifyRule.divide">
            <summary>
            Deli sa delta
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangeModifyRule.bounce">
            <summary>
            Returns value from limit for amount it was passing the limit
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.range.numberRangePresetEnum">
            <summary>
            Number scale (range) preset enumeration
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangePresetEnum.zeroToOne">
            <summary>
            The zero to one: from 0.0 to 1.0
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangePresetEnum.balancedHalfOne">
            <summary>
            The balanced half one: from -0.5 to +0.5
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.range.numberRangePresetEnum.balancedFullOne">
            <summary>
            The balanced full one: from -1 to +1
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.range.rangeCriteria`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:imbSCI.Core.interfaces.IRangeCriteria" />
        </member>
        <member name="M:imbSCI.Core.math.range.rangeCriteria`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.rangeCriteria`1"/> in disabled mode. It will return <c>false</c> on any test value before <see cref="M:imbSCI.Core.math.range.rangeCriteria`1.setCriteria(`0,System.Boolean)"/>  or <see cref="M:imbSCI.Core.math.range.rangeCriteria`1.setCriteria(`0,`0,System.Boolean)"/> was called
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.rangeCriteria`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.rangeCriteria`1"/> class in MinMax range mode. It will return <c>true</c> if test value is between or equal to Min and Max values.
            </summary>
            <param name="min">The minimum value of range. The range test will return <c>true</c> against exactly the same value.</param>
            <param name="max">The maximum value of range. The range test will return <c>true</c> against exactly the same value.</param>
            <param name="trueIfInside">if set to <c>false</c> the range test is inversed.</param>
        </member>
        <member name="M:imbSCI.Core.math.range.rangeCriteria`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.range.rangeCriteria`1"/> class in more or less mode. It will return <c>true</c> if test value is greater or equal than <c>even</c> (or lower in case <c>trueIfMore</c> was false)
            </summary>
            <param name="even">The even value to test against</param>
            <param name="trueIfMore">if set to <c>false</c> the test will return <c>true</c> for lower than <c>even</c> test value</param>
        </member>
        <member name="M:imbSCI.Core.math.range.rangeCriteria`1.setCriteria(`0,`0,System.Boolean)">
            <summary>
            Sets the criteria.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <param name="trueIfInside">if set to <c>true</c> [true if inside].</param>
        </member>
        <member name="M:imbSCI.Core.math.range.rangeCriteria`1.setCriteria(`0,System.Boolean)">
            <summary>
            Sets the criteria.
            </summary>
            <param name="even">The even.</param>
            <param name="trueIfMore">if set to <c>true</c> [true if more].</param>
        </member>
        <member name="P:imbSCI.Core.math.range.rangeCriteria`1.mode">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.rangeCriteria`1.min">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.rangeCriteria`1.even">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.rangeCriteria`1.max">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.rangeCriteria`1.isDisabled">
            <summary>
            if <c>True</c> test result is always <c>False</c>
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.rangeCriteria`1.testCriteria(`0)">
            <summary>
            Tests the value against criteria.
            </summary>
            <param name="testValue">The test value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:imbSCI.Core.math.range.rangeValueBase`1">
            <summary>
            Value limited within range
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbSCI.Core.math.range.rangeCriteria`1" />
        </member>
        <member name="P:imbSCI.Core.math.range.rangeValueBase`1.range">
            <summary>
            Value total range
            </summary>
        </member>
        <member name="P:imbSCI.Core.math.range.rangeValueBase`1.val">
            <summary>
            Current value - auto checked
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.range.rangeValueBase`1.checkValue(`0)">
            <summary>
            Forces value inside the range if not <see cref="P:imbSCI.Core.math.range.rangeCriteria`1.isDisabled"/> set <c>True</c>
            </summary>
            <param name="__val">The value to test against the range</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.math.range.rangeValueBase`1.rule">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.math.range.rangeValueEnum`1">
            <summary>
            Range value for enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:aceCommonTypes.math.rangeValueBase&lt;System.Int32&gt;" />
        </member>
        <member name="P:imbSCI.Core.math.range.rangeValueEnum`1.values">
             <summary>
            
             </summary>
            
        </member>
        <member name="T:imbSCI.Core.math.similarity.nGramsModeEnum">
            <summary>
            Mode of word decomposition
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.similarity.nGramsModeEnum.overlap">
            <summary>
            The overlap mode: e.g. for "category", N=2 it will produce: ca, at, te, eg, go, or, ry
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.similarity.nGramsModeEnum.ordinal">
            <summary>
            The ordinal mode: e.g. for "category", N=2 it will produce: ca, te, go, ry
            </summary>
        </member>
        <member name="T:imbSCI.Core.math.similarity.nGramsSimilarityEquationEnum">
            <summary>
            Equation to use for word to word similarity assesment
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.similarity.nGramsSimilarityEquationEnum.JaccardIndex">
            <summary>
            The Jaccard Index: <see cref="!:wordAnalysisTools.GetJaccardIndex(List&lt;string&gt;, List&lt;string&gt;)"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.similarity.nGramsSimilarityEquationEnum.DiceCoefficient">
            <summary>
            The dice coefficient: <see cref="!:wordAnalysisTools.GetDiceCoefficient(List&lt;string&gt;, List&lt;string&gt;)"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.similarity.nGramsSimilarityEquationEnum.continualOverlapRatio">
            <summary>
            The get continual overlap ratio: <see cref="!:wordAnalysisTools.GetContinualOverlapRatio(List&lt;string&gt;, List&lt;string&gt;)"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.math.similarity.nGramsSimilarityEquationEnum.KunchevaIndex">
            <summary>
            The kuncheva index
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisExtensions.GetSimilarity``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{``0}},imbSCI.Core.math.similarity.nGramsSimilarityEquationEnum)">
            <summary>
            Gets the similarity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sets">The sets.</param>
            <param name="equationEnum">The equation enum.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.similarity.setAnalysisTools`1">
            <summary>
            Static methods for word similarity computation (works with any string)
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisTools`1.GetSimilarity(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},imbSCI.Core.math.similarity.nGramsSimilarityEquationEnum)">
            <summary>
            Computes word similarity
            </summary>
            <param name="wordA">The word a.</param>
            <param name="wordB">The word b.</param>
            <param name="equationEnum">The equation enum.</param>
            <param name="nGramSize">Size of the n gram.</param>
            <param name="nGramMode">The n gram mode.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisTools`1.GetKunchevaIndex(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Ratio describes % of uninteruppted n-grams overlap. Example:  "elektromotorni", "motorski" = 5 / 14
            </summary>
            <param name="ngrams_A">The ngrams a.</param>
            <param name="ngrams_b">The ngrams b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisTools`1.GetContinualOverlapRatio(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            Ratio describes % of uninteruppted n-grams overlap. Example:  "elektromotorni", "motorski" = 5 / 14
            </summary>
            <param name="ngrams_A">The ngrams a.</param>
            <param name="ngrams_b">The ngrams b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisTools`1.getContinualOverlapR(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            Gets the continual overlap r.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisTools`1.GetJaccardIndex(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            Gets the index of the Jaccard index: number of common ngrams divided by number of total unique ngrams
            </summary>
            <param name="ngrams_A">The ngrams a.</param>
            <param name="ngrams_b">The ngrams b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisTools`1.GetDiceCoefficient(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            Gets the index of the Dice coefficient: number of common ngrams divided by number of n-grams in both sets
            </summary>
            <param name="ngrams_A">The ngrams a.</param>
            <param name="ngrams_b">The ngrams b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.similarity.setAnalysisTools`1.getNGrams(System.Collections.Generic.List{System.Collections.Generic.List{`0}},System.Int32,imbSCI.Core.math.similarity.nGramsModeEnum)">
            <summary>
            Breaks the specified word into <c>N</c>-grams
            </summary>
            <param name="word">The word to be splitted into n-grams</param>
            <param name="N">Size of N-grams, e.g. for bigrams: N=2</param>
            <param name="mode">The slicing mode</param>
            <returns>Set of NGrams</returns>
        </member>
        <member name="T:imbSCI.Core.math.StatisticsExtensions">
            <summary>
            Entropy, and some wrappers to <see cref="!:MathNet.Numerics"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.StatisticsExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Gets the statistics - <see cref="!:MathNet.Numerics.Statistics"/>
            </summary>
            <param name="rFreqs">The r freqs.</param>
            <param name="increasedAccuricy">if set to <c>true</c> [increased accuricy].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.StatisticsExtensions.GetVarianceCoefficient(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            The coefficient of variation (CV) is defined as the ratio of the standard deviation {\displaystyle \ \sigma } \ \sigma  to the mean {\displaystyle \ \mu } \ \mu :[1] {\displaystyle c_{\rm {v}}={\frac {\sigma }{\mu }}.} {\displaystyle c_{\rm {v}}={\frac {\sigma }{\mu }}.} It shows the extent of variability in relation to the mean of the population.
            </summary>
            <param name="rFreqs">The r freqs.</param>
            <param name="isSample">if set to <c>true</c> [is sample].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.StatisticsExtensions.GetVariance(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Gets the variance.
            </summary>
            <param name="rFreqs">The r freqs.</param>
            <param name="isSample">if set to <c>true</c> [is sample].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.StatisticsExtensions.GetStdDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Gets the standard deviation - just a wrapper <see cref="!:MathNet.Numerics.Statistics"/>
            </summary>
            <param name="rFreqs">The r freqs.</param>
            <param name="isSample">if set to <c>true</c> [population].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.math.StatisticsExtensions.GetEntropy(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean)">
            <summary>
            Calculates entropy, normalizes the output if <c>normalize</c> is <c>true</c>
            </summary>
            <param name="rFreqs">Unsorted array of relative requencies. Relative requency is calculated as absolute freq. / max. freq. </param>
            <param name="eps">The eps.</param>
            <param name="normalize">if set to <c>true</c> [normalize].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.math.transformation.circularDisplacer">
            <summary>
            Geometry/translation utility class, representing rotational turret/wheel with given number of <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/>.
            </summary>
            <remarks>
            <para>The class describes X,Y position and angular state (rotation by central Z axis). Provides methods for: central X,Y offset of <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/>s</para>
            <para>Use indexer (circularDisplacer[n]) to get <see cref="T:System.Drawing.PointF"/> offset for nest point <c>n</c></para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.math.transformation.circularDisplacer.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Creates instance with <c>nestCount</c> of <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/>s, placed in full circle, having even angular distances. The first <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/> has <see cref="P:imbSCI.Core.math.transformation.circularDisplacer.nestPoint.angularPosition"/> of the <c>zeroOffset</c>. The <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/>s are placed at <c>distance</c> from central point of the wheel
            </summary>
            <param name="nestCount">Number of <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/>s to create</param>
            <param name="zeroOffset">Angular starting point for the first nest point</param>
            <param name="distance">Distance from central point - to be set for all <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/>s.</param>
        </member>
        <member name="P:imbSCI.Core.math.transformation.circularDisplacer.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Drawing.PointF"/> with central offset of a <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/>, identified by <c>nestID</c>.
            </summary>
            <value>
            The <see cref="T:System.Drawing.PointF"/>, describing X,Y offset from central point of the <see cref="T:imbSCI.Core.math.transformation.circularDisplacer"/> instance and <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/> identified by <c>nestID</c>.
            </value>
            <param name="nestID">The nest identifier (from 0 to nest count-1). If negative value, it is interpreted as selecting the nest from end of the list, not from the begining.</param>
            <returns>Point with X and Y axis central point offset.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">nestID - There are no nestpoints defined in this instance! Seems you are using wrong constructor/instancing approach.</exception>
        </member>
        <member name="P:imbSCI.Core.math.transformation.circularDisplacer.points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>
            The points.
            </value>
        </member>
        <member name="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint">
            <summary>
            Describes one nest/point, in the <see cref="T:imbSCI.Core.math.transformation.circularDisplacer"/> turret. It is described by angular position and distance from the center
            </summary>
        </member>
        <member name="M:imbSCI.Core.math.transformation.circularDisplacer.nestPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.math.transformation.circularDisplacer.nestPoint"/> class.
            </summary>
            <param name="angle">The angle.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="P:imbSCI.Core.math.transformation.circularDisplacer.nestPoint.angularPosition">
            <summary>
            Gets or sets the angular position.
            </summary>
            <value>
            The angular position.
            </value>
        </member>
        <member name="P:imbSCI.Core.math.transformation.circularDisplacer.nestPoint.distanceFromCenter">
            <summary>
            Gets or sets the distance from center.
            </summary>
            <value>
            The distance from center.
            </value>
        </member>
        <member name="T:imbSCI.Core.NamespaceDoc">
            <summary>
            <para>Middle layer of the imbSCI libraries</para>
            </summary>
            <remarks>
            <para>At this namespace, you have control over Console output: <see cref="T:imbSCI.Core.screenOutputControl"/></para>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.NamespaceGroupDoc">
            <summary>
            <para>imbSCI.Core library of imbSCI module (imbVeles framework). Provides attributes for data annotation, data aggregation, reporting, PropertyExpression, type description data (advanced reflection), rich extensions library (data, enum works, input/output, math, DataTable, text manipulation, type works (enhanced reflection)), file-data structures, directory tree data model, string templates, color manipulation, HTML/Markdown creation ...</para>
            </summary>
            <remarks>
            <para>At this namespace, you have control over Console output: <see cref="T:imbSCI.Core.screenOutputControl"/></para>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.process.calculate">
            <summary>
            2014c> kalkulacije
            </summary>
        </member>
        <member name="M:imbSCI.Core.process.calculate.ratio(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Bezbedna kalkulacija ratio-a
            </summary>
            <param name="whole"></param>
            <param name="part"></param>
            <param name="valueOnDivideByZero"></param>
            <param name="valueOnDivideZero"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.process.dataLogic">
            <summary>
            Logika sabiranja vrednosti
            </summary>
        </member>
        <member name="F:imbSCI.Core.process.dataLogic.set">
            <summary>
            Osnovni: postavlja vrednost u polje
            </summary>
        </member>
        <member name="F:imbSCI.Core.process.dataLogic.setIfEmpty">
            <summary>
            Osnovni: postavlja vrednost u polje ako je postojeća vrednost Empty
            </summary>
        </member>
        <member name="F:imbSCI.Core.process.dataLogic.mlSumShort">
            <summary>
            sabira sve vrednosti iz multiline listi - rezultat ima dužinu kraćeg od dva niza
            </summary>
        </member>
        <member name="F:imbSCI.Core.process.dataLogic.mlSumLong">
            <summary>
            sabira sve vrednosti iz multiline listi - rezultat ima dužinu dužeg od dva niza
            </summary>
        </member>
        <member name="F:imbSCI.Core.process.dataLogic.newRow">
            <summary>
            Narediće imbDataSheet-u da napravi novi row
            </summary>
        </member>
        <member name="T:imbSCI.Core.process.imbDataConvertTools">
            <summary>
            2013: alati za konverziju vrednosti
            </summary>
        </member>
        <member name="M:imbSCI.Core.process.imbDataConvertTools.imbToVisibility(System.Boolean)">
            <summary>
            Iz Boolean vrednosti pravi Visibility
            </summary>
            <param name="isVisible"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.process.imbDataExecutor">
            <summary>
            PREVAZIDJENO
            </summary>
        </member>
        <member name="M:imbSCI.Core.process.imbDataExecutor.getStringValue(System.Object)">
            <summary>
            2013a> bezbedno vraca string verziju prosledjene vrednosti - Kreira stringValue
            </summary>
            <param name="input">Neki objekat koji treba da konvertuje</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.process.imbDataExecutor.executeLogic(imbSCI.Core.process.dataLogic,System.String,System.String)">
            <summary>
            Privremeni string wrapper
            </summary>
            <param name="logic"></param>
            <param name="operandA"></param>
            <param name="operandB"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.process.imbDataExecutor.executeLogic(imbSCI.Core.process.dataLogic,System.Object,System.Object)">
            <summary>
            Izvrsava jednostavnu logiku - i prosledjuje kompleksnoj ako je potrebno
            </summary>
            <param name="logic"></param>
            <param name="operandA">Domacin, target</param>
            <param name="operandB">Nova vrednost</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.process.imbDataExecutor.getStringOperator(imbSCI.Core.process.dataLogic)">
            <summary>
            Vraća NCalc string oblik logike
            </summary>
            <param name="logic"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.process.imbDataExecutor.getTypeName(System.String)">
            <summary>
            Obradjuje podatak iz ucitanog stringa
            </summary>
        </member>
        <member name="M:imbSCI.Core.process.imbDataExecutor.isSameValue(System.Object,System.Object,System.Type)">
             <summary>
            2013a> Proverava da li je prosledjena ista vrednost
             </summary>
             <param name="__valA"></param>
             <param name="__valB"></param>
             <param name="__targetType"></param>
             <returns></returns>
        </member>
        <member name="T:imbSCI.Core.process.imbDataExecutorEngine">
            <summary>
            Proširenje postojećih imbDataExecutor operacija
            Dodato prvi put zbog horizontalnog sabiranja brojeva iz stringova
            28. januar 2012
            </summary>
        </member>
        <member name="M:imbSCI.Core.process.imbDataExecutorEngine.executeMultilineLogic(imbSCI.Core.process.dataLogic,System.String,System.String)">
            <summary>
            Izvršava operaciju nad višelinijskim stringom
            </summary>
            <param name="logic"></param>
            <param name="operandA"></param>
            <param name="operandB"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.process.imbLogicComparator.imbLogicalOperator">
            <summary>
            način poređenja
            </summary>
        </member>
        <member name="M:imbSCI.Core.process.imbLogicComparator.compareBooleanValues(System.Object,System.Object,imbSCI.Core.process.imbLogicComparator.imbLogicalOperator)">
            <summary>
            Upoređuje dva Booleana
            </summary>
            <param name="operantA"></param>
            <param name="operantB"></param>
            <param name="comparator"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.process.NamespaceDoc">
            <summary>
            <para>Data processing (Obsolite)</para>
            </summary>
        </member>
        <member name="T:imbSCI.Core.process.resourceScope">
            <summary>
            Koji relatvni resursi su predmet selektovanja
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.aceLogToConsoleControl">
            <summary>
            Helper class that contains list of IConsoleControls that have permission to write to console
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.aceLogToConsoleControl.prefixRegistar">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.aceLogToConsoleControl.colorRegistar">
            <summary>Registar of color-to-source pairs</summary>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.setAsOnlyOutput(imbSCI.Core.reporting.IConsoleControl,System.String)">
            <summary>
            Sets as only output - removes all the rest
            </summary>
            <param name="loger">The loger.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.setLogFileWriter(System.String)">
            <summary>
            Sets the log file path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.aceLogToConsoleControl.logWritter">
            <summary>
            imbControl property logWritter tipa TextWriter
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.makeSureHaveDifferentColors(imbSCI.Core.reporting.IConsoleControl,imbSCI.Core.reporting.IConsoleControl)">
            <summary>
            Makes sure that <c>loggerA</c> and <c>loggerB</c> have different colors assigned for their outputs to the Console buffer.
            </summary>
            <param name="loggerA">The logger a.</param>
            <param name="loggerB">The logger b.</param>
            <returns>true if the loggers have different colors, false if one of loggers is not in the current output or if otherwise failed to update color of <c>loggerB</c></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.setAsOutput(imbSCI.Core.reporting.IConsoleControl,System.String,System.ConsoleColor)">
            <summary>
            Allows access to the console output bugger to the <c>logger</c> and sets its color and prefix. If you call this method on logger that was already set to output, it will result in changed color
            </summary>
            <param name="logger">The logger assigned to the console output</param>
            <param name="prefix">The prefix that will appear in front of each <see cref="!:IAceLogable.log(string)"/> call. It will update it if already registered prefix exist</param>
            <param name="preferedColor">If not <see cref="F:System.ConsoleColor.Black"/> - it will assign specified color to the logger. Otherwise, if <see cref="F:System.ConsoleColor.Black"/> is specified, it will assign automatically a color from the <see cref="F:imbSCI.Core.reporting.aceLogToConsoleControl.colorSelector"/></param>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.replaceOutput(imbSCI.Core.reporting.IConsoleControl,imbSCI.Core.reporting.IConsoleControl)">
            <summary>
            Replaces the two loggers in the console output
            </summary>
            <param name="oldLogger">The old loger.</param>
            <param name="newLogger">The new loger.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.aceLogToConsoleControl.convertToDos">
            <summary>
            IT will convert all characters sent to output into compatibile DOS encoding
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.aceLogToConsoleControl.encodeMode">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.preprocessMessage(System.String,imbSCI.Core.reporting.IConsoleControl)">
            <summary>
            Preprocesses the message.
            </summary>
            <param name="message">The message.</param>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.reporting.aceLogToConsoleControl.reg_highlight">
            <summary>
            The highlight regex - used for all console output
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.writeToConsole(System.String,imbSCI.Core.reporting.IConsoleControl,System.Boolean,System.Int32)">
            <summary>
            Writes to console.
            </summary>
            <param name="message">The message.</param>
            <param name="loger">The loger.</param>
            <param name="breakline">if set to <c>true</c> [breakline].</param>
            <param name="altColor">Color of the alt.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.aceLogToConsoleControl.noOneOnOutputNow">
            <summary>
            TRUE: when <see cref="P:imbSCI.Core.reporting.aceLogToConsoleControl.allowList"/> is empty. Then someone else may print out
            </summary>
            <value>
              <c>true</c> if [no one on output now]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.checkOutputPermission(imbSCI.Core.reporting.IConsoleControl)">
            <summary>
            Checks if this loger has output permission. Checks only the globaly defined list, not members of <see cref="T:imbSCI.Core.reporting.IConsoleControl"/>
            </summary>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.aceLogToConsoleControl.removeFromOutput(imbSCI.Core.reporting.IConsoleControl)">
            <summary>
            Removes this loger from output permission
            </summary>
            <param name="loger">The loger.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.aceLogToConsoleControl.allowList">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.appendBreakFlag">
            <summary>
            Flagovi - appendBreakFlag
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.appendBreakFlag.breakLine">
            <summary>
            Pocinje novu liniju, ili novi red ako je u pitanju spreadsheet dokument
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.aceBaseColorSetEnum">
            <summary>
            Presets
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.aceColorEntry">
            <summary>
            GUI framework - data model to save color definition
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="!:aceCommonTypes.interfaces.IHasDescribeMethod" />
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorEntry.baseColorHex">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorEntry.valueDelta">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorEntry.saturationDelta">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorEntry.hueDelta">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorEntry.makePath(System.String,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Makes the path for color variation definition cache file
            </summary>
            <param name="baseColorHex">The base color hexadecimal.</param>
            <param name="valueDelta">The value delta.</param>
            <param name="saturationDelta">The saturation delta.</param>
            <param name="hueDelta">The hue delta.</param>
            <param name="isForeColor">if set to <c>true</c> [is fore color].</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorEntry.path">
            <summary>
            putanja - unique ID
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorEntry.color">
            <summary>
            Wrappovan color objekat
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.aceColorLibrary">
            <summary>
            2013c: LowLevel resurs - GUI framework to store multiple aceColor definitions
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorLibrary.collection">
            <summary>
            Skup boja prema hexadecimalnoj vrednosti i parametrima modulacije
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.aceColorPalette">
            <summary>
            Klasa koja pravi set pozadina i boja za tekst na osnovu osnovne boje
            </summary>
            \ingroup_disabled report_ll
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.getColorWheel">
            <summary>
            Gets the color wheel.
            </summary>
            <param name="role">The role.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.name">
            <summary>
            Human name
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.getCSS(System.String)">
            <summary>
            Gets the CSS definition for this color pallete
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.path">
            <summary>
            jedinstvena id putanja
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.gDelta">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.hDelta">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.sDelta">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.vDelta">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.ccount">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.foreSnap">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.hexColor">
            <summary>
            Hexa decimalna vrednost boje
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.iconKey">
            <summary>
            Preporučena ikonica - takodje preuzima je i sa imbAttribute-a > menuItem
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.baseColor">
            <summary>
            Osnovna boja od koje je počela paleta
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.#ctor">
            <summary>
            blanko konstruktor
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.tpColors">
            <summary>
            On top of background
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.bgColors">
            <summary>
            Background colors in Drawing namespace
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.fgColors">
            <summary>
            foreground colors in Drawing namespace
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.#ctor(System.String,System.Single,System.Int32,System.Single,System.Single,System.Int32,System.Boolean,System.String)">
            <summary>
            Generiše paletu boja, pozadina i dodatnih brusheva
            </summary>
            <param name="hexBaseColor">HTML/Hexadecimalni format boja. npr: #FFCC00</param>
            <param name="gradientDelta">Kolika je razlika između gornjeg i donjeg kraja gradijenta, ~0.1</param>
            <param name="hDelta">Promena boje HUE</param>
            <param name="sDelta">Promena saturacije </param>
            <param name="vDelta">Promena svetline</param>
            <param name="colorCount">Koliko boja da generiše (min. 5)</param>
            <param name="foreColorSnap">Da li da koristi crnu i belu umesto obojenih foreground-a</param>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsOnTop0">
            <summary>
            Top colors colorsOnTop[0] (Color)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsOnTop1">
            <summary>
            Top colors colorsOnTop[1] (Color)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsOnTop2">
            <summary>
            Top colors colorsOnTop[2] (Color)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsOnTop3">
            <summary>
            Top colors colorsOnTop[3] (Color)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsOnTop4">
            <summary>
            Top colors colorsOnTop[4] (Color)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsOnTop">
            <summary>
            Boje za gornju stranu gradient brusha
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.customKeyId">
            <summary>
            custom key id
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsFore">
            <summary>
            Boje za foreground
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPalette.colorsBottom">
            <summary>
            Boje za donju stranu gradient brusha
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.clearCollections">
            <summary>
            Prazni sve kolekcije
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.createPalette(System.String)">
            <summary>
            (re)Generiše paletu boja - koristi postojeca podesavanja
            </summary>
            <param name="hexBaseColor">HTML/Hexadecimalni format boja. npr: #FFCC00</param>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPalette.createPalette(System.String,System.Single,System.Int32,System.Single,System.Single,System.Int32,System.Boolean,System.String)">
            <summary>
            Generiše paletu boja, pozadina i dodatnih brusheva
            </summary>
            <param name="hexBaseColor">HTML/Hexadecimalni format boja. npr: #FFCC00</param>
            <param name="gradientDelta">Kolika je razlika između gornjeg i donjeg kraja gradijenta, ~0.1</param>
            <param name="hDelta">Promena boje HUE</param>
            <param name="sDelta">Promena saturacije </param>
            <param name="vDelta">Promena svetline</param>
            <param name="colorCount">Koliko boja da generiše (min. 5)</param>
            <param name="foreColorSnap">Da li da koristi crnu i belu umesto obojenih foreground-a</param>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.aceColorPaletteForTypes">
            <summary>
            Part of GUI framework
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPaletteForTypes.defaultPalette">
            <summary>
            Podrazumevana paleta za null itd
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPaletteForTypes.collection">
            <summary>
            Recnik paleta za zadati tip
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.aceColorPaletteManager">
            <summary>
            Color and palette cache and constructor
            </summary>
            \ingroup_disabled report_ll
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPaletteManager.colorsLoaded">
            <summary>
            Koliko je novih boja kreirano
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPaletteManager.colorsCreated">
            <summary>
            Koliko je novih boja kreirano
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPaletteManager.colorsRetrieved">
            <summary>
            Koliko je puta boja vracena
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPaletteManager.paletteLibrary">
            <summary>
            Biblioteka paleta
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.aceColorPaletteManager.library">
            <summary>
            Biblioteka svih boja
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorPaletteManager.getPalette(System.String,System.String,System.String)">
            <summary>
            Ovo da koriste Manager staticke klase kada treba da oboje klase koji nisu iz mojih biblioteka
            </summary>
            <param name="sourceType"></param>
            <param name="basicColor"></param>
            <param name="_iconKey">Preporucena ikonica</param>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.aceColorTools">
            <summary>
            Default presets of HTML hex colors
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.aceColorTools.getSetOfColors(imbSCI.Core.reporting.colors.aceBaseColorSetEnum)">
            <summary>
            Gets the set of colors.
            </summary>
            <param name="preset">The preset.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.acePaletteProvider">
             <summary>
             Palette provider for <c>styleTheme</c>. Resulting colors and brushes depend on <c>mainState</c> values
             </summary>
             <remarks>
            
             </remarks>
             \ingroup_disabled report_ll
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.getColorWheel(imbSCI.Core.reporting.colors.acePaletteRole)">
            <summary>
            Gets the color wheel.
            </summary>
            <param name="role">The role.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.paletteWheel">
            <summary>
            circular access to palette
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.paletteRoleWheel">
            <summary>
            Provides next acePaletteRole
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteProvider.doAutoRebuildShotSets">
            <summary>
            Automatically build shot set collection on instancing
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.colors.acePaletteProvider"/> class using colors: #none, #colorA, #colorB, #colorC ...
            </summary>
            <param name="colors">List of hex base colors to derive palletes from> #000000.</param>
            <remarks>if there are more roles than supplied base colors - it will use light gray default color for all the rest</remarks>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.getColorVariationCodeName(imbSCI.Core.reporting.colors.acePaletteVariationRole,System.Boolean,imbSCI.Core.reporting.colors.acePaletteRole)">
            <summary>
            Gets the codename of the color variation.
            </summary>
            <param name="role">The role.</param>
            <param name="isInverse">if set to <c>true</c> [is inverse].</param>
            <param name="act">The act.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.rebuildShotSets">
            <summary>
            Rebuilds all values of the shot sets
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.getShotSet(imbSCI.Core.reporting.colors.acePaletteVariationRole)">
            <summary>
            Gets the palette shot set - by role and current state of provider
            </summary>
            <param name="role">The role.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.getShotSet(System.String)">
            <summary>
            Gets the palette shot set - by codename
            </summary>
            <param name="codeName">Name of the code.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.getShotSet(imbSCI.Core.reporting.colors.acePaletteVariationRole,System.Boolean,imbSCI.Core.reporting.colors.acePaletteRole)">
            <summary>
            Gets the palette shot set - by custom role, inverse and act
            </summary>
            <param name="role">The role.</param>
            <param name="isInverse">if set to <c>true</c> [is inverse].</param>
            <param name="act">The act.</param>
            <returns>ShotSet with all colors and brushes</returns>
            \ingroup_disabled report_ll_highlights
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.active">
            <summary>
            Currently active pallete role
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.revertVariation">
            <summary>
            Reverts the variation - loads save state into main state
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.saveVariation">
            <summary>
            Saves the variation state. Use <c>revertVariation()</c> to reload it.
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.setVariation(System.Int32,System.Boolean,System.Int32,System.Boolean,imbSCI.Core.reporting.colors.acePaletteRole)">
            <summary>
            Sets the variation.
            </summary>
            <param name="_bgIndex">Index of the bg.</param>
            <param name="_isInverse">if set to <c>true</c> [is inverse].</param>
            <param name="_fgIndex">Index of the fg.</param>
            <param name="itIsTemporary">if set to <c>true</c> it will save current state. Use <c>revertVariation()</c> to reload saved state</param>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.makePalleteShotSet(imbSCI.Core.reporting.colors.acePaletteVariationRole,System.Boolean,imbSCI.Core.reporting.colors.acePaletteRole)">
            <summary>
            Gets the color[] variation set for [0] background, [1] tp, [2] foreground
            </summary>
            <param name="_index">The index.</param>
            <param name="_isInverse">if set to <c>true</c> [is inverse].</param>
            <param name="act">Palette role</param>
            <returns>[0] background, [1] tp, [2] foreground</returns>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.current">
            <summary>
            Gets the current.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.state">
            <summary>
            active provider state
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.ccount">
            <summary>
            Number of color variations in the pallete
            </summary>
            <value>
            The ccount.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.bgColor">
            <summary>
            Gets the color of the bg.
            </summary>
            <value>
            The color of the bg.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.tpColor">
            <summary>
            Gets the color of the tp.
            </summary>
            <value>
            The color of the tp.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProvider.fgColor">
            <summary>
            Gets the color of the fg.
            </summary>
            <value>
            The color of the fg.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProvider.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.acePaletteProviderState">
            <summary>
            Set of properties that drive variations in palette application.
            </summary>
            \ingroup_disabled report_ll
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="T:System.ICloneable" />
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProviderState.bgIndex">
            <summary>
             index pointing to background color/brush
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProviderState.fgIndex">
            <summary>
            Foreground index
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProviderState.inverseState">
            <summary>
            Is foreground/background inversed?
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteProviderState.active">
            <summary>
            What palette is currently active?
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProviderState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.colors.acePaletteProviderState"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProviderState.#ctor(System.Int32,System.Int32,System.Boolean,imbSCI.Core.reporting.colors.acePaletteRole)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.colors.acePaletteProviderState"/> class.
            </summary>
            <param name="bg">The bg index</param>
            <param name="fg">The fg index</param>
            <param name="inverse">Inverse (bg/fg) state</param>
            <param name="act">Active palette</param>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProviderState.set(System.Int32,System.Int32,System.Boolean,imbSCI.Core.reporting.colors.acePaletteRole)">
            <summary>
            Sets the specified parameters (if input is not> -1, unknown, none)
            </summary>
            <param name="bg">The bg.</param>
            <param name="fg">The fg.</param>
            <param name="inverse">if set to <c>true</c> [inverse].</param>
            <param name="act">The act.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProviderState.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProviderState.checkIndexes(System.Int32)">
            <summary>
            Checks the indexes.
            </summary>
            <param name="ccount">The ccount.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteProviderState.Learn(System.Object)">
            <summary>
            Learns the specified source. Uses <see cref="M:imbSCI.Core.extensions.typeworks.imbTypeObjectOperations.setObjectBySource(System.Object,System.Object,System.String[])"/> for default implementation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.acePaletteRole">
            <summary>
            Enum for palette selection inside StyleTheme
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteRole.none">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteRole.colorA">
            <summary>
            The color a
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteRole.colorB">
            <summary>
            The color b
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteRole.colorC">
            <summary>
            The color c
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteRole.colorDefault">
            <summary>
            The default color
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteRole.colorD">
            <summary>
            The color d
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteRole.colorE">
            <summary>
            The color e
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.acePaletteShot">
            <summary>
            ShotSet is one particular styling situation delivered by <c>acePaletteProvider</c> containing color, brush and gradient for each ShotResEnum member
            </summary>
            <remarks>
            PaletteShotSet will be renderable as: a CSS block
            </remarks>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="M:imbSCI.Core.reporting.colors.acePaletteShot.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>
            Unique string to identify unique values
            </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShot.name">
            <summary>
            Unique name for this palete delivery
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.acePaletteShotPart">
            <summary>
            Containes one color/brush/gradient for particular purpose
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShotPart.index">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShotPart.color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShotPart.brush">
            <summary>
            Solid Color Brush
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShotPart.gradient">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShotPart.bottomColor">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShotPart.topColor">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.colors.acePaletteShotPart.hexColor">
            <summary>
            Color in hexa decimal
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.colors.acePaletteShotSetCollection">
            <summary>
            ShotSet collection
            </summary>
            <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.String, aceCommonTypes.colors.acePaletteShot&gt;" />
        </member>
        <member name="T:imbSCI.Core.reporting.colors.acePaletteVariationRole">
            <summary>
            Role per variation value
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteVariationRole.normal">
            <summary>
            The normal content> text etc
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteVariationRole.odd">
            <summary>
            Odd tr element
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteVariationRole.even">
            <summary>
            Even tr element
            </summary>
                    even = 2,
            <summary>
            The heading tags
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteVariationRole.heading">
            <summary>
            The heading tags
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteVariationRole.header">
            <summary>
            The th elements
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.colors.acePaletteVariationRole.none">
            <summary>
            Must stay the last enumeration --
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.extensions.imbStringTemplateExtensions">
            <summary>
            Extensions for easier application of <c>stringTemplate</c> mechanism
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.extensions.imbStringTemplateExtensions.isTemplate(System.String)">
            <summary>
            Determines whether this String has template placeholders
            </summary>
            <param name="template">The template.</param>
            <returns>
              <c>true</c> if the specified template is template; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.extensions.imbStringTemplateExtensions.applyToContent(System.String,System.Boolean,System.Data.PropertyCollection[])">
            <summary>
            Replaces all template placeholder fields if mached with <c>data</c>  PropertyCollection key values.
            </summary>
            <param name="template">Any string that has {{{}}} template tags within</param>
            <param name="dataset">Multiple PropertyCollection or IEnumerable collections with PropertyCollection instances</param>
            <param name="removeUnMatched">If TRUE it will remove all remaining/unmached tags in the last iteration / PropertyCollection supplied.</param>
            <returns>String with matched template tags replaced with content from <c>data</c> collection.</returns>
            <remarks>
            It uses internally <see cref="T:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection"/> for template mechanism.
            You may provide any and multiple IEnumerable PropertyCollection collections as part of <c>dataset</c> params array.
            </remarks>
            <example>
            <code>
                String templateString = "His is {{{title}}} {{{first_name}}} {{{last_name}}} working with {{{company_name}}}."
                String output = templateString.applyToContent(true, contactBean, accountBean);
            </code>
            Where <c>contactBean</c> and <c>accountBean</c> contain data from a corporate CRM.
            </example>
            <example>
            <code>
                String output = templateString.applyToContent(true, contactBean, allCrmBeans, accountBean);
            </code>
            Where <c>allCrmBeans</c> is IEnumerable with multiple PropertyCollection instances.
            </example>
        </member>
        <member name="M:imbSCI.Core.reporting.extensions.imbStringTemplateExtensions.getPlaceHolders(System.String)">
            <summary>
            Creates placeholder collection
            </summary>
            <param name="template">The template.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.extensions.imbStringTemplateExtensions.applyToContent(System.String,System.Data.PropertyCollection,System.Boolean)">
            <summary>
            Replaces all hard {{{data_fieldname}}} and soft {{data_fieldname}} fields if mached with <c>data</c>  PropertyCollection key values.
            </summary>
            <param name="template">Any string that has {{{}}} template tags within</param>
            <param name="data">Collection with <c>key</c> values matching template tags</param>
            <param name="removeUnMatched">If TRUE it will remove all remaining/unmached tags. Use this if collection is the last PropertyCollection to apply</param>
            <returns>String with matched template tags replaced with content from <c>data</c> collection</returns>
        </member>
        <member name="T:imbSCI.Core.reporting.format.pageFormat">
            <summary>
            Describes formatring of an page
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="T:imbSCI.Core.reporting.zone.cursorZoneExecutionSettings"/>
        </member>
        <member name="P:imbSCI.Core.reporting.format.pageFormat.mainColor">
            <summary>
            Sets color of tab and backgrouns
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.pageFormat.tabHeadColor">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.pageFormat.zoneSpatialPreset">
            <summary>
            Preset with padding, margin and other spatial configuration applicable on a page
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.pageFormat.zoneLayoutPreset">
            <summary>
            Preset to be applied once new page is started
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.format.reportAPI">
            <summary>
            Reporting API enumeration
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportAPI.imbReporting">
            <summary>
            The imb reporting - API for <see cref="!:imbSCI.Core.Builders.render.builders.builderForFlowDocument"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportAPI.textBuilder">
            <summary>
            The text builder - API for <see cref="!:builderForText"/>, <see cref="!:imbACE.Core.core.builderForLog"/>,
            <see cref="!:builderForMarkdown"/>, <see cref="!:builderForHtml"/>
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportAPI.EEPlus">
            <summary>
            <see cref="!:imbSCI.Core.Builders.render.builders.builderForTableDocument"/>
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.format.reportElementFormSet">
             <summary>
             Default output settings for metaContent elementLevel
             </summary>
             <remarks>
            
             </remarks>
             <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
             <seealso cref="T:imbSCI.Core.reporting.format.elementLevelFormPreset" />
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportElementFormSet.doTextShadowCopy">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportElementFormSet.doEnableNamedDivsToData">
            <summary>
            It will keep record for each named content section defined by: <see cref="!:aceCommonTypes.enums.appendType.c_open"/>  and <see cref="!:aceCommonTypes.enums.appendType.c_close"/> calls
            </summary>
            <remarks>
            To have this operational you must have <see cref="P:imbSCI.Core.reporting.format.reportElementFormSet.doTextShadowCopy"/> set to TRUE.
            </remarks>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportElementFormSet.doInMemoryOutputRepository">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportElementFormSet.doAutoUpdateStatusData">
            <summary>
            It will call autoupdate status data pn each scopeIn
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportElementFormSet.form">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportElementFormSet.nametemplate">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportElementFormSet.fileformat">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.format.reportOutputForm">
            <summary>
            form that one meta item takes during build
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputForm.none">
            <summary>
            Has no filesystem form
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputForm.folder">
            <summary>
            The folder
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputForm.inParentFile">
            <summary>
            It is part of parent's file
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputForm.file">
            <summary>
            The file
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputForm.unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.format.reportOutputFormat">
            <summary>
            Definitions of output forms, formats and so on
            </summary>
            <seealso cref="!:aceCommonTypes.collection.aceEnumDictionary&lt;aceCommonTypes.reporting.format.reportElementLevel, aceCommonTypes.reporting.format.reportElementFormSet&gt;" />
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportOutputFormat.disableNavigationBlocks">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportOutputFormat.presetSource">
            <summary>What preset was used to make this</summary>
        </member>
        <member name="T:imbSCI.Core.reporting.format.reportOutputFormatName">
            <summary>
            Format u kome se generise izvestaj
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.textFile">
            <summary>
            koristi obican text format
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.textLog">
            <summary>
            log file
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.serXml">
            <summary>
            The ser XML - object serialization result
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.sheetExcel">
            <summary>
            The sheet excel - single file, xlsx
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.sheetCsv">
            <summary>
            The sheet CSV - collection of - if worksheet containes more than one worksheet
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.sheetXML">
            <summary>
            The sheet XML - workbook xml
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.htmlReport">
            <summary>
            Koristi HTML format i default browser
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.folderReadme">
            <summary>
            Text file describing a folder
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.emailPlainText">
            <summary>
            obican text za email
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.format.reportOutputFormatName.emailHTML">
            <summary>
            HTML format za email
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.format.reportOutputSupport">
            <summary>
            Collection of supported reportOutputFormat as <c>Key</c> with default filename with extension as <c>Value</c>
            </summary>
            <seealso cref="T:System.Data.PropertyCollection" />
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.getFileInfo(System.String,System.IO.DirectoryInfo,imbSCI.Core.reporting.format.reportOutputFormatName,imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            Gets fileinfo
            </summary>
            <param name="filenameBase">Filename base - automatically trims any existing extension</param>
            <param name="dir">directorium to put file into</param>
            <param name="format">Targeted output format</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.getFilename(System.String,System.IO.DirectoryInfo,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Makes filename from <c>filenameBase</c> according to specified <c>format</c>.
            </summary>
            <param name="filenameBase">Filename base - automatically trims any existing extension</param>
            <param name="dir">directorium to put file into</param>
            <param name="format">Targeted output format</param>
            <returns>
            filename with proper extension
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">format</exception>
            <remarks>
            If <c>format</c> is not supported throws <see cref="T:System.ArgumentOutOfRangeException" />. For <c>none</c> returns default
            </remarks>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.getFilename(System.String,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Makes filename from <c>filenameBase</c> according to specified <c>format</c>.
            </summary>
            <remarks>If <c>format</c> is not supported throws <see cref="T:System.ArgumentOutOfRangeException"/>. For <c>none</c> returns default</remarks>
            <param name="filenameBase">Filename base - automatically trims any existing extension</param>
            <param name="format">Targeted output format</param>
            <returns>filename with proper extension</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">format</exception>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportOutputSupport.defaultFormat">
            <summary>
            Gets the default format.
            </summary>
            <value>
            The default format.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.getDefaultFormat">
            <summary>
            Provides default format
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.getFormatSupportFor(imbSCI.Core.reporting.format.reportAPI,System.String)">
            <summary>
            Gets the reportOutputSupport for an API
            </summary>
            <param name="api">The API.</param>
            <param name="filename_base">The filename base.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportOutputSupport.api">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.getFormatsFor(imbSCI.Core.reporting.format.reportAPI)">
            <summary>
            Gets the formats for API
            </summary>
            <param name="api">The API.</param>
            <returns>List of supported formats</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:imbSCI.Core.reporting.format.reportOutputSupport.supported">
            <summary>
            Report output formats that are supported by the API
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.#ctor(System.String,imbSCI.Core.reporting.format.reportOutputFormatName[])">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.format.reportOutputSupport"/> class.
            </summary>
            <param name="filename">The filename.</param>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.checkSupport(System.Boolean,imbSCI.Core.reporting.format.reportOutputFormatName[])">
            <summary>
            Checks collection of outputs for compatibility with API.
            </summary>
            <param name="exceptionOnNotSupported">if set to <c>true</c> [exception on not supported].</param>
            <param name="outputs">The outputs.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Format [" + format.ToString() + "] not supported by reporting API.</exception>
        </member>
        <member name="M:imbSCI.Core.reporting.format.reportOutputSupport.setSupport(System.String,imbSCI.Core.reporting.format.reportOutputFormatName[])">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.format.reportOutputSupport"/> class.
            </summary>
            <param name="filename">The filename.</param>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.geometrics.fourSideSetting">
            <summary>
            Struktura koja sadrzi> top, bottom, left i right podesavanje
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.geometrics.fourSideSetting.ToString(System.String,imbSCI.Data.enums.reporting.styleToStringFormat)">
            <summary>
            Make CSS ready string
            </summary>
            <param name="name">property name to be used as prefix in front of -top, -right...</param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.geometrics.fourSideSetting.getResized(System.Int32,System.Int32)">
            <summary>
            Changes all value for __change and upplies minimum limit on all four
            </summary>
            <param name="__change"></param>
            <param name="limit">Minimum value for all sides</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.geometrics.fourSideSetting.#ctor(System.Int32)">
            <summary>
            Equal value on all four sides <see cref="T:imbSCI.Core.reporting.geometrics.fourSideSetting"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.geometrics.fourSideSetting.top">
            <summary>
            count / ratio
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.geometrics.fourSideSetting.left">
            <summary>
            count / ratio
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.geometrics.fourSideSetting.right">
            <summary>
            count / ratio
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.geometrics.fourSideSetting.bottom">
            <summary>
            count / ratio
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.geometrics.imbMathExtensions.moveInnerByVector(imbSCI.Core.reporting.geometrics.fourSideSetting,imbSCI.Core.reporting.zone.selectRange)">
            <summary>
            Moves the resulting inner box by vector. X affects left-right, Y affects top-bottom
            </summary>
            <param name="padding">The fourSideSetting i.e. padding</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.geometrics.imbMathExtensions.moveTopLeftByVector(imbSCI.Core.reporting.geometrics.fourSideSetting,imbSCI.Core.reporting.zone.selectRange,System.Boolean)">
            <summary>
            Affects Top and Left values of four side settings
            </summary>
            <param name="padding">The fourSideSetting i.e. padding</param>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.geometrics.imbMathExtensions.toVector(imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Int32,imbSCI.Core.reporting.zone.selectRange)">
            <summary>
            Transforms direction to vector
            </summary>
            <param name="direction">The direction.</param>
            <param name="force">The force.</param>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.geometrics.imbMathExtensions.calcDiagonal(System.Int32,System.Int32)">
            <summary>
            Calculates the diagonal from two arcs with 90' between
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.globalMeasureUnitDictionary.tables">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.globalMeasureUnitDictionary.units">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.globalMeasureUnitDictionary.stats">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.htmlDefinitions">
            <summary>
            Definicije i konstante vezane za HTML
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.IAppendDataFields">
            <summary>
            Objects that have method for manual data field mapping (data for report templates)
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.IAppendDataFields.AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="T:imbSCI.Core.reporting.IAppendDataFieldsExtended">
            <summary>
            Class that supports AppendDataFields
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.IAppendDataFields" />
        </member>
        <member name="M:imbSCI.Core.reporting.IAppendDataFieldsExtended.AppendDataFields(imbSCI.Core.collection.PropertyCollectionExtended)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="T:imbSCI.Core.reporting.IConsoleControl">
            <summary>
            Interface for classes that perform procedures that are logging them self to the global console output. Members of this interface control access to the output.
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.IConsoleControl.VAR_AllowAutoOutputToConsole">
            <summary>
            Gets a value indicating whether [variable allow automatic output to console].
            </summary>
            <value>
              <c>true</c> if [variable allow automatic output to console]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.IConsoleControl.VAR_AllowInstanceToOutputToConsole">
            <summary>
            Gets or sets a value indicating whether [variable allow instance to output to console].
            </summary>
            <value>
              <c>true</c> if [variable allow instance to output to console]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbSCI.Core.reporting.ILogBuilder">
            <summary>
            Interface for loggers
            </summary>
            <seealso cref="T:imbSCI.Core.interfaces.ILogable" />
            <seealso cref="T:imbSCI.Core.interfaces.IAceLogable" />
            <seealso cref="T:imbSCI.Core.reporting.render.ITextRender" />
            <seealso cref="T:imbSCI.Core.reporting.IConsoleControl" />
        </member>
        <member name="M:imbSCI.Core.reporting.ILogBuilder.consoleAltColorToggle(System.Boolean,System.Int32)">
            <summary>
            Sets the alternative color mode for console output. Use set exact to set exactly the value for alternative color, otherwise it works in Toggle mode.
            </summary>
            <param name="altChange">The alt change.</param>
            <param name="setExact">if set to <c>true</c> [set exact].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.ILogBuilder.save(System.String)">
            <summary>
            Path where to save so far logged content
            </summary>
            <param name="destination_path">The destination path.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.imbReportingBindable">
             <summary>
            
             </summary>
             <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="T:imbSCI.Core.reporting.includes.enums.strapdown_themes">
            <summary>
            Themes supported by <c>strapdown</c> support package
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.includes.enums.strapdown_themes.simplex">
            <summary>
            The simplex 4/5
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.ITabLevelControler.tabInsert">
            <summary>
            Prefix koji se dodaje ispred teksta -- tabovi
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.ITabLevelControler.tabLevel">
            <summary>
            nivo na kome je tab sada
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.ITabLevelControler.linePrefix">
            <summary>
            Prefix koji se dodaje ispred svake linije
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.ITabLevelControler.nextTabLevel">
            <summary>
            Prelazi u sledeci tab level
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.ITabLevelControler.prevTabLevel">
            <summary>
            Prebacuje u prethodni tabLevel
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.ITabLevelControler.ToString">
            <summary>
            Vraca sadrzaj u String obliku
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.ITabLevelControler.close(System.String)">
            <summary>
            Dodaje HTML zatvaranje taga -- zatvara poslednji koji je otvoren
            </summary>
            <remarks>
            Ako je prosledjeni tag none onda zatvara poslednji tag koji je otvoren.
            </remarks>
            <param name="tag"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.ITabLevelControler.closeAll">
            <summary>
            Zatvara sve tagove koji su trenutno otvoreni
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.lowLevelApi.imbStringCSSExtensions">
            \ingroup_disabled report_ll
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringCSSExtensions.renderCssBlockForTag(imbSCI.Data.enums.appends.appendType,System.String)">
            <summary>
            Renders the CSS block for tag.
            </summary>
            <param name="type">The type.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringCSSExtensions.toHtmlTagName(imbSCI.Data.enums.appends.appendType)">
            <summary>
            Returns html tag name for appendType
            </summary>
            <param name="type"></param>
            <returns>only textual part of html tag</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringCSSExtensions.renderCssOpeningEntry(System.Collections.DictionaryEntry)">
            <summary>
            Returns opening line -- using values from special keys (tag_, class_, id_)
            </summary>
            <param name="entry"></param>
            <returns>CSS formated property string</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringCSSExtensions.renderCssInnerEntry(System.Collections.DictionaryEntry)">
            <summary>
            Returns key:value result in case key is not special one (tag_, class_, id_)
            </summary>
            <param name="entry"></param>
            <returns>CSS formated property string</returns>
        </member>
        <member name="T:imbSCI.Core.reporting.lowLevelApi.imbStringHTMLExtensions">
            \ingroup_disabled report_ll
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringHTMLExtensions.htmlTable(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            DataTable to markdown convertor
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringHTMLExtensions.HtmlList(System.Collections.IEnumerable,System.Boolean,System.Text.StringBuilder,System.Int32)">
            <summary>
            Creates list from collection of [strings, IEnumerable or Objects]
            </summary>
            <param name="list">IEnumerable may contain strings, IEnumerable or Object.toStringSafe()</param>
            <param name="isOrderedList">Is numeric or button list</param>
            <param name="sb">String builder</param>
            <param name="level">What is current level of list</param>
            <returns>Well formed markdown list</returns>
        </member>
        <member name="T:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions">
            <summary>
            Markdown creation toolkit
            </summary>
            ingroup report_ll
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.getTextSizeEnum(imbSCI.Data.enums.appends.appendType)">
            <summary>
            Gets the text size -- converts appendType
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.detectMarkdownStructure(System.String)">
            <summary>
            Try to detect what ever the tag is known structure tag or source code
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.detectMarkdownTagHeading(System.String)">
            <summary>
            Converting heading tags into proper markdown
            </summary>
            <param name="tag"></param>
            <param name="content"></param>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.markdownTag(System.String,System.String,imbSCI.Core.reporting.render.ITextRender)">
            <summary>
            Detects proper companion to HTML tag
            </summary>
            <param name="tag"></param>
            <param name="content"></param>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.markdownEscape(System.String)">
            <summary>
            Escapes reserved characters for markdown
            </summary>
            <param name="content">content send to wrap</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.markdown(imbSCI.Data.enums.appends.appendType,System.String)">
            <summary>
            Inverse call for markdownText extension
            </summary>
            <param name="type"></param>
            <param name="content">Content</param>
            <returns>Markdown code</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.__markdownText(System.String,imbSCI.Data.enums.appends.appendType)">
            <summary>
            Deploying markdown wrapping syntax
            </summary>
            <param name="content"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.markdownTable(System.Data.DataTable,System.Boolean)">
            <summary>
            DataTable to markdown convertor
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.markdownList(System.Collections.IEnumerable,System.Boolean,System.Text.StringBuilder,System.Int32)">
            <summary>
            Creates list from collection of [strings, IEnumerable or Objects]
            </summary>
            <param name="list">IEnumerable may contain strings, IEnumerable or Object.toStringSafe()</param>
            <param name="isOrderedList">Is numeric or button list</param>
            <param name="sb">String builder</param>
            <param name="level">What is current level of list</param>
            <returns>Well formed markdown list</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringMarkdownExtensions.markdownLink(System.String,System.String,System.String,imbSCI.Data.enums.appends.appendLinkType)">
            <summary>
            Creates markdown link, image, reference or referencedLink
            </summary>
            <param name="url"></param>
            <param name="name"></param>
            <param name="caption"></param>
            <param name="linkType"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.lowLevelApi.imbStringPlainTextExtensions">
            \ingroup_disabled report_ll
        </member>
        <member name="T:imbSCI.Core.reporting.lowLevelApi.imbStringTextExtensions">
            <summary>
            Markdown creation toolkit
            </summary>
            \ingroup_disabled report_ll
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringTextExtensions.plainText(imbSCI.Data.enums.appends.appendType,System.String)">
            <summary>
            Inverse call for markdownText extension
            </summary>
            <param name="type"></param>
            <param name="content">Content</param>
            <returns>Markdown code</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringTextExtensions.plainText(System.String,imbSCI.Data.enums.appends.appendType)">
            <summary>
            Deploying markdown wrapping syntax
            </summary>
            <param name="content"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringTextExtensions.textTable(System.Data.DataTable,System.Int32)">
            <summary>
            DataTable to markdown convertor
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringTextExtensions.textList(System.Collections.IEnumerable,System.Boolean,System.Text.StringBuilder,System.Int32)">
            <summary>
            Creates list from collection of [strings, IEnumerable or Objects]
            </summary>
            <param name="list">IEnumerable may contain strings, IEnumerable or Object.toStringSafe()</param>
            <param name="isOrderedList">Is numeric or button list</param>
            <param name="sb">String builder</param>
            <param name="level">What is current level of list</param>
            <returns>Well formed markdown list</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.imbStringTextExtensions.textLink(System.String,System.String,System.String,imbSCI.Data.enums.appends.appendLinkType)">
            <summary>
            Creates markdown link, image, reference or referencedLink
            </summary>
            <param name="url"></param>
            <param name="name"></param>
            <param name="caption"></param>
            <param name="linkType"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.lowLevelApi.StringUtils.ToDelimitedString(System.Collections.Generic.List{System.String},System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Takes a List collection of string and returns a delimited string.  Note that it's easy to create a huge list that won't turn into a huge string because
            the string needs contiguous memory.
            </summary>
            <param name="list">The input List collection of string objects</param>
            <param name="delimiter">The delimiter.</param>
            <param name="insertSpaces">Whether to insert a space after each separator</param>
            <param name="qualifier">The default delimiter. Using a colon in case the List of string are file names,
            since it is an illegal file name character on Windows machines and therefore should not be in the file name anywhere.</param>
            <param name="duplicateTicksForSQL">if set to <c>true</c> [duplicate ticks for SQL].</param>
            <returns>
            A delimited string
            </returns>
            <remarks>
            This was implemented pre-linq
            </remarks>
        </member>
        <member name="T:imbSCI.Core.reporting.NamespaceDoc">
            <summary>
            Core namespace of reporting functionality: Logger, Markdown, HTML, Exce... generators, gasic elements of Text User Interface, color manipulation, string templating
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.reporting.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.reporting.render.builderSelector">
            <summary>
            Builder selector by target format
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="M:imbSCI.Core.reporting.render.builderSelector.#ctor(imbSCI.Core.reporting.format.reportAPI,imbSCI.Core.reporting.format.elementLevelFormPreset)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.render.builderSelector"/> class.
            </summary>
            <param name="api">The API.</param>
            <param name="formPreset">The form preset.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.render.builderSelector.settings">
            <summary>
            Builder settings
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builderSelector.Add(imbSCI.Core.reporting.format.reportAPI)">
            <summary>
            Automatically sets render and formats
            </summary>
            <param name="api">The API.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builderSelector.Add(imbSCI.Core.reporting.render.ITextRender)">
            <summary>
            Adds new builder into selector. If it supports a same format than the one added earlier - the most recently added will manage the format
            </summary>
            <param name="newBuilder">The new builder.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builderSelector.Add(imbSCI.Core.reporting.render.ITextRender,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Adds the specified new builder to particular output format
            </summary>
            <param name="newBuilder">The new builder.</param>
            <param name="fn">The function.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builderSelector.setActiveElementLevelFormPreset(imbSCI.Core.reporting.format.elementLevelFormPreset)">
            <summary>
            Sets the active <see cref="T:imbSCI.Core.reporting.format.elementLevelFormPreset"/>
            </summary>
            <param name="preset">The preset.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builderSelector.setActiveOutputFormat(imbSCI.Core.reporting.format.reportOutputFormatName,imbSCI.Core.reporting.format.elementLevelFormPreset)">
            <summary>
            Sets the active output format.
            </summary>
            <param name="__format">The format.</param>
            <param name="formPreset">The form preset.</param>
            <exception cref="T:System.Exception">Builder instance has no IRender-er for format:" + __format.ToString() + ". call builder.Add() with proper builder before setting this format as active output format.</exception>
        </member>
        <member name="P:imbSCI.Core.reporting.render.builderSelector.format">
            <summary>
            Active format used by i.e. <see cref="M:imbSCI.Core.reporting.render.ITextRender.saveDocument(System.IO.FileInfo)"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builderSelector.clearAllBuilders">
            <summary>
            Clears all builders.
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.builderSelector.documentBuilder">
            <summary>
            Gets the document builder for the active <c>format</c>
            </summary>
            <value>
            The text builder.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForGutenberg.AppendImage(System.String,System.String,System.String)">
            <summary>
            Appends the image tag/call.
            </summary>
            <param name="imageSrc">Source url/path of the image</param>
            <param name="imageAltText">The image alt text.</param>
            <param name="imageRef">Caption below the image</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForHtml.AppendCode(System.String,System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <param name="codetypename"></param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="T:imbSCI.Core.reporting.render.builders.builderForLogBase">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Core.reporting.render.builders.builderForText" />
             <seealso cref="T:imbSCI.Core.reporting.ILogBuilder" />
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForLogBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.render.builders.builderForLogBase"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.builders.builderForLogBase.logContent">
            <summary>
            Gets the content of the log.
            </summary>
            <value>
            The content of the log.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForLogBase.log(System.String)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForLogBase.logEndPhase">
            <summary>
            Logs the end phase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForLogBase.logStartPhase(System.String,System.String)">
            <summary>
            Logs the start phase.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForLogBase.save(System.String)">
            <summary>
            Saves the content to the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.render.builders.builderForMarkdown">
            <summary>
            Base class for all MarkdoenBuilder writters or renderrers
            </summary>
            \ingroup_disabled report_int
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendImage(System.String,System.String,System.String)">
            <summary>
            Appends the image tag/call.
            </summary>
            <param name="imageSrc">Source url/path of the image</param>
            <param name="imageAltText">The image alt text.</param>
            <param name="imageRef">The image reference ID used internally</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendMath(System.String,System.String)">
            <summary>
            Inserts <c>mathFormula</c> block
            </summary>
            <param name="mathFormula">The math formula: LaTeX, KaTex, asciimath...</param>
            <param name="mathFormat">The math format used to describe the formula</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendLabel(System.String,System.Boolean,System.Object)">
            <summary>
            Appends the content with label decoration
            </summary>
            <param name="content">The content to show inside label</param>
            <param name="isBreakLine">if set to <c>true</c> if will break line after this append</param>
            <param name="comp_style">Special style tag, class, definition.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendPanel(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates panel with <c>content</c> and (optionally) with <c>comp_heading</c> and <c>comp_description</c> as footer.
            </summary>
            <param name="content">String content to place inside the panel</param>
            <param name="comp_heading">The heading for the panel. If blank panel will have no heading</param>
            <param name="comp_description">Description to be placed at bottom of the panel</param>
            <param name="comp_style">Special style tag, class, definition.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.render.builders.builderForMarkdown.content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendTableRow(imbSCI.Core.reporting.colors.acePaletteVariationRole,System.String[])">
            <summary>
            Appends the table row.
            </summary>
            <param name="role">The role.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendPair(System.String,System.Object,System.Boolean,System.String)">
            <summary>
            Renders key-> value pair
            </summary>
            <param name="key">Property name or collection key</param>
            <param name="value">ToString value</param>
            <param name="breakLine">should break line </param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.Append(System.String,imbSCI.Data.enums.appends.appendType,System.Boolean)">
            <summary>
            Appends inline or new line content
            </summary>
            <param name="content">String content to be wrapped into container</param>
            <param name="type">Container type - for text it is always none</param>
            <param name="breakLine">Inline (FALSE) or new line (TRUE)</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendList(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Renders IEnumerable that may contain other IEnumerables
            </summary>
            <param name="content">Collection with objects and/or subcollections</param>
            <param name="isOrderedList">On TRUE it will be ordered list with number, FALSE will create button list</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendLink(System.String,System.String,System.String,imbSCI.Data.enums.appends.appendLinkType)">
            <summary>
            Renders link, image or reference
            </summary>
            <param name="url">url or reference id</param>
            <param name="name">Name of link</param>
            <param name="caption">Title - popup content</param>
            <param name="linkType">Select if output is link, image or reference</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Renders DataTable
            </summary>
            <param name="table"></param>
            <param name="doThrowException"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.open(System.String,System.String,System.String)">
            <summary>
            Opens the specified tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="title"></param>
            <param name="description"></param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.close(System.String)">
            <summary>
            Dodaje HTML zatvaranje taga -- zatvara poslednji koji je otvoren
            </summary>
            <param name="tag"></param>
            <returns></returns>
            <remarks>
            Ako je prosledjeni tag none onda zatvara poslednji tag koji je otvoren.
            </remarks>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendCode(System.String,System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <param name="codetypename"></param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendFrame(System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Frame puts the content with \> prefix. Multiline content is supported <c></c>
            </summary>
            <param name="content">Initial content</param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="title">Title of the section</param>
            <param name="footnote">Description under the section</param>
            <param name="paragraphs">Additional paragraphs to place inside</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForMarkdown.AppendSection(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new section with title and content. Optionally it may contain: additional paragraphs for content and footnote on bottom
            </summary>
            <param name="content">Main content of the section</param>
            <param name="title">Title of the section</param>
            <param name="footnote">Description under the section</param>
            <param name="paragraphs">Additional paragraphs to place inside</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="T:imbSCI.Core.reporting.render.builders.builderForStyle">
            <summary>
            Basic builder for styles
            </summary>
            \ingroup_disabled report_int
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.Append(System.String,imbSCI.Core.reporting.style.enums.HtmlTextWriterStyle,System.Boolean)">
            <summary>
            Appends the specified content.
            </summary>
            <param name="content">The content.</param>
            <param name="type">The type.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.AppendHorizontalLine">
            <summary>
            Adds horizontal line
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.AppendList(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Renders list and sublists
            </summary>
            <param name="content"></param>
            <param name="isOrderedList"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.AppendPair(imbSCI.Core.reporting.style.enums.HtmlTextWriterStyle,System.Object,System.Boolean,System.String)">
            <summary>
            Appends the pair.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
            <param name="between">The between.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.Append(System.String,imbSCI.Data.enums.appends.appendType,System.Boolean)">
            <summary>
            Appends inline or in new line
            </summary>
            <param name="content">String to add</param>
            <param name="type">Disabled</param>
            <param name="breakLine">On TRUE it will break into new line</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.AppendFrame(System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            HTML/XML adds <c></c>
            </summary>
            <param name="content">Initial content</param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="title">Title of the section</param>
            <param name="footnote">Description under the section</param>
            <param name="paragraphs">Additional paragraphs to place inside</param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.AppendPairs(System.Data.PropertyCollection,System.Boolean,System.String)">
            <summary>
            Inserts line for each DictionaryEntry in data. Key is mapped to CSS property, Value is value, unit is sufix added. Special keys starting with: tag_, class_, id_ == > requred for css definition initiation
            </summary>
            <param name="data"> Key is mapped to CSS property - or ID, class, tag selector if in special format</param>
            <remarks>Implementation modified: between now goes to last position - its purpose is to represent unit of measurement (px, em...)</remarks>
            <returns>Complete CSS definition with { }</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.AppendSection(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new CSS definition for section . Optionally it may contain: additional paragraphs for content and footnote on bottom
            </summary>
            <param name="content">Main content of the section</param>
            <param name="title">Title of the section</param>
            <param name="footnote">Description under the section</param>
            <param name="paragraphs">Additional paragraphs to place inside</param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.builders.builderForStyle.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.builders.builderForText">
            <summary>
            Builder for text output
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.render.core.imbStringBuilderBase" />
            <seealso cref="T:imbSCI.Core.reporting.render.ITextRender" />
        </member>
        <member name="T:imbSCI.Core.reporting.render.builders.ICodeRender">
            <summary>
            
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.config.builderSettings">
            <summary>
            Define way build process is performed
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.builderSettings.formats">
            <summary>
            Gets the output support definition for this report kind
            </summary>
            <value>
            The object containing output support info
            </value>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.builderSettings.api">
            <summary>
            this builder is part of what api
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.builderSettings.cursorBehaviour">
            <summary>
            way cursor and zone behaves
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.builderSettings.supportedAppends">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.builderSettings.forms">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.dataValueFormatInfo.directAppend">
            <summary>
            Avoid markdown, XML or html escaping
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.dataValueFormatInfo.valueFormat">
            <summary>
            String format to use for value to string transformation
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.dataValueFormatInfo.position">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.config.dataValueFormatInfo.importance">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.contentControl.stringBuilderControler">
            <summary>
            Main and subcontent controller - a helper class for <c>ITextRender</c>, <c>IDocumentRender</c>, <c>IRender</c>
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.imbReportingBindable" />
        </member>
        <member name="M:imbSCI.Core.reporting.render.contentControl.stringBuilderControler.getDataset(System.Boolean)">
            <summary>
            Retrieves all subcontents and optionaly the main subcontent - as PropertyCollection
            </summary>
            <returns>Key: <see cref="T:imbSCI.Data.enums.fields.templateFieldSubcontent"/> / Value: <see cref="T:System.Text.StringBuilder"/> </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.contentControl.stringBuilderControler.active">
            <summary>
            Determinates the active StringBuilder
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.contentControl.stringBuilderControler.switchToBack">
            <summary>
            Switched to previous subcontent or to the main content if there were no subcontent keys in history
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.contentControl.stringBuilderControler.sb">
            <summary>
            Gets the active StringBuilder - equeal to <c>this[active]</c>
            </summary>
            <value>
            Equeal to <c>this[active]</c>
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.contentControl.stringBuilderControler.Item(imbSCI.Data.enums.fields.templateFieldSubcontent)">
            <summary>
            Gets the <see cref="T:System.Text.StringBuilder" /> under the specified key.
            </summary>
            <value>
            The <see cref="T:System.Text.StringBuilder" />.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.contentControl.stringBuilderControler.registry">
            <summary>
            Container for string builders
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.render.converters.bootstrap_size.lg">
            <summary>
            Large
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.render.converters.bootstrap_size.md">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.render.converters.bootstrap_size.sm">
            <summary>
            Small
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.render.converters.bootstrap_size.xs">
            <summary>
            ExtraSmall
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.converters.converterBase.GetButton(System.String,System.String,System.String,System.String)">
            <summary>
            Makes Bootstrap button.
            </summary>
            <param name="btn_caption">The BTN caption.</param>
            <param name="btn_url">The BTN URL.</param>
            <param name="btn_color">Color of the BTN.</param>
            <param name="btn_size">Size of the BTN.</param>
            <returns>Bootstrap HTML</returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.converters.converterBase.containerEnumType">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.converters.converterBase.templateEnumType">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.converters.converterEnumBase`4.containerEnumValues">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.converters.converterEnumBase`4.templateEnumValues">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.converters.converterEnumBase`4.GetButton(System.String,System.String,`2,`3)">
            <summary>
            Makes Bootstrap button.
            </summary>
            <param name="btn_caption">The BTN caption.</param>
            <param name="btn_url">The BTN URL.</param>
            <param name="btn_color">Color of the BTN.</param>
            <param name="btn_size">Size of the BTN.</param>
            <returns>Bootstrap HTML</returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.converters.converterForBootstrap3.converterInsert">
            <summary>
            Represented by {{{c}}} in templates
            </summary>
            <value>
            The converter insert.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.converters.converterForBootstrap3.templates">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2">
            <summary>
            Base class for document builders:  XLS, RTF, PDF, HTML ...
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.render.core.imbStringBuilderBase" />
            <seealso cref="T:imbSCI.Core.reporting.render.ITextRender" />
            <seealso cref="T:imbSCI.Core.reporting.render.IDocumentRender" />
            <typeparam name="TDoc">Output DOM/Object</typeparam>
            <typeparam name="TPage">Type created as new Page</typeparam>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.paletteProvider">
            <summary>
            ACE PaletteProvider
            </summary>
            <value>
            The palette provider from <c>styleTheme</c>
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.context">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.setContext(imbSCI.Core.reporting.render.IRenderExecutionContext)">
            <summary>
            deploys style and palette provider
            </summary>
            <param name="__style">The style.</param>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.getDocument">
            <summary>
            Gets the document instance - current document
            </summary>
            <remarks>
            Usual application do not require document instance outside of builder class.
            But if you need some special thing to do.. here it is
            </remarks>
            <returns></returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.loadDocument(System.String,System.String,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Loads the document from filepath into internal object of TDoc type as current document
            </summary>
            <param name="filepath">The filepath.</param>
            <returns>FileInfo pointing to the loaded document</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.addDocument(System.String,System.Boolean,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Creates new document both in filesytem and internal memory. Location for new file is current directory.
            </summary>
            <param name="name">Name of new document. It will transform it to filename version and add proper file extension. No problem if you put extension alone.</param>
            <param name="mode">How any existing file should be handled</param>
            <returns>Newly created document</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.saveDocument(System.String,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Saves the current document, returns <c>FileInfo</c> pointing to it
            </summary>
            <param name="name">The name without extension</param>
            <param name="mode">Existing file mode</param>
            <returns>File info pointing to</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.addPage(System.String,System.Boolean,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Adds new page, drives cursor to upper-left corner
            </summary>
            <param name="name">The name of newly created page.</param>
            <param name="mode">In case page with the same name already exists</param>
            <returns>Page object - usually not directly used</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.getPage(System.String)">
            <summary>
            Gets the page - if name is empty returns the current page
            </summary>
            <param name="name">The name to use as selector</param>
            <returns>Page object</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.scopeDocument(System.Object)">
            <summary>
            Scopes the document.
            </summary>
            <param name="toDocument">To document.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.scopePage(System.Object)">
            <summary>
            Scopes the page.
            </summary>
            <param name="toPage">To page.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.savePage(System.String,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Saves the document containing this page.
            </summary>
            <returns></returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.page">
            <summary>
            current page
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.document">
            <summary>
            document being built
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.theme">
            <summary>
            Gets or sets the style.
            </summary>
            <value>
            The style.
            </value>
            \ingroup_disabled renderapi_service
        </member>
        <member name="F:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.applyCallDefaultTarget">
            <summary>
            Aapply call default target - used when <c>metaModelTargetEnum.defaultTarget</c> argument is passed
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.AppendInfo(System.Data.PropertyCollection,System.Boolean,imbSCI.Data.enums.fields.templateFieldBasic[])">
            <summary>
            Sets document description information
            </summary>
            <param name="data">Property collection that applies info</param>
            <param name="alsoAppendAsPairs">If TRUE it will also create output using <c>AppendPairs</c> method</param>
            <param name="fieldsToUse">What fields to use?</param>
            <returns>DOM of created Pairs - if <c>alsoAppendAsPairs</c> was TRUE</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.loadPage(System.String,System.String)">
            <summary>
            Loads the page from filepath. If it is document type then imports page with targeted name
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.imbSCI#Core#reporting#render#ITextRender#getDocument">
            <summary>
            Gets the document instance - current document
            </summary>
            <returns></returns>
            <remarks>
            Usual application do not require document instance outside of builder class.
            But if you need some special thing to do.. here it is
            </remarks>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.imbSCI#Core#reporting#render#ITextRender#addPage(System.String,System.Boolean,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Adds new page, drives cursor to upper-left corner
            </summary>
            <param name="name">The name of newly created page.</param>
            <param name="scopeToNew"></param>
            <param name="mode">In case page with the same name already exists</param>
            <returns>
            Page object - usually not directly used
            </returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbDocumentBuilderBase`2.imbSCI#Core#reporting#render#IDocumentRender#getPage(System.String)">
            <summary>
            Gets the page - if name is empty returns the current page
            </summary>
            <param name="name">The name to use as selector</param>
            <returns>
            Page object
            </returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="T:imbSCI.Core.reporting.render.core.imbStringBuilderBase">
             \addtogrpup renderapi
             RenderAPI: IRender, ITextRender and IDocumentRender methods
            
             \addtogroup_disabled renderapi_style
             RenderAPI: Styling methods
             \ingroup_disabled renderapi
            
             \addtogroup_disabled renderapi_append
             RenderAPI: Content append methods
             \ingroup_disabled renderapi
            
             \addtogroup_disabled renderapi_service
             RenderAPI: Logistics, resources and settings
             \ingroup_disabled renderapi
            <summary>
            Basic level render mechanism. Inherited by [Markdown, Style, Text] builders ... builders. Planed: [HTML, XML] [XLS, CSV, ODS] [RTF, Word, PDF] builders
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TG"></typeparam>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.VAR_AllowAutoOutputToConsole">
            <summary>
            Gets a value indicating whether [variable allow automatic output to console].
            </summary>
            <value>
            <c>true</c> if [variable allow automatic output to console]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.isEnabled">
            <summary>If <c>true</c> it will allow append of new content, if <c>false</c> it will ignore any append call</summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.VAR_AllowInstanceToOutputToConsole">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.writeToConsoleAltColor">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.consoleAltColorToggle(System.Boolean,System.Int32)">
            <summary>
            Sets the alternative color mode for console output. Use set exact to set exactly the value for alternative color, otherwise it works in Toggle mode.
            </summary>
            <param name="altChange">The alt change.</param>
            <param name="setExact">if set to <c>true</c> [set exact].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.writeToConsole(System.String,System.Boolean)">
            <summary>
            Should be called on every base append if allowed
            </summary>
            <param name="content">The content.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendDirect(System.String)">
            <summary>
            Direct content injection, bypassing all internal transformations by class implementing <see cref="T:imbSCI.Core.reporting.render.ITextRender" />
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendToFile(System.String,System.String)">
            <summary>
            Saves <c>content</c> to specified path. Path is local to context scope
            </summary>
            <param name="outputpath">The filepath, including filename and extension</param>
            <param name="content">Any string content</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendFromFile(System.String,imbSCI.Data.enums.fields.templateFieldSubcontent,System.Boolean)">
            <summary>
            Loads content from <c>sourcepath</c> into renderer [if <c>datakey</c> is <see cref="F:imbSCI.Data.enums.fields.templateFieldSubcontent.none" /> or into data field if specified.
            </summary>
            <param name="sourcepath">The sourcepath.</param>
            <param name="datakey">The datakey.</param>
            <param name="isLocalSource">if set to <c>true</c> <c>sourcepath</c> is interpreted as local to context. This parameter has no effect when used on builder directly</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.converter">
            <summary> </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendFile(System.String,System.String,System.Boolean)">
            <summary>
            File from <c>sourcepath</c> is copied to <c>outputpath</c> or used as data template if <c>isDataTeplate</c> is true
            </summary>
            <param name="sourcepath">The sourcepath - within application directory</param>
            <param name="outputpath">The outputpath - local to context</param>
            <param name="isDataTemplate">if set to <c>true</c> the <c>soucepath</c> content will be processed as data template before saving output to <c>outputpath</c></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendImage(System.String,System.String,System.String)">
            <summary>
            Appends the image tag/call.
            </summary>
            <param name="imageSrc">Source url/path of the image</param>
            <param name="imageAltText">The image alt text.</param>
            <param name="imageRef">The image reference ID used internally</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendMath(System.String,System.String)">
            <summary>
            Inserts <c>mathFormula</c> block
            </summary>
            <param name="mathFormula">The math formula: LaTeX, KaTex, asciimath...</param>
            <param name="mathFormat">The math format used to describe the formula</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendLabel(System.String,System.Boolean,System.Object)">
            <summary>
            Appends the content with label decoration
            </summary>
            <param name="content">The content to show inside label</param>
            <param name="isBreakLine">if set to <c>true</c> if will break line after this append</param>
            <param name="comp_style">Special style tag, class, definition.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendPanel(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates panel with <c>content</c> and (optionally) with <c>comp_heading</c> and <c>comp_description</c> as footer.
            </summary>
            <param name="content">String content to place inside the panel</param>
            <param name="comp_heading">The heading for the panel. If blank panel will have no heading</param>
            <param name="comp_description">Description to be placed at bottom of the panel</param>
            <param name="comp_style">Special style tag, class, definition.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendCheckList(imbSCI.Core.collection.checkLists.checkList,System.Boolean,imbSCI.Core.collection.checkLists.checkListItemValue)">
            <summary>
            Appends the check list.
            </summary>
            <param name="list">The list.</param>
            <param name="isVertical">if set to <c>true</c> [is vertical].</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.getContentBlocks(System.Boolean,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Gets the content blocks - returns content in subsections, where main content is in <see cref="F:imbSCI.Data.enums.fields.templateFieldSubcontent.main"/>
            </summary>
            <param name="includeMain">if set to <c>true</c> [include main].</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.sbControler">
            <summary>
            Controler for sub contents and stringBuilders
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.SubcontentStart(imbSCI.Data.enums.fields.templateFieldSubcontent,System.Boolean)">
            <summary>
            Starts Subcontent session or continues existing. Optionally erazes all existing content under subsession specified by <c>key</c>
            </summary>
            <param name="key">Subsession selector key</param>
            <param name="cleanPriorContent">Optionally erazes all existing content under subsession specified by <c>key</c></param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.SubcontentClose">
            <summary>
            Ends Subcontent session, switches to the <see cref="F:imbSCI.Data.enums.fields.templateFieldSubcontent.main"/> content, and returns content from the session just closed.
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendFunction(System.String,System.Boolean)">
            <summary>
            Appends the function.
            </summary>
            <param name="functionCode">The function code.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendData(System.Data.PropertyCollection,imbSCI.Core.enums.existingDataMode,System.Boolean)">
            <summary>
            Updates internal meta data storage (custom properties/references/fields) according <c>mode</c>.
            </summary>
            <param name="data">New data</param>
            <param name="mode">Policy on combining data</param>
            <param name="alsoAppendAsPairs">If TRUE it will also create output using <c>AppendPairs</c> method</param>
            <returns>
            OuterXML/String or proper DOM object of container - if created
            </returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendFrame(System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends the frame.
            </summary>
            <param name="content">The content.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="title">The title.</param>
            <param name="footnote">The footnote.</param>
            <param name="paragraphs">The paragraphs.</param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendSection(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends the section.
            </summary>
            <param name="content">The content.</param>
            <param name="title">The title.</param>
            <param name="footnote">The footnote.</param>
            <param name="paragraphs">The paragraphs.</param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendHeading(System.String,System.Int32)">
            <summary>
            HTML/XML builder adds H tag with proper level sufix, on Table it applies style and for H1 and H2
            </summary>
            <param name="content">Text</param>
            <param name="level">from 1 to 6</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendParagraph(System.String,System.Boolean)">
            <summary>
            Appends the paragraph.
            </summary>
            <param name="content">The content.</param>
            <param name="fullWidth">if set to <c>true</c> [full width].</param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendQuote(System.String)">
            <summary>
            Appends the quote.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendCite(System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendCode(System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendCode(System.String,System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendComment(System.String)">
            <summary>
            Appends the comment.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.data">
            <summary>
            Data embedded with builder
            </summary>
            <value>
            The embedded data.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.settings">
            <summary>
            Builder settings
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.#ctor(System.Int32)">
            <summary>
            konstruktor koji postavlja tabLevel, podrazumevani tab level je 2
            </summary>
            <param name="__tabLevel"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.render.core.imbStringBuilderBase"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.#ctor(imbSCI.Core.reporting.format.reportAPI)">
            <summary>
            Autocall->prepareBuilder() - Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.render.core.imbStringBuilderBase"/> class.
            </summary>
            <param name="__builderAPI">The builder API.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.formats">
            <summary>
            Gets the output support definition for this report kind
            </summary>
            <value>
            The object containing output support info
            </value>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.content">
            <summary>
            List of content segments/entries/Appends
            </summary>
            <value>
            The content.
            </value>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.contentElements">
            <summary>
            Collection for basic text builders
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.getLastLine(System.Boolean)">
            <summary>
            Returns last segment of content (since last call)
            </summary>
            <returns>Last segment or line that was Appended</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.GetContent(System.Int64,System.Int64)">
            <summary>
            Gets specified content segment, or complete content
            </summary>
            <param name="fromLength">From length - by default from start</param>
            <param name="toLength">To length - by default to the end</param>
            <returns>The slice of the content</returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.lastLength">
            <summary>
            Length since last getLastLine call
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.Length">
            <summary>
            Length of internal content
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.c">
            <summary>
            Reference to cursor object
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.zone">
            <summary>
            zone of text format - reference
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.openedTags">
            <summary>
            Kolekcija svih otvorenih tagova
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.tabInsert">
            <summary>
            Prefix koji se dodaje ispred teksta -- tabovi
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.tabLevel">
            <summary>
            nivo na kome je tab sada
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.newLineString">
            <summary>
            Podesavanje NewLine stringa koji se dodaje kada dodje do BreakLine instrukcije
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.linePrefix">
            <summary>
            Prefix koji se dodaje ispred svake linije
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.ContentToString(System.Boolean,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Vraca sadrzaj u String obliku
            </summary>
            <param name="doFlush">if TRUE it will clear exported content</param>
            <returns>Text representation of content - if its applicable</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase._AppendLine(System.String)">
            <summary>
            CORE METHOD: Metod koji pozivaju svi drugi AppendLine / Pair / link metodi -- sluzi za override / promenu ponasanja kod izvedenih klasa
            </summary>
            <param name="input"></param>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase._Append(System.String,System.Boolean)">
            <summary>
            CORE METHOD: Metod koji pozivaju svi drugi Append -- sluzi za override / promenu ponasanja kod izvedenih klasa
            </summary>
            <param name="input"></param>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.Clear">
            <summary>
            Clears all content from this builder
            </summary>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.nextTabLevel">
            <summary>
            Prelazi u sledeci tab level
            </summary>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.prevTabLevel">
            <summary>
            Prebacuje u prethodni tabLevel
            </summary>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.rootTabLevel">
            <summary>
            Sets tab level to root
            </summary>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.deleteLast">
            <summary>
            Deletes the last appends and returns it
            </summary>
            <returns>Append that was deleted</returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendPlaceholder(System.Object,System.Boolean)">
            <summary>
            Adds new <c>stringTemplate</c> placeholder string into template
            </summary>
            <param name="fieldName"></param>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendLine(System.String)">
            <summary>
            Appends new line with line prefix, tab insert and break (enter)
            </summary>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.Append(System.String,imbSCI.Data.enums.appends.appendType,System.Boolean)">
            <summary>
            General Append call - appends inline or in new line
            </summary>
            <param name="content">String to add</param>
            <param name="type">Disabled</param>
            <param name="breakLine">On TRUE it will break into new line</param>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendPair(System.Enum,System.Object,System.Boolean,System.String)">
            <summary>
            Appends a KeyValue pair.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
            <param name="between">String to put in middle cell</param>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendPair(System.String,System.Object,System.Boolean,System.String)">
            <summary>
            Appends a KeyValue pair
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
            <param name="between">The between.</param>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendPairs(System.Data.PropertyCollection,System.Boolean,System.String)">
            <summary>
            Appends collection of pairs.
            </summary>
            <param name="data">Data to use as pair source</param>
            <param name="isHorizontal">Should output be horizontal</param>
            <param name="between">Content to place between. If empty it will skip middle column</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
            \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendLink(System.String,System.String,System.String,imbSCI.Data.enums.appends.appendLinkType)">
            <summary>
            Renders link, image or reference text representation
            </summary>
            <param name="url">url or reference id</param>
            <param name="name">Name of link</param>
            <param name="caption">Title - popup content</param>
            <param name="linkType">Select if output is link, image or reference</param>
            \ingroup_disabled renderapi_append
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.openTagFormat">
            <summary>
            format template for tag opening
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.closeTagFormat">
            <summary>
            format template for tag/group/section closing
            </summary>
            \ingroup_disabled renderapi_service
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.merge(imbSCI.Core.reporting.zone.selectRangeArea)" -->
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.open(System.Enum,System.String,System.String)">
            <summary>
            Opens the specified tag.
            </summary>
            <param name="tag">The tag.</param>
             \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.close(System.Enum)">
            <summary>
            Closes the specified tag.
            </summary>
            <param name="tag">The tag.</param>
             \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.open(System.String,System.String,System.String)">
            <summary>
            Opens the specified tag.
            </summary>
            <param name="tag">The tag.</param>
             \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.close(System.String)">
            <summary>
            Dodaje HTML zatvaranje taga -- zatvara poslednji koji je otvoren
            </summary>
            <remarks>
            Ako je prosledjeni tag none onda zatvara poslednji tag koji je otvoren.
            </remarks>
            <param name="tag"></param>
             \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.closeAll">
            <summary>
            Closes all tags/groups/sections that were currently open
            </summary>
             \ingroup_disabled renderapi_append
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.imbStringBuilderBase.isArgumentFailed">
            <summary>
            Da li je do sada neka od provera Null vrednosti vratila TRUE vrednost
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendList(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Renders list and sublists
            </summary>
            <param name="content"></param>
            <param name="isOrderedList"></param>
             \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendHorizontalLine">
            <summary>
            Adds horizontal line
            </summary>
             \ingroup_disabled renderapi_append
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.AppendTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Renders DataTable
            </summary>
            <param name="table">The table.</param>
            <param name="doThrowException">if set to <c>true</c> it will throw an exception on <see cref="!:validateTable()"/> return false.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.imbStringBuilderBase.loadPage(System.String,System.String,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Loads the page from filepath. If it is document type then imports page with targeted name
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.render.core.tagBlock">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Data.interfaces.IObjectWithNameAndDescription" />
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagBlock.meta">
            <summary>
            Custom object related to the block
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagBlock.count">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagBlock.parent">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagBlock.tag">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagBlock.name">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagBlock.description">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.core.tagBlockTitleCounter">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagBlockTitleCounter.counter">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.core.tagStack">
             <summary>
            
             </summary>
             <seealso cref="!:System.Collections.Generic.Stack&lt;aceCommonTypes.reporting.render.core.tagBlock&gt;" />
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagStack.stack">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.tagStack.Add(System.String,System.String,System.String)">
            <summary>
            Adds the specified tag.
            </summary>
            <param name="__tag">The tag.</param>
            <param name="__name">The name.</param>
            <param name="__description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.core.tagStack.Push(System.String,System.String,System.String)">
            <summary>
            Pushes the specified tag.
            </summary>
            <param name="__tag">The tag.</param>
            <param name="__name">The name.</param>
            <param name="__description">The description.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagStack.levelCount">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagStack.headingLevel">
            <summary>
            Gets the heading level.
            </summary>
            <value>
            The heading level.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.core.tagStack.deepth">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.IDocumentRender">
            <summary>
            Interface for Document render classes
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.ITabLevelControler" />
            <seealso cref="T:imbSCI.Core.reporting.render.ITextRender" />
            \ingroup_disabled report_int
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.AppendFunction(System.String,System.Boolean)">
            <summary>
            Appends the function.
            </summary>
            <param name="functionCode">The function code.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.AppendInfo(System.Data.PropertyCollection,System.Boolean,imbSCI.Data.enums.fields.templateFieldBasic[])">
            <summary>
            Sets document description information
            </summary>
            <param name="data">Property collection that applies info</param>
            <param name="alsoAppendAsPairs">If TRUE it will also create output using <c>AppendPairs</c> method</param>
            <param name="fieldsToUse">What fields to use?</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.getPage(System.String)">
            <summary>
            Gets the page - if name is empty returns the current page
            </summary>
            <param name="name">The name to use as selector</param>
            <returns>Page object</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.scopePage(System.Object)">
            <summary>
            Set provided page as current scope
            </summary>
            <param name="toPage">To page.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.scopeDocument(System.Object)">
            <summary>
            Set specified document as current document
            </summary>
            <param name="toDocument">To document.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.AppendData(System.Data.PropertyCollection,imbSCI.Core.enums.existingDataMode,System.Boolean)">
            <summary>
            Updates internal meta data storage (custom properties/references/fields) according <c>mode</c>.
            </summary>
            <param name="data">New data</param>
            <param name="mode">Policy on combining data</param>
            <param name="alsoAppendAsPairs">If TRUE it will also create output using <c>AppendPairs</c> method</param>
            <returns>OuterXML/String or proper DOM object of container - if created</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.ApplyStyle(imbSCI.Core.reporting.style.shot.IStyleInstruction,imbSCI.Core.reporting.zone.selectRangeArea,System.Object[])">
            <summary>
            Applies the style (or part of style to an area
            </summary>
            <param name="shot">The shot.</param>
            <param name="areaToApply">The area to apply.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.ApplyStyle(imbSCI.Core.reporting.style.areaStyleInstruction)">
            <summary>
            Executes styling instruction that has more shots against more areas
            </summary>
            <param name="ins">The ins.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IDocumentRender.setContext(imbSCI.Core.reporting.render.IRenderExecutionContext)">
            <summary>
            deploys style and palette provider
            </summary>
            <param name="__style">The style.</param>
            \ingroup_disabled renderapi_service
        </member>
        <member name="P:imbSCI.Core.reporting.render.IDocumentRender.theme">
            <summary>
            active document style
            </summary>
            <value>
            The style.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IDocumentRender.data">
            <summary>
            Gets the embedded data.
            </summary>
            <value>
            The embedded data.
            </value>
        </member>
        <member name="T:imbSCI.Core.reporting.render.IRenderExecutionContext">
            <summary>
            Execution context for rendering and reporting
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IRenderExecutionContext.getFileInfo(System.String,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Gets the file info
            </summary>
            <param name="basename">The basename.</param>
            <param name="mode">The mode.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.data">
            <summary>
            Execution data storage
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.directoryScope">
            <summary>
            Active directory
            </summary>
            <value>
            The current directory.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.directoryRoot">
            <summary>
            Directory that is root for current execution context
            </summary>
            <value>
            Directory reporting output root
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.theme">
            <summary>
            Theme used for rendering
            </summary>
            <value>
            The style.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IRenderExecutionContext.log(System.String)">
            <summary>
            Logs a custom message
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IRenderExecutionContext.error(System.String,imbSCI.Data.enums.appends.appendType,System.Exception)">
            <summary>
            Reports an error with optional message and exception
            </summary>
            <param name="msg">Custom message about the error</param>
            <param name="atype">Type of Append operation that caused error</param>
            <param name="ex">Exception if happen</param>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.render">
            <summary>
            Render instance used for output
            </summary>
            <value>
            The render.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.scope">
            <summary>
            Current scope in the meta model
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.styleStack">
            <summary>
            Scheduled styling instructions -- used to process> current append or future append
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IRenderExecutionContext.metaContentRanges">
            <summary>
            Dictionary of selectRangeArea entries for each metaContent member
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.IStyleRender">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Core.reporting.ITabLevelControler" />
             \ingroup_disabled report_int
        </member>
        <member name="M:imbSCI.Core.reporting.render.IStyleRender.AppendPair(System.String,System.Object,System.Boolean,System.String)">
            <summary>
            Renders key-> value pair
            </summary>
            <param name="key">Property name or collection key</param>
            <param name="value">ToString value</param>
            <param name="breakLine">should break line </param>
        </member>
        <member name="P:imbSCI.Core.reporting.render.IStyleRender.linePrefix">
            <summary>
            Prefix koji se dodaje ispred svake linije
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.IStyleRender.ToString">
            <summary>
            Vraca sadrzaj u String obliku
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendDirect(System.String)">
            <summary>
            Direct content injection, bypassing all internal transformations by class implementing <see cref="T:imbSCI.Core.reporting.render.ITextRender"/>
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendToFile(System.String,System.String)">
            <summary>
            Saves <c>content</c> to specified path. Path is local to context scope
            </summary>
            <param name="outputpath">The filepath, including filename and extension</param>
            <param name="content">Any string content</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendFromFile(System.String,imbSCI.Data.enums.fields.templateFieldSubcontent,System.Boolean)">
            <summary>
            Loads content from <c>sourcepath</c> into renderer [if <c>datakey</c> is <see cref="F:imbSCI.Data.enums.fields.templateFieldSubcontent.none"/> or into data field if specified.
            </summary>
            <param name="sourcepath">The sourcepath.</param>
            <param name="datakey">The datakey.</param>
            <param name="isLocalSource">if set to <c>true</c> <c>sourcepath</c> is interpreted as local to context</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendFile(System.String,System.String,System.Boolean)">
            <summary>
            File from <c>sourcepath</c> is copied to <c>outputpath</c> or used as data template if <c>isDataTeplate</c> is true
            </summary>
            <param name="sourcepath">The sourcepath - within application directory</param>
            <param name="outputpath">The outputpath - local to context</param>
            <param name="isDataTemplate">if set to <c>true</c> the <c>soucepath</c> content will be processed as data template before saving output to <c>outputpath</c></param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendImage(System.String,System.String,System.String)">
            <summary>
            Appends the image tag/call.
            </summary>
            <param name="imageSrc">Source url/path of the image</param>
            <param name="imageAltText">The image alt text.</param>
            <param name="imageRef">The image reference ID used internally</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendMath(System.String,System.String)">
            <summary>
            Inserts <c>mathFormula</c> block
            </summary>
            <param name="mathFormula">The math formula: LaTeX, KaTex, asciimath...</param>
            <param name="mathFormat">The math format used to describe the formula</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendLabel(System.String,System.Boolean,System.Object)">
            <summary>
            Appends the content with label decoration
            </summary>
            <param name="content">The content to show inside label</param>
            <param name="isBreakLine">if set to <c>true</c> if will break line after this append</param>
            <param name="comp_style">Special style tag, class, definition.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendPanel(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates panel with <c>content</c> and (optionally) with <c>comp_heading</c> and <c>comp_description</c> as footer.
            </summary>
            <param name="content">String content to place inside the panel</param>
            <param name="comp_heading">The heading for the panel. If blank panel will have no heading</param>
            <param name="comp_description">Description to be placed at bottom of the panel</param>
            <param name="comp_style">Special style tag, class, definition.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendFunction(System.String,System.Boolean)">
            <summary>
            Appends the function.
            </summary>
            <param name="functionCode">The function code.</param>
            <param name="breakLine">if set to <c>true</c> [break line].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendPlaceholder(System.Object,System.Boolean)">
            <summary>
            Appends string with template placeholder tag {{{ }}} / creates field to call custom property --> for document builder: introduces custom parameter and field
            </summary>
            <param name="fieldName">String, enum what ever</param>
            <param name="breakLine">on TRUE it is new line call, on FALSE its inline call</param>
            <param name="type">Type of append render</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendHorizontalLine">
            <summary>
            Horizontal line divider.
            </summary>
            <remarks>It respect active full width and/or background color</remarks>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendComment(System.String)">
            <summary>
            On HTML/XML builder adds invisible comment tag, on Table builder it adds comment to the current cell, on Document builder it adds pop-up comment on aplicable way
            </summary>
            <param name="content">Text content for the paragraph</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendHeading(System.String,System.Int32)">
            <summary>
            HTML/XML builder adds H tag with proper level sufix, on Table it applies style and for H1 and H2
            </summary>
            <param name="content">Text</param>
            <param name="level">from 1 to 6</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendQuote(System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendCite(System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendCode(System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendCode(System.String,System.String)">
            <summary>
            HTML/XML adds <c>q</c> tag, Table aplies <c>smallText</c> style
            </summary>
            <param name="content">Text content of the quote</param>
            <param name="codetypename">The codetypename: i.e. html</param>
            <returns>
            OuterXML/String or proper DOM object of container
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendFrame(System.String,System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            HTML/XML adds <c></c>
            </summary>
            <param name="content">Initial content</param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="title">Title of the section</param>
            <param name="footnote">Description under the section</param>
            <param name="paragraphs">Additional paragraphs to place inside</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendPairs(System.Data.PropertyCollection,System.Boolean,System.String)">
            <summary>
            Appends collection of pairs.
            </summary>
            <param name="data">Data to use as pair source</param>
            <param name="isHorizontal">Should output be horizontal</param>
            <param name="between">Content to place between. If empty it will skip middle column</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendParagraph(System.String,System.Boolean)">
            <summary>
            Appends content wrapped into paragraph tag. Table builders will merge whole line if "fullWidth" is TRUE.
            </summary>
            <param name="content">Text content for the paragraph</param>
            <param name="fullWidth">if TRUE it will maximize width</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendSection(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new section with title and content. Optionally it may contain: additional paragraphs for content and footnote on bottom
            </summary>
            <param name="content">Main content of the section</param>
            <param name="title">Title of the section</param>
            <param name="footnote">Description under the section</param>
            <param name="paragraphs">Additional paragraphs to place inside</param>
            <returns>OuterXML/String or proper DOM object of container</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendPair(System.String,System.Object,System.Boolean,System.String)">
            <summary>
            Renders key-> value pair
            </summary>
            <param name="key">Property name or collection key</param>
            <param name="value">ToString value</param>
            <param name="breakLine">should break line </param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.Append(System.String,imbSCI.Data.enums.appends.appendType,System.Boolean)">
            <summary>
            Appends inline or new line content.
            </summary>
            <param name="content">String content to be wrapped into container</param>
            <param name="type">Container type - for text it is always none</param>
            <param name="breakLine">Inline (FALSE) or new line (TRUE)</param>
            <remarks>It is supported by: Source, Document and Table builders</remarks>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendLine(System.String)">
            <summary>
            Appends the line.
            </summary>
            <param name="content">The content.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendList(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Renders IEnumerable that may contain other IEnumerables
            </summary>
            <param name="content">Collection with objects and/or subcollections</param>
            <param name="isOrderedList">On TRUE it will be ordered list with number, FALSE will create button list</param>
            <remarks>In Document builders isOrderedList has isHorizontal role</remarks>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendLink(System.String,System.String,System.String,imbSCI.Data.enums.appends.appendLinkType)">
            <summary>
            Renders link, image or reference
            </summary>
            <param name="url">url or reference id</param>
            <param name="name">Name of link</param>
            <param name="caption">Title - popup content</param>
            <param name="linkType">Select if output is link, image or reference</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextAppendContent.AppendTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Renders DataTable
            </summary>
            <param name="table"></param>
        </member>
        <member name="T:imbSCI.Core.reporting.render.ITextRender">
            <summary>
            Universal API for report construction -- use in low-level application. <see cref="T:imbSCI.Core.reporting.render.IDocumentRender"/> is prefered for regular use
            </summary>
            \ingroup_disabled report_int
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.GetContent(System.Int64,System.Int64)">
            <summary>
            Gets specified content segment, or complete content
            </summary>
            <param name="fromLength">From length - by default from start</param>
            <param name="toLength">To length - by default to the end</param>
            <returns>The slice of the content</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.savePage(System.String,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Saves the document containing this page.
            </summary>
            <returns></returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.addDocument(System.String,System.Boolean,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Creates new document both in filesytem and internal memory. Location for new file is current directory.
            </summary>
            <param name="name">Name of new document. It will transform it to filename version and add proper file extension. No problem if you put extension alone.</param>
            <param name="mode">How any existing file should be handled</param>
            <returns>fileinfo pointing to the newly created focument.</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.addPage(System.String,System.Boolean,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Adds new page, drives cursor to upper-left corner
            </summary>
            <param name="name">The name of newly created page.</param>
            <param name="mode">In case page with the same name already exists</param>
            <returns>Page object - usually not directly used</returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.SubcontentStart(imbSCI.Data.enums.fields.templateFieldSubcontent,System.Boolean)">
            <summary>
            Subcontents the start.
            </summary>
            <param name="key">The key.</param>
            <param name="cleanPriorContent">if set to <c>true</c> [clean prior content].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.SubcontentClose">
            <summary>
            Subcontents the close.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.saveDocument(System.IO.FileInfo)">
            <summary>
            Saves the document.
            </summary>
            <param name="fi">The fi.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.render.ITextRender.content">
            <summary>
            Collection of content units: Source builders => List of string, HTML/XML list of Nodes, RTF/PDF... list of DOM elements
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.ITextRender.c">
            <summary>
            Builder cursor object
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.ITextRender.zone">
            <summary>
            Cursor zone
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.ITextRender.linePrefix">
            <summary>
            Prefix koji se dodaje ispred svake linije
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.ContentToString(System.Boolean,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Vraca sadrzaj u String obliku
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.closeAll">
            <summary>
            Zatvara sve tagove koji su trenutno otvoreni
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.render.ITextRender.directoryScope">
            <summary>
            Gets the current directory from the context
            </summary>
            <value>
            The directory current.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.saveDocument(System.String,imbSCI.Data.enums.getWritableFileMode,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Saves the current document, returns <c>FileInfo</c> pointing to it
            </summary>
            <param name="name">The name without extension</param>
            <param name="mode">Existing file mode</param>
            <returns>File info pointing to</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.loadDocument(System.String,System.String,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Loads the document from filepath into internal object of TDoc type as current document
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="name">Name of loaded document or if <c>importPage</c> pages to import</param>
            <returns>
            FileInfo pointing to the loaded document
            </returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.loadPage(System.String,System.String,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Loads the page from filepath. If it is document type then imports page with targeted name
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.getDocument">
            <summary>
            Gets the document instance - current document
            </summary>
            <remarks>
            Usual application do not require document instance outside of builder class.
            But if you need some special thing to do.. here it is
            </remarks>
            <returns></returns>
            \ingroup_disabled renderapi_service
        </member>
        <member name="M:imbSCI.Core.reporting.render.ITextRender.getContentBlocks(System.Boolean,imbSCI.Core.reporting.format.reportOutputFormatName)">
            <summary>
            Gets the content blocks -- the main content is in <see cref="F:imbSCI.Data.enums.fields.templateFieldSubcontent.main"/>
            </summary>
            <param name="includeMain">if set to <c>true</c> [include main].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.render.NamespaceDoc">
            <summary>
            Reporting and text template foundation. --- NamespaceDoc ne moze da koristi Doxygen - samo ovako
            </summary>
            <summary>
            Reporting and text template foundation.
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.render.stylers.IStylers">
            <summary>
            Stylers are providing implementation of abstract style structures into contrete objects (i.e. style classes of EEPlus, FlowDocument...) or code (i.e. CSS)
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.reportOutputFormatTags">
            <summary>
            Definicija stila za izvestaj
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.reportOutputFormatTools.checkForDefaultTag(imbSCI.Data.enums.reporting.htmlTagName,imbSCI.Data.enums.reporting.reportOutputRoles)">
            <summary>
            proverava da li je prosledjen tag defaultTag -- tj. ako jeste vraca podrazumevani tag prema datoj ulozi
            </summary>
            <param name="tag"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.reportOutputFormatTools.defaultTags">
            <summary>
            Kolekcija podrazumevanih tagova za dat oblik izvestavanja
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.reportOutputQuickTools.saveMarkdownToPDF(System.String,System.String,System.Boolean)">
            <summary>
            Saves the markdown content into PDF.
            </summary>
            <param name="content">The content.</param>
            <param name="filepath">The filepath.</param>
            <param name="saveTxtVersionToo">if set to <c>true</c> [save text version too].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.reportTagExtensions">
            <summary>
            Alati za report tagove, jos osmisliti svrhu ove klase
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.settingsEntriesTools.GetUserManualSaved(System.Object,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the user manual saved:
            </summary>
            <param name="dataObject">The data object to describe</param>
            <param name="path">The path.</param>
            <param name="directInfo">Custom description line to be inserted after description</param>
            <param name="skipUnDescribed">if set to <c>true</c> [skip un described].</param>
            <param name="showValue">if set to <c>true</c> [show value].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.settingsEntriesTools.GetUserManualForTableSaved(System.Data.DataTable,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the user manual for table saved.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="path">The path.</param>
            <param name="directInfo">The direct information.</param>
            <param name="skipUnDescribed">if set to <c>true</c> [skip un described].</param>
            <param name="showValue">if set to <c>true</c> [show value].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.settingsEntriesTools.GetUserManualForTable(System.Data.DataTable,imbSCI.Core.reporting.render.ITextRender,System.String,System.Boolean)">
            <summary>
            Gets the user manual for table.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="output">The output.</param>
            <param name="directInfo">The direct information.</param>
            <param name="skipUnDescribed">if set to <c>true</c> [skip un described].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.settingsEntriesTools.GetUserManualSPE(imbSCI.Core.data.settingsPropertyEntry,imbSCI.Core.reporting.render.ITextRender)">
            <summary>
            Generates content for <see cref="T:imbSCI.Core.data.settingsPropertyEntry"/>
            </summary>
            <param name="spec">The spec.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.settingsEntriesTools.GetUserManual(System.Object,imbSCI.Core.reporting.render.ITextRender,System.String,System.Boolean,System.Boolean)">
            <summary>
            Generates property manual
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.style.areaStyleInstruction">
            <summary>
            Set of <see cref="T:imbSCI.Core.reporting.style.shot.IStyleInstruction"/>s and <see cref="T:imbSCI.Core.reporting.zone.selectRangeArea"/>s to be applied.
            </summary>
            <remarks>Each instruction is applied to each area. <c>pathList</c> is checked before execution - areas are updated witht his list </remarks>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="M:imbSCI.Core.reporting.style.areaStyleInstruction.#ctor(imbSCI.Core.reporting.style.shot.IStyleInstruction,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.style.areaStyleInstruction"/> class.
            </summary>
            <param name="styleShots">The style shots.</param>
            <param name="area">The area.</param>
            <param name="__doAllowUnclosed">if set to <c>true</c> [do allow unclosed].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.areaStyleInstruction.#ctor(imbSCI.Core.reporting.style.shot.IStyleInstruction,imbSCI.Core.reporting.zone.selectRangeArea,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.style.areaStyleInstruction"/> class.
            </summary>
            <param name="styleShots">The style shots.</param>
            <param name="area">The area.</param>
            <param name="__doAllowUnclosed">if set to <c>true</c> [do allow unclosed].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.areaStyleInstruction.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.style.areaStyleInstruction"/> class.
            </summary>
            <param name="__doAllowUnclosed">if set to <c>true</c> [do allow unclosed].</param>
        </member>
        <member name="P:imbSCI.Core.reporting.style.areaStyleInstruction.doAllowUnclosed">
            <summary>
            Is instruction allowed over unclosed areas
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.areaStyleInstruction.Add(imbSCI.Core.reporting.style.shot.IStyleInstruction[])">
            <summary>
            Adds IStyleInstruction item
            </summary>
            <param name="in_shots">The in shots.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.areaStyleInstruction.Add(imbSCI.Core.reporting.zone.selectRangeArea[])">
            <summary>
            Adds area/s that are affected by this
            </summary>
            <param name="in_areas">The in areas.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.areaStyleInstruction.Add(System.String[])">
            <summary>
            Adds paths to areas that will be processed later by calling <see cref="M:imbSCI.Core.reporting.style.areaStyleInstruction.resolveAreaPaths(imbSCI.Core.reporting.zone.selectRangeAreaDictionary,System.Boolean)"/>
            </summary>
            <param name="in_paths">The in paths.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.areaStyleInstruction.resolveAreaPaths(imbSCI.Core.reporting.zone.selectRangeAreaDictionary,System.Boolean)">
            <summary>
            Gets from paths - TRUE if loaded all
            </summary>
            <param name="resolver">The resolver.</param>
            <param name="allowUnclosed">For special cases where we want to affect an area before it is <c>closed</c></param>
            <returns>
            TRUE if all areas are loaded - and no <c>path</c> is waiting to be loaded
            </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.areaStyleInstruction.areaPaths">
            <summary>
            list of paths for delayed areas retrieval
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.areaStyleInstruction.shots">
            <summary>
            multiple IStyleInstruction shots to be applied on designated area
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.areaStyleInstruction.areas">
            <summary>
            Area that is targeted by shots
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.areaStyleInstructionStack">
            <summary>
            Area Style Instruction stack - waiting for executin
            </summary>
            <seealso cref="!:System.Collections.Generic.Stack&lt;aceCommonTypes.reporting.style.areaStyleInstruction&gt;" />
        </member>
        <member name="P:imbSCI.Core.reporting.style.areaStyleInstructionStack.pathResolver">
            <summary>
            reference to dictionary to read area memory
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.styleFourSide">
            <summary>
            Complex settings four style
            </summary>
            <remarks>
            if BorderColor is none - it will follow Forecolor value
            </remarks>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.type">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.themeCodeName">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleFourSide.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>
            Unique string to identify unique values
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleFourSide.setup(System.Int32,System.Int32,imbSCI.Core.reporting.colors.acePaletteRole,System.Int32,imbSCI.Core.reporting.style.enums.styleBorderType,imbSCI.Core.reporting.style.enums.styleSideDirection[])">
            <summary>
            Setups the specified padding.
            </summary>
            <param name="__padding">The padding. -1 to ignore</param>
            <param name="__margin">The margin. -1 to ignore</param>
            <param name="__borderColor">Color of the border. none to ignore</param>
            <param name="__thickness">The thickness. -1 to ignore</param>
            <param name="__type">The type. unknown to ignore</param>
            <param name="directions">The directions.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleFourSide.apply(imbSCI.Core.reporting.geometrics.fourSideSetting,imbSCI.Core.reporting.style.core.styleFourSideParameter)">
            <summary>
            Applies the specified <c>fourSideSetting</c> into <c>target</c> property for all four sides
            </summary>
            <param name="setting">The setting.</param>
            <param name="target">The target.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.Item(imbSCI.Core.reporting.style.enums.styleSideDirection)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.reporting.style.core.styleSide"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.reporting.style.core.styleSide"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.doVerticalSymetry">
            <summary>
            it will keep synchronized top and bottom sides
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.doHorizontalSymetry">
            <summary>
            it will keep synchronized left and right
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.right">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.left">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.bottom">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleFourSide.top">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.stylePage">
            <summary>
            Page style
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.stylePage.maxSize">
            <summary>
            max size of the page
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.stylePage.linePercent">
            <summary>
            line height percent
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.stylePage.margins">
            <summary>
            margins of page inside documents
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.styleSide">
            <summary>
            One side styling> border, pad/margin, color of the border
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSide.direction">
            <summary>
            direction of this side
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleSide.setup(imbSCI.Core.reporting.colors.acePaletteRole,System.Int32,System.Int32,System.Int32,imbSCI.Core.reporting.style.enums.styleBorderType)">
            <summary>
            Setups the specified color role.
            </summary>
            <param name="__colorRole">The color role. Unknown for no changes</param>
            <param name="__thickness">The thickness. -1 for no changes</param>
            <param name="__padding">The padding.-1 for no changes</param>
            <param name="__margin">The margin.-1 for no changes</param>
            <param name="__type">The type. Unknown for no changes</param>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSide.type">
            <summary>
            type of border on this side
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSide.borderColor">
            <summary>
            Color of the border
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSide.thickness">
            <summary>
            thickness of border
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSide.margin">
            <summary>
            ammount of margin
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSide.padding">
            <summary>
            amount of padding
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.styleSize">
            <summary>
            Size definition
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleSize.#ctor">
            <summary>
            It will set heigh to auto and width to 1200px
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.style.core.styleSize"/> class.
            </summary>
            <param name="__width">The width.</param>
            <param name="__height">The height.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.styleSurfaceColor">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSurfaceColor.FillType">
            <summary>
            Gets or sets the type of the fill.
            </summary>
            <value>
            The type of the fill.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSurfaceColor.Tint">
            <summary>
            Gets or sets the tint.
            </summary>
            <value>
            The tint.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleSurfaceColor.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleSurfaceColor.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.styleTextFont">
            <summary>
            Font descriptor with some extra data
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            \ingroup_disabled report_ll_style
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextFont.#ctor(imbSCI.Core.reporting.style.enums.aceFont)">
            <summary>
            Single-font constructor
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextFont.Add(imbSCI.Core.reporting.style.enums.aceFont)">
            <summary>
            Adds the specified font.
            </summary>
            <param name="font">The font.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextFont.#ctor(imbSCI.Core.reporting.style.enums.aceFont[])">
            <summary>
            Constructor with multiple fonts load
            </summary>
            <param name="fontNames"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextFont.getFontFamilyLine">
            <summary>
            Returns font family line applicable for CSS and HTML
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextFont.family">
            <summary>
            Font Family name
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextFont.systemFontList">
            <summary>
            Complete list of system fonts
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextFont.drawingFont">
            <summary>
            reference to System font
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextFont.style">
            <summary>
            Font style
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextFont.fontName">
            <summary>
            font name - to be used even if systemFont fails
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.styleTextSizeSet">
            <summary>
            Calc. struct class providing automatically calculated font sizes
            </summary>
            <remarks>
            Automatically sets font sizes for> H1....H6, text and remarks
            </remarks>
            \ingroup_disabled report_ll_style
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextSizeSet.AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextSizeSet.headingSizes">
            <summary>
            List of heading sizes
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextSizeSet.headingMargins">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextSizeSet.headingPaddings">
            <summary>
            padding
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextSizeSet.smallText">
            <summary>
            Small text size
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTextSizeSet.textSize">
            <summary>
            size for main text
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.core.styleTextSizeSet.factorExtra">
            <summary>
            The factor extra -- from <c>factor</c> it reserves given number of sizes definitions
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextSizeSet.getCodeName">
            <summary>
            CodeName should enable identification of unique text size configuration. In other words: if CodeName differs it means that two object of this type do not have the same property values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextSizeSet.#ctor(System.Int32,System.Int32,imbSCI.Core.reporting.geometrics.fourSideSetting,imbSCI.Core.reporting.geometrics.fourSideSetting)">
            <summary>
            Automatically recalculats
            </summary>
            <param name="sizeForH1">Size of the biggest text heading</param>
            <param name="sizeForText">Size of normal test (i.e. paragraph)</param>
            <param name="H1Margin">Margin of the biggest text heading</param>
            <param name="H1Padding">Padding of H1</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextSizeSet.isThisHeading(System.Int32)">
            <summary>
            Determines whether if <c>i</c> points to heading or regular text
            </summary>
            <param name="i">The i.</param>
            <returns>
              <c>true</c> if [is this heading] [the specified i]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextSizeSet.getSizeMod(System.Int32,imbSCI.Core.reporting.style.enums.styleTextModificationEnum)">
            <summary>
            Applies size modification
            </summary>
            <param name="input">The input.</param>
            <param name="mod">The mod.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTextSizeSet.deploy(System.Int32,System.Int32,imbSCI.Core.reporting.geometrics.fourSideSetting,imbSCI.Core.reporting.geometrics.fourSideSetting)">
            <summary>
            Automatically recalculates sizes
            </summary>
            <param name="sizeForH1">Size of the biggest text heading</param>
            <param name="sizeForText">Size of normal test (i.e. paragraph)</param>
            <param name="H1Margin">Margin of the biggest text heading</param>
            <param name="H1Padding">Padding of H1</param>
        </member>
        <member name="T:imbSCI.Core.reporting.style.core.styleTheme">
            <summary>
            Low-level object with all the most important styling features of report page or other output
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTheme.#ctor(imbSCI.Core.reporting.colors.aceBaseColorSetEnum,System.Int32,System.Int32,imbSCI.Core.reporting.geometrics.fourSideSetting,imbSCI.Core.reporting.geometrics.fourSideSetting,imbSCI.Core.reporting.style.enums.aceFont,imbSCI.Core.reporting.style.enums.aceFont)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.style.core.styleTheme"/> class.
            </summary>
            <param name="h1Size">Size of the h1.</param>
            <param name="pSize">Size of the p.</param>
            <param name="margin">The margin.</param>
            <param name="padding">The padding.</param>
            <param name="pageFontName">Name of the page font.</param>
            <param name="headingFontName">Name of the heading font.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTheme.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>
            Unique string to identify unique values
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.core.styleTheme.AppendDataFields(System.Data.PropertyCollection)">
            <summary>
            Appends its data points into new or existing property collection
            </summary>
            <param name="data">Property collection to add data into</param>
            <returns>Updated or newly created property collection</returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.styler">
            <summary>
            variator for automatic styling
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.activeStyleInstruction">
            <summary>
            Style instruction to be applied
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.doAutoStyleByType">
            <summary>
            if TRUE it will provide styleShotSet automatically for <c>activeStyleInstruction</c> property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.cMain">
            <summary>
            The main cursor shared between executor, renderer etc
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.zoneMain">
            <summary>
            the main zone of text format
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.palletes">
            <summary>
            collection of palletes
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.textShotProvider">
            <summary>
            Provider for text shots
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.styleContainerProvider">
            <summary>
            Provider for text shots
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.borderProvider">
            <summary>
            provider for container borders
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.body">
            <summary>
            Style definition for body
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.fontSize">
            <summary>
            complete setup for heading and normal tags
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.fontForText">
            <summary>
            font used for text
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.core.styleTheme.fontForHeadings">
            <summary>
            Font for heading tags
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.appendRole">
            <summary>
            appendRole -- convertable to Tuple: acePaletteRole + acePaletteVariationRole
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.none">
            <summary>
            The none - undefined role
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.i_container">
            <summary>
            Role of this styling option is to affect complete table or section container
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.i_margin">
            <summary>
            Role of this styling option is to be used for margin enforcement on left, right, top and bottom
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.i_line">
            <summary>
            The horizontal line
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.mergedHead">
            <summary>
            The merged header: acePaletteRole.colorA + acePaletteVariationRole.header
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.mergedContent">
            <summary>
            The merged content: acePaletteRole.colorA + acePaletteVariationRole.odd / even
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.mergedFoot">
            <summary>
            The merged footer: acePaletteRole.colorA + acePaletteVariationRole.normal
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.sectionHead">
            <summary>
            The section head: acePaletteRole.colorB + acePaletteVariationRole.header
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.sectionContent">
            <summary>
            The section content: acePaletteRole.colorB + acePaletteVariationRole.odd / even
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.sectionFoot">
            <summary>
            The section foot: acePaletteRole.colorB + acePaletteVariationRole.normal
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.majorHeading">
            <summary>
            The major heading: acePaletteRole.colorA + acePaletteVariationRole.heading
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.minorHeading">
            <summary>
            The minor heading: acePaletteRole.colorB + acePaletteVariationRole.heading
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.paragraph">
            <summary>
            The paragraph: acePaletteRole.colorDefault + acePaletteVariationRole.normal
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.remark">
            <summary>
            The remark: acePaletteRole.colorDefault + acePaletteVariationRole.heading
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableHead">
            <summary>
            The table head: acePaletteRole.colorC + acePaletteVariationRole.header
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableColumnHead">
            <summary>
            The table column head - the first cell with column name: acePaletteRole.colorC + acePaletteVariationRole.heading
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableColumnFoot">
            <summary>
            The table column foot - last cell at end of column: acePaletteRole.colorC + acePaletteVariationRole.normal
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableCellValue">
            <summary>
            The table cell value:: acePaletteRole.colorC + acePaletteVariationRole.odd / even
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableCellAnnotation">
            <summary>
            The table cell note: : acePaletteRole.colorC + acePaletteVariationRole.heading
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableCellNovalue">
            <summary>
            The table cell novalue : : acePaletteRole.colorDefault + acePaletteVariationRole.normal
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableBetween">
            <summary>
            The table between - intermediate information: : acePaletteRole.colorDefault + acePaletteVariationRole.normal
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.appendRole.tableFoot">
            <summary>
            The table foot - merged space where footer is printed : acePaletteRole.colorC + acePaletteVariationRole.normal
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.HtmlTextWriterTag">
            <summary>
            Specifies the HTML tags that can be passed to an <see cref="T:System.Web.UI.HtmlTextWriter"/> or <see cref="T:System.Web.UI.Html32TextWriter"/> object output stream.
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.metaModelTargetEnum">
            <summary>
            Enumerates possible targets of Apply/Append/Compose/Construct calls
            </summary>
            <remarks>
            Primarly created for ApplyStyle() method of <c>IDocumentRender</c> implementations
            </remarks>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.defaultTarget">
            <summary>
            Targets whatever is predefined as default target on level of <c>IRender</c> implementation class
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.document">
            <summary>
            The current document
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.page">
            <summary>
            The current page
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.scope">
            <summary>
            The current scope
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.scopeParent">
            <summary>
            The parent of current scope
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.scopeEachChild">
            <summary>
            Each child of the current scope
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.scopeChild">
            <summary>
            a child element of the current scope, needs key/id param
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.scopeRelativePath">
            <summary>
            Any metaContent element existing on a path, relative to scope. Supports apsolute paths too
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.pencil">
            <summary>
            Area pointed by <c>cursor.pencil</c>
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.lastAppend">
            <summary>
            The last append line/segment/section/node/cell
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.nextAppend">
            <summary>
            It will be applied after next append call
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.setStandard">
            <summary>
            Set it to standard (for this <c>render</c> instance
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.unsetStandard">
            <summary>
            Unset the standard config of this <c>render</c> instance
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.setNamedStandard">
            <summary>
            The set named standard - defines a preset on <c>styleTheme</c> level, globally accessable by any <c>render</c>
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.unsetNamedStandard">
            <summary>
            The deletes a named standard defined as preset on <c>styleTheme</c> level
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.metaModelTargetEnum.asAppend">
            <summary>
            Appends content representing configuration/settings/data used by targeting.
            </summary>
            <remarks>
            Example: in case of ApplyStyle() - it will Append description of style into content
            </remarks>
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.styleBordersPreset">
            <summary>
            Border presets
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.styleBorderType">
            <summary>
            Border line type
            </summary>
            \ingroup_disabled report_ll_style
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.styleTextModificationEnum">
            <summary>
            Modification of font size
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.styleTextModificationEnum.bigger">
            <summary>
            The bigger +1 factor level
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.styleTextModificationEnum.big">
            <summary>
            The big: +2 factor levels
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.styleTextModificationEnum.superscript">
            <summary>
            The superscript - resolved outside
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.enums.styleTextModificationEnum.subscript">
            <summary>
            The subscript - resolved outside
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.styleTextSizeEnum">
            <summary>
            Enumeration to index position of <c>headingSizes</c> list at <c>styleTextSizeSet</c>
            </summary>
            <see cref="!:styleTextSizeSet"/>
            \ingroup_disabled report_ll_style
        </member>
        <member name="T:imbSCI.Core.reporting.style.enums.styleTextTypeEnum">
            <summary>
            Compressed subset of appendType
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.setups.templateFieldStyle">
            <summary>
            Group of fields used for remove styler programming
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_oddEvenFlags">
            <summary>
            The style odd even flags
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_minorMajorFlags">
            <summary>
            The style minor major flags
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_width">
            <summary>
            Width of append
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_height">
            <summary>
            Height of append
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_appendTableOptionFlags">
            <summary>
            The style append table option flags
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_layoutColorRole">
            <summary>
            The style layout color role
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_defaultColorRole">
            <summary>
            aceColorRole for default color
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_theme">
            <summary>
            To pass theme reference
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_containerStyle">
            <summary>
            The style container style
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_headZone">
            <summary>
            The style head zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_footZone">
            <summary>
            The style foot zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_headExtraZone">
            <summary>
            The style head extra zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_footExtraZone">
            <summary>
            The style foot extra zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_leftZone">
            <summary>
            The style left zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_rightZone">
            <summary>
            The style right zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.style.setups.templateFieldStyle.style_styler">
            <summary>
            To pass styleForRangeBase objects
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.shot.IStyleInstruction">
            <summary>
            Object that is part or complete instance <c>styleShot</c> instruction - or meant to be used as styling definer
            </summary>
            <seealso cref="!:aceCommonTypes.interfaces.IGetCodeName" />
        </member>
        <member name="T:imbSCI.Core.reporting.style.shot.styleContainerShot">
            <summary>
            Style settings for container
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.type">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.themeCodeName">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleContainerShot.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>
            Unique string to identify unique values
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleContainerShot.GetFormatSetup">
            <summary>
            Returns the zone spatial settings -- btw. top/bottom and left/right margin and padding are equalized: top=>bottom, left=>right
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.sizeAndBorder">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.doCallForMerge">
            <summary>
            Should it call for multicell merge - in case it is applicable
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.minSize">
            <summary>
            minimum size
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.doWrapText">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.doSizedownContent">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.numberFormat">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleContainerShot.aligment">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.shot.styleContainerShotCollection">
            <summary>
            Collection of styleContainerShots
            </summary>
            <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.String, aceCommonTypes.reporting.style.styleContainerShot&gt;" />
        </member>
        <member name="T:imbSCI.Core.reporting.style.shot.styleTextShot">
            <summary>
            Concrete instance of textual decoration styling
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleTextShot.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>
            Unique string to identify unique values
            </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.themeCodeName">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleTextShot.#ctor(imbSCI.Core.reporting.style.enums.appendRole,imbSCI.Data.enums.appends.appendType,imbSCI.Core.reporting.style.core.styleTheme)">
            <summary>
            The prefered way of obtaining style information
            </summary>
            <param name="role">The role of particular append</param>
            <param name="__type">The type of particular append</param>
            <param name="theme">The theme to use fonts and size settings from</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleTextShot.#ctor(imbSCI.Core.reporting.style.enums.appendRole,imbSCI.Core.reporting.style.core.styleTheme)">
            <summary>
            Styling based only on <c>appendRole</c> information.
            </summary>
            <param name="role">The role.</param>
            <param name="theme">The theme.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleTextShot.processRole(imbSCI.Core.reporting.style.enums.appendRole)">
            <summary>
            Sets the styling info using <c>appendRole</c> information
            </summary>
            <param name="role">The role.</param>
            <param name="theme">The theme.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleTextShot.#ctor(imbSCI.Data.enums.appends.appendType,imbSCI.Core.reporting.style.core.styleTheme)">
            <summary>
            Styling information based on <c>appendType</c> and <c>styleTheme</c>
            </summary>
            <param name="type">The type.</param>
            <param name="theme">The theme.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.shot.styleTextShot.processType(imbSCI.Data.enums.appends.appendType,imbSCI.Core.reporting.style.core.styleTheme)">
            <summary>
            Processes the <c>appendType</c> and <c>styleTheme</c> to define all styling information
            </summary>
            <param name="__type">The type.</param>
            <param name="theme">The theme.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.type">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.modification">
            <summary>
            How font size should be modified before applied?
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.colorRole">
            <summary>
            What color role should be applied here
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.rotation">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.sizeEnum">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.sizeForFont">
            <summary>
            Size of font to be set
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.fontStyle">
            <summary>
            What font style it should set
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.doCallForInverse">
            <summary>
            This ShotSet will ask engine to apply inversed colors
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.doCallForMerge">
            <summary>
            Should it call for multicell merge - in case it is applicable
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.doCallForVariance">
            <summary>
            Should it call for OddEven roles to be applied?
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.shot.styleTextShot.font">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.shot.styleTextShotProvider">
            <summary>
            Provider for text styling shots
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="T:imbSCI.Core.reporting.style.styleAutoShotSet">
            <summary>
            Virtual styleShotSet that is build automatically according to <c>flags</c>
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.style.shot.IStyleInstruction" />
        </member>
        <member name="M:imbSCI.Core.reporting.style.styleAutoShotSet.resolve(imbSCI.Core.reporting.style.core.styleTheme,System.Object[])">
            <summary>
            Resolves autoshot into a series of instructions
            </summary>
            <param name="theme">The active teme</param>
            <param name="__resources">Resources: set of style related enums and appendType</param>
            <seealso cref="!:aceCommonTypes.enums.appendType"/>
            <seealso cref="T:imbSCI.Core.reporting.colors.acePaletteRole"/>
            <seealso cref="T:imbSCI.Core.reporting.style.enums.appendRole"/>
            <seealso cref="T:imbSCI.Core.reporting.colors.acePaletteVariationRole"/>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.styleAutoShotSet.resources">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.styleAutoShotSet.flags">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.stylePresets">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylePresets.themeCompany">
            <summary>
            Company theme
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylePresets.themeScience">
            <summary>
            scientific theme
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylePresets.themeBright">
            <summary>
            Theme bright and strong colors
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylePresets.themeSemantics">
            <summary>
            theme for semantic analysis
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.style.stylerForRange">
            <summary>
            Base of range stylers.
            </summary>
            <remarks>
            Range stylers are applied to <c>selectRangeArea</c>
            </remarks>
            <seealso cref="T:imbSCI.Core.reporting.zone.cursorVariator" />
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.setupForSection(imbSCI.Core.reporting.style.core.styleTheme,imbSCI.Core.reporting.zone.selectRangeArea,System.Boolean)">
            <summary>
            Setups for section.
            </summary>
            <param name="_theme">The theme.</param>
            <param name="area">The area.</param>
            <param name="loadPreset">if set to <c>true</c> [load preset].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.setupForVariables(System.Data.PropertyCollection,imbSCI.Core.reporting.zone.cursor,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Setups for variables.
            </summary>
            <param name="data">The data.</param>
            <param name="cur">The current.</param>
            <param name="loadPreset">if set to <c>true</c> [load preset].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.setupForTable(System.Data.DataTable,imbSCI.Core.reporting.zone.cursor,System.Boolean)">
            <summary>
            Setups for DataTable
            </summary>
            <param name="table">The table.</param>
            <param name="cur">The current.</param>
            <param name="loadPreset">if set to <c>true</c> [load preset].</param>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.savePresetTo(System.Data.PropertyCollection)">
            <summary>
            Saves the current settings into collection
            </summary>
            <param name="preset">The preset.</param>
        </member>
        <member name="F:imbSCI.Core.reporting.style.stylerForRange.ST">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.getArea(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets area that matches this position.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="completeArea">if set to <c>true</c> returns complete area not sliced part</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.getAreaOfRole(imbSCI.Core.reporting.style.enums.appendRole,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets area for style application with merge on
            </summary>
            <param name="role">The role.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.getStyleShot(System.Int32,System.Int32,imbSCI.Data.enums.appends.appendType)">
            <summary>
            Provides complete <see cref="T:imbSCI.Core.reporting.style.styleShotSet"/> according to x,y coordinates and desired <see cref="!:aceCommonTypes.enums.appendType"/>.
            </summary>
            <param name="x">X (horizontal) position relative to <c>selectRangeArea</c> 0,0 point.</param>
            <param name="y">Y (vertical) position relative to <c>selectRangeArea</c> 0,0 point.</param>
            <param name="type">If <c>appendType.none</c> it will automatically find the best match</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylerForRange.isDisabled">
            <summary>
            when styler is disabled it resolves always into appendRole.normal
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylerForRange.tableOptionFlags">
            <summary>
            Extra table options
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylerForRange.headFootFlags">
            <summary>
            flags for headFoot variationsy
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylerForRange.oddEvenFlags">
            <summary>
            flags for oddEven
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.#ctor(imbSCI.Core.reporting.style.core.styleTheme)">
            <summary>
            Unconfigured instance <see cref="T:imbSCI.Core.reporting.style.stylerForRange"/> class.
            </summary>
            <param name="_theme">The theme.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylerForRange.activePreset">
             <summary>
            
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylerForRange.mainPaletteRole">
            <summary>
            Currently applied main palette role
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.stylerForRange.layoutPaletteRole">
            <summary>
            Currently applied layout palette role
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.stylerForRange.getAppendRole(imbSCI.Core.reporting.zone.cursorVariatorState)">
            <summary>
            Gets the append role recommandation according to x and y position
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.style.styleShotSet">
            <summary>
            2017:Complete styling definition for one cell, div or whatever is the unit of styling
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.styleShotSet.op_Implicit(imbSCI.Core.reporting.style.styleShotSet)~imbSCI.Core.reporting.style.shot.styleContainerShot">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.Core.reporting.style.styleShotSet"/> to <see cref="T:imbSCI.Core.reporting.style.shot.styleContainerShot"/>.
            </summary>
            <param name="m">The m.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.styleShotSet.op_Implicit(imbSCI.Core.reporting.style.styleShotSet)~imbSCI.Core.reporting.style.shot.styleTextShot">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.Core.reporting.style.styleShotSet"/> to <see cref="T:imbSCI.Core.reporting.style.shot.styleTextShot"/>.
            </summary>
            <param name="m">The m.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.styleShotSet.op_Implicit(imbSCI.Core.reporting.style.styleShotSet)~imbSCI.Core.reporting.colors.acePaletteShot">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.Core.reporting.style.styleShotSet"/> to <see cref="T:imbSCI.Core.reporting.colors.acePaletteShot"/>.
            </summary>
            <param name="m">The m.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.style.styleShotSet.isReady">
            <summary>
            Gets a value indicating whether this <c>styleShotSet</c> is ready, having all tree sub IStyleInstruction non null.
            </summary>
            <value>
              <c>true</c> if this instance is ready; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.style.styleShotSet.container">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.styleShotSet.text">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.styleShotSet.palette">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.style.styleShotSet.getCodeName">
            <summary>
            Gets the codename.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.style.styleShotSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through sub shots.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object to iterate trough all sub style shots.
            </returns>
        </member>
        <member name="T:imbSCI.Core.reporting.style.table.tableRangeStyle">
            <summary>
            Describe table style
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.table.tableRangeStyle.outterLayout">
            <summary>
            Top=mergedHeader, Left=rowCounter, down=footer, right=NOT APPLUED
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.style.table.tableRangeStyle.innerLayout">
            <summary>
            top=column heading, left=firstColumn, right=lastColumn, down=column foot
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.IApplyToContent.addPlaceholder(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Rucno dodaje novi placeholder ili vraca postojeci ako vec postoji pod tim imenom
            </summary>
            <param name="fieldName"></param>
            <param name="_pi">Postavlja pi</param>
            <returns>vraca novi ili postojeci placeholder</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.IApplyToContent.applyToContent(System.Data.PropertyCollection,System.String,System.Boolean)">
            <summary>
            Applies the property collection
            </summary>
            <param name="source"></param>
            <param name="mContent"></param>
            <param name="fieldPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.IApplyToContent.applyToContent(System.Object,System.String,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <param name="source"></param>
             <param name="mContent"></param>
             <param name="fieldPrefix"></param>
             <param name="autoRemove"></param>
             <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.IApplyToContent.applyToContent(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Applies values from DataTable -- using shema and all rows.
            </summary>
            <param name="dt"></param>
            <param name="mContent"></param>
            <param name="fieldPrefix">Prefix applied on placeholder key</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.IApplyToContent.removeFromContent(System.String)">
            <summary>
            removes all placeholder tags from the content
            </summary>
            <param name="mContent"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.IApplyToContent.loadTemplateString(System.String)">
            <summary>
            Ucitava string u kome se nalazi template -- dodaje pronadjene placeholdere u kolekciju
            </summary>
            <param name="formatString">String koji se obradjuje</param>
            <param name="makeReport">Da li da pravi izvestaj o importu</param>
            <returns>Broj novo dodatih placeholdera</returns>
        </member>
        <member name="T:imbSCI.Core.reporting.template.reportTemplatePlaceholder">
            <summary>
            2014c> placeholder element u templejtu
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.templateForm">
            <summary>
            Form used in templates
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholder.renderToTemplate(System.Boolean)">
            <summary>
            Renders to template.
            </summary>
            <param name="secondOrder">if set to <c>true</c> [second order].</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.fieldName">
            <summary>
            ime polja ili propertija of koga preuzima vrednost
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholder.#ctor">
            <summary>
            Prazan placeholder
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholder.#ctor(System.Int64,imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection,System.String)">
            <summary>
            Pravi reportTemplatePlaceholder namenjen dataRow primeni
            </summary>
            <param name="__id"></param>
            <param name="__name"></param>
            <param name="__parent"></param>
            <param name="__fieldName"></param>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.id">
            <summary>
            redni broj plejsholdera
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.path">
            <summary>
            cela putanja - onako kako je prosledjeno prilikom definisanja
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder._useStringFormatAPI">
            <summary>
            Gets a value indicating whether [use string format API].
            </summary>
            <value>
              <c>true</c> if [use string format API]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.name">
            <summary>
            Naziv itema po kome se vodi key -- ako je _useStringFormatAPI onda je id, a inace je fieldName
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.pi">
            <summary>
            Property za koji je vezan placeholder -- ako je PI null, onda znaci da je predvidjen za dataRow object
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholder.getMapItemLabel">
            <summary>
            Vraca potpis placeholdera
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.isActivated">
            <summary>
            Placeholder je aktiviran ako ima svoj imbPropertyInfo
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.parent">
            <summary>
            reportTemplatePlaceholderCollection
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.reportTemplatePlaceholder.isFieldNameTemplateMode">
            <summary>
            Prepravlja nasledjeno podesavanje: isFieldNameTemplateMode = true --
            </summary>
            <remarks>
            FLAG: Da li se koristi ime polja za template mode (true) ili sedni broj (false)
            </remarks>
        </member>
        <member name="T:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection">
            <summary>
            Skup placeholdera za template
            </summary>
            <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.String, aceCommonTypes.reporting.template.reportTemplatePlaceholder&gt;" />
            <seealso cref="!:aceCommonTypes.reporting.template.IApplyToContent" />
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.#ctor(System.String)">
            <summary>
            Pravi kolekciju i odmah primenjuje templateString
            </summary>
            <param name="templateStringToEvaluate"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.addPlaceholder(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Rucno dodaje novi placeholder ili vraca postojeci ako vec postoji pod tim imenom
            </summary>
            <param name="fieldName"></param>
            <param name="_pi">Postavlja pi</param>
            <returns>vraca novi ili postojeci placeholder</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.applyToContent(System.Data.PropertyCollection,System.String,System.Boolean)">
            <summary>
            Applies the property collection
            </summary>
            <param name="source"></param>
            <param name="mContent"></param>
            <param name="fieldPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.applyToContent(System.Object,System.String,System.String,System.Boolean)">
            <summary>
            Reads properties from object and maps them to template
            </summary>
            <param name="source"></param>
            <param name="mContent"></param>
            <param name="fieldPrefix"></param>
            <param name="autoRemove"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.applyToContent(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Applies values from DataTable -- using shema and all rows.
            </summary>
            <param name="dt"></param>
            <param name="mContent"></param>
            <param name="autoRemove"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.applyToContent(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Applies to content.
            </summary>
            <param name="row">The row.</param>
            <param name="mContent">Content of the m.</param>
            <param name="autoRemove">if set to <c>true</c> [automatic remove].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.removeFromContent(System.String)">
            <summary>
            removes all placeholder tags from the content
            </summary>
            <param name="mContent"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.loadTemplateString(System.String)">
            <summary>
            Ucitava string u kome se nalazi template -- dodaje pronadjene placeholdere u kolekciju
            </summary>
            <param name="formatString">String koji se obradjuje</param>
            <param name="makeReport">Da li da pravi izvestaj o importu</param>
            <returns>Broj novo dodatih placeholdera</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.reportTemplatePlaceholderCollection.reportTemplatePlaceholderCollection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            kada se desi promena u kolekciji on obrise mapu da bi mogao ponovo da je pravi
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplate">
            <summary>
            Klasa koja opisuje jedan template
            </summary>
            \ingroup_disabled report_ll_templates
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplate.applyToContent(System.Data.DataRow,System.String)">
            <summary>
            Applies to content.
            </summary>
            <param name="row">The row.</param>
            <param name="mContent">Content of the m.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplate.applyToContent(System.Data.PropertyCollection,System.String)">
            <summary>
            Applies data from a property collection to its content
            </summary>
            <param name="source">The source.</param>
            <param name="mContent">Content of the m.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplate.applyToContent(System.Data.DataTable,System.String)">
            <summary>
            Applies to content.
            </summary>
            <param name="dt">The dt.</param>
            <param name="mContent">Content of the m.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplate.removeFromContent(System.String)">
            <summary>
            Removes from content.
            </summary>
            <param name="mContent">Content of the m.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplate.loadTemplateString(System.String)">
            <summary>
            Loads the template string.
            </summary>
            <param name="formatString">The format string.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplate.#ctor(System.String)">
            <summary>
            Constructor that runs the template code evaluation instantly
            </summary>
            <param name="templateCode"></param>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplate.placeholders">
            <summary>
            kolekcija parametara / plejs holdera
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplateBase">
            <summary>
            Osnovna klasa koju dele svi stringTemplate objekti
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplateConverterCollection">
            <summary>
            Collection of simple templates and container opening and closing tags
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateConverterCollection.GetContainerOpen(System.Object,System.Data.PropertyCollection)">
            <summary>
            Gets the opening line for the container.
            </summary>
            <param name="templateKey">The template key.</param>
            <param name="valuesForOpenTag">The values for open tag.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateConverterCollection.GetContainerClose(System.Object,System.Data.PropertyCollection)">
            <summary>
            Gets the closing line for the container
            </summary>
            <param name="templateKey">The template key.</param>
            <param name="valuesForCloseTag">The values for close tag.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateConverterCollection.RegisterContainer(System.Object,System.String,System.String)">
            <summary>
            Registers container with opening and closing templates
            </summary>
            <param name="templateKey">The template key.</param>
            <param name="openTemplate">The open template.</param>
            <param name="closeTemplate">The close template.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateConverterCollection.Register(System.Object,System.String)">
            <summary>
            Registers the specified template under given key
            </summary>
            <param name="templateKey">The template key.</param>
            <param name="template">The template.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateConverterCollection.containers">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateConverterCollection.templates">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplateDeclaration">
            <summary>
            Proto objekat - sadrzi samo tekstualnu definiciju templatea
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateDeclaration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.template.stringTemplateDeclaration"/> class.
            </summary>
            <param name="__template">The template.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.template.stringTemplateDeclaration"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateDeclaration.template">
            <summary>
            template content
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplateExtensions">
            <summary>
            Operacije sa stringTemplateExtensions
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateExtensions.willcards">
            <summary>
            collection of template willcards
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateExtensions.deployTemplateWillcards(System.String)">
            <summary>
            Deploys all template willcards
            </summary>
            <param name="templateString"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplatePlaceholder">
            <summary>
            Parametar - plejsholder
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplatePlaceholder.name">
            <summary>
            string kljuc plejsholdera
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplatePlaceholderCollection">
            <summary>
            Kolekcija template plejsholdera
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.template.stringTemplateTools">
            <summary>
            Common tool to work with {{{ }}} and {{ }} placeholders
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.template.stringTemplateTools.PLACEHOLDER_2ND_Start">
            <summary>
            2nd order placeholder _ prefix
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.template.stringTemplateTools.PLACEHOLDER_2ND_End">
            <summary>
            2nd order placeholder _ sufix
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.template.stringTemplateTools.PLACEHOLDER_Start">
            <summary>
            1st order placeholder _ prefix
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.template.stringTemplateTools.PLACEHOLDER_End">
            <summary>
            1st order placeholder _ sufix
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.template.stringTemplateTools._regex_placeholders">
            <summary>
            regex format za preuzimanje svih format placeholdera
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.template.stringTemplateTools._regex_import">
            <summary>
            The regex import
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateTools._useStringFormatAPI">
            <summary>
            Flag : da li da koristi String.Format() ili sopstvenu regex implementaciju
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateTools.regex_placeholders">
            <summary>
            REGEX upit za izdvajanje placeholdera iz templejta
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateTools.regex_placeholders_2nd">
            <summary>
            REGEX upit za izdvajanje placeholdera iz templejta
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateTools.regex_import">
            <summary>
            regex za izdvajanje placeholdera u templejtu
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.template.stringTemplateTools.regex_import_2nd">
            <summary>
            Gets the regex import 2ND.
            </summary>
            <value>
            The regex import 2ND.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.template.stringTemplateTools.renderToTemplate(System.Object,System.Boolean)">
            <summary>
            Vraca string koji definise placeholder u template stringu
            </summary>
            <param name="__name">The name.</param>
            <param name="secondOrder">if set to <c>true</c> [second order].</param>
            <returns>
            string koji se ubacuje u template string
            </returns>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursor">
            <summary>
            Universal 2D cursor for text and data navigation
            </summary>
            \ingroup_disabled report_ll_zone
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.name">
            <summary>
            sole purpose of name is for easier diagnostics
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.frame">
            <summary>
            Active frame
            </summary>
            <value>
            Active frame
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.isTempFrameActive">
            <summary>
            Returns TRUE if currently the cursor uses temporary frame not the main
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursor.useTempFrame">
            <summary>
            The use temporary frame
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursor.mainFrame">
            <summary>
            The main frame
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursor.tempFrame">
            <summary>
            The temporary frame -- when set
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursor.mode">
            <summary>
            The mode
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.currentZone">
            <summary>
            Gets or sets the current zone.
            </summary>
            <value>
            The current zone.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.valueReadZone">
            <summary>
            snimljena pozicija na ekranu odakle treba kasnije da se iscitava unos sa tastature
            </summary>
            <value>
            The value read zone.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.autoValueReadZone">
            <summary>
            Automatski pravi value read zonu na mestu gde je stao kursor
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.doPivotTranslation">
            <summary>
            If TRUE cursor will rotate orientation so X is vertical and Y is horisontal
            </summary>
            <value>
              <c>true</c> if [do pivot translation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.pencil">
            <summary>
            Defines zone affected by background brushing, value writing, merge call, value delete or other spatial operation
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.pencilAbsolute">
            <summary>
            Gets the pencil projected on current cursor position
            </summary>
            <value>
            Result is trimmed accprding to the current zone within the frame
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.getPencil(imbSCI.Core.reporting.zone.pencilType,System.Int32)">
            <summary>
            Gets the pencil according to <see cref="T:imbSCI.Core.reporting.zone.pencilType"/>
            </summary>
            <param name="ptype">The ptype.</param>
            <returns>area covered by pencil</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.projectArea(imbSCI.Core.reporting.zone.selectRangeArea)">
            <summary>
            Projects an area onto current cursor position and returns its crosection with allowed zone frame  area if it colides with current frame zone
            </summary>
            <param name="area">The area.</param>
            <returns>area or part of area within allowed zone frame</returns>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursor.doUseDefaultPencil">
            <summary>
            Default pencil is seen when get called on <c>pencilAbsolute</c>
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.doPencilWidthToZone">
            <summary>
            if TRUE it will keep pencil width locked to current zone
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.setPencil(System.Boolean,System.Boolean)">
            <summary>
            Sets pencil options
            </summary>
            <param name="useDefaultPencil">if set to <c>true</c> pencil will be ignored and default pencil will be returned on get pencilAbsolute.</param>
            <param name="pencilWidthToZone">if set to <c>true</c> pencil width will automatically follow width of current zone</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.getSelectZone(System.Int32,System.Int32,imbSCI.Core.reporting.zone.selectZoneOption[])">
            <summary>
            Pravi selectZone na osnovu sadrzaja trenutne linije. Trazi [ i ] kao granicnike zone. Ako ih ima vise, upotrebice prvi par.
            </summary>
            <param name="zoneHeight">Height of the zone.</param>
            <param name="zoneWidth">Width of the zone.</param>
            <param name="option">The option.</param>
            <returns>
            selectZone objekat koji treba upotrebiti kao inputReadZone ili za nesto drugo
            </returns>
            <remarks>
            Ako u trenutnoj liniji:
            - ima vise [ ] parova: upotrebice prvi
            - je sve prazno ili popunjeno razmacima: upotrebice celu liniju kao zonu
            - ako je od x-a do desnog inner x-a prazno
            </remarks>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.#ctor(imbSCI.Core.reporting.zone.cursorZone,imbSCI.Core.reporting.zone.textCursorMode,imbSCI.Core.reporting.zone.textCursorZone,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.cursor"/> class.
            </summary>
            <param name="__target">The target.</param>
            <param name="__mode">The mode.</param>
            <param name="__zone">The zone.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.switchToZone(imbSCI.Core.reporting.zone.textCursorZone,imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Prebacuje kursor u datu zonu
            </summary>
            <param name="__zone">The zone.</param>
            <param name="__corner">The corner.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.switchToMainZone">
            <summary>
            Vraca kursor na njegovu glavnu zonu
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursor.mainZone">
            <summary>
            zona koja je "home" za ovaj kursor - odnosno, zona za koju je ovaj kursor primarno namenjen i u koju se vraca nakon privremenih premestanja u druge zone metodom switchToZone()
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.placeChild(imbSCI.Core.reporting.zone.ISupportsBasicCursor)">
            <summary>
            Postavlja child objekat na poziciju kursora
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.setTempFrame(imbSCI.Core.reporting.zone.cursorSubzoneFrame,imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Sets the temporary frame by using subzone preset
            </summary>
            <param name="sub">The sub.</param>
            <param name="startPosition">The start position.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.setTempFrame(System.Int32,System.Int32,imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Int32,System.Int32)">
            <summary>
            Sets the temporary zone by adjusting
            </summary>
            <param name="rel_width">From current position to <c>rel_width</c>.</param>
            <param name="rel_height">Height of the relative<c>rel_height</c></param>
            <param name="startPosition">The start position.</param>
            <param name="leftRightPadding">The left right padding.</param>
            <param name="topBottomPadding">The top bottom padding.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.setToParentFrame(imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Cancels temporal frame if tempFrame was used
            </summary>
            <param name="startPosition">The start position.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.backToMainFrame(imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Boolean)">
            <summary>
            Cancels temporal frame if tempFrame was used
            </summary>
            <param name="startPosition">The start position.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.selectZoneAreaIn(imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Int32)">
            <summary>
            Selects the zone area in.
            </summary>
            <param name="direction">The direction.</param>
            <param name="steps">The steps.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.selectZoneArea">
            <summary>
            Selects the current zone RangeArea accorting to marigin, pading and ZoneMode
            </summary>
            <returns>Area struct with coordinates and dimensions</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.selectZone">
            <summary>
            Vraca dimenzije trenutne zone
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.selectAreaToCorner(imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Vraca rastojanje izmedju trenutne pozicije kursora i datog kraja/coska
            </summary>
            <param name="__corner">The corner.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.selectToCorner(imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Vraca rastojanje izmedju trenutne pozicije kursora i datog kraja/coska
            </summary>
            <param name="__corner">The corner.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.moveToCorner(imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Pomera kursor u dati ugao
            </summary>
            <param name="__corner">The corner.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.default_direction">
            <summary>
            Default movement direction to be applied when .none is sent
            </summary>
            <value>
            The default direction.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.setDefaultDirection(imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Sets the default direction.
            </summary>
            <param name="newDefault">The new default.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.moveInDirection(imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Int32)">
            <summary>
            Pomera kursor u dati ugao
            </summary>
            <param name="__corner">The corner.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.setMarginHere(imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Sets margin at current position using direction parameter
            </summary>
            <param name="direction">What border of margin to set at this position</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.checkPositions">
            <summary>
            proverava poziciju i primenjuje ogranicenje
            </summary>
            <returns>TRUE if correction was made</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.moveFor(System.Int32,System.Int32)">
            <summary>
            Moves for specified X and Y. It calls checkPositions() afterwards.
            </summary>
            <param name="xMovement">The x movement. Above 0 means in Right direction, below 0 means in Left direction</param>
            <param name="yMovement">The y movement. Above 0 means Downward, below 0 means Upward</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.moveLineTo(System.Int32)">
            <summary>
            Pomera kursor na lokalnu liniju
            </summary>
            <param name="zoneLineNumber">The zone line number.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.enter">
            <summary>
            Moves downwards and places X on left border
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.nextLine(System.Int32)">
            <summary>
            Moves downwards by step without affecting Y position
            </summary>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.prevLine(System.Int32)">
            <summary>
            Previouses the line.
            </summary>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.next(System.Int32)">
            <summary>
            Nexts the specified step.
            </summary>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.prev(System.Int32)">
            <summary>
            Move X by step on left *negative*
            </summary>
            <param name="step">Step of movement</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.x">
            <summary>
            X pozicija kursora
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursor.y">
            <summary>
            pozicija po liniji
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursor.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorDimConversions.toExcelWidth(System.Int32)">
            <summary>
            Converts width in mm into EEPlus Excel column witdh parameter
            </summary>
            <param name="mmWidth">desired width in mm</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorPositionResponse">
            <summary>
            Result enumeration when asking <see cref="T:imbSCI.Core.reporting.zone.cursorZone"/> to determine where the <see cref="T:imbSCI.Core.reporting.zone.cursor"/> is currently
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorSubzoneFrame.fullFrame">
            <summary>
            The full frame - takes full size of source frame
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorSubzoneFrame.h1">
            <summary>
            The first half of width
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorSubzoneFrame.h2">
            <summary>
            The second half of width
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorSubzoneFrame.q1">
            <summary>
            The first quorter of width
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorSubzoneFrame.q2">
            <summary>
            The 2nd quirter of width
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorSubzoneFrame.q3">
            <summary>
            The q3 quorter of width
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorSubzoneFrame.q4">
            <summary>
            The q4 quorter of width
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorVariator">
            <summary>
            Helper class used for easier table styling
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.minor">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.major">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.headZone">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.headZoneExtension">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.footZoneExtension">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.footZone">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.leftZone">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.rightZone">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.area">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorVariator.#ctor(imbSCI.Core.reporting.zone.selectRangeArea,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Defines variator zone with odd/even, normal/major/minor vertical, head/headExtension/foot/footExtension, normal/left/right horizontal detection.
            </summary>
            <param name="__area">The area.</param>
            <param name="minorLine">Minor line is every Nth. 0 will disable this alternation</param>
            <param name="majorLine">Major line is every Nth. 0 will disable this alternation</param>
            <param name="__headZone">The head zone - the top N rows</param>
            <param name="__footZone">The foot zone - the last N rows</param>
            <param name="__headZoneExtension">The head zone extension are N rows after headZone</param>
            <param name="__footZoneExtension">The foot zone extension are N rows before footZone</param>
            <param name="__leftZone">The left zone is N columns from left</param>
            <param name="__rightZone">The right zone is N columns from right</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorVariator.setFromFlags(imbSCI.Data.enums.cursorVariatorOddEvenFlags)">
            <summary>
            Sets from flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorVariator.setFromFlags(imbSCI.Core.enums.cursorVariatorHeadFootFlags)">
            <summary>
            Sets Head and foot flags
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorVariator.setColorUse(imbSCI.Core.reporting.zone.cursorVariatorState)">
            <summary>
            Sets the color use.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorVariator.lastState">
            <summary>
            Result of last <see cref="M:imbSCI.Core.reporting.zone.cursorVariator.state(System.Int32,System.Int32)"/> call
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorVariator.state(System.Int32,System.Int32)">
            <summary>
            Returns state of speficied position according to <c>area</c>, <c>headZone</c>, <c>footZone</c> and other parameters.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorVariatorState">
            <summary>
            State of coordinates after tested by cursorVariator
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorVariatorState.isHeadZoneExtended">
            <summary>
            Is coordinate inside head zone extended - the zone between headZone and normal rows
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorVariatorState.useLayoutPalette">
            <summary>
            If TRUE it will use color for layout
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorVariatorState.useColorIndex">
            <summary>
            Applied to select color brightness from pallete
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorVariatorState.useInvertedForeground">
            <summary>
            The use inverted - inverts in
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorZone">
            <summary>
            Zone within cursor is allowed to move. Has 3 ranges: inner, boxed and outter
            </summary>
            \ingroup_disabled report_ll_zone
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZone.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>
            Unique string to identify unique values
            </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZone.subzones">
            <summary>
            Zones within this zone. Master zone is automatically set by constructor
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZone.parent">
            <summary>
            Reference to the parent zone. if null this is a master zone
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZone.selectRangeArea(imbSCI.Core.reporting.zone.textCursorZone)">
            <summary>
            Selects the range area of space allocated within this zone, respecting what sub area type is specified
            </summary>
            <param name="subAreaType">Type of the sub area.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZone.spatialUnit">
            <summary>
            Describes how big is one 'character' / position space of cursor - 2D
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZone.#ctor">
            <summary>
            Zone without any space within. Dimensions must be set later
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZone.#ctor(imbSCI.Core.reporting.zone.cursorZone,imbSCI.Core.reporting.zone.cursorSubzoneFrame)">
            <summary>
            Subzone frame by preset <see cref="T:imbSCI.Core.reporting.zone.cursorZone"/>
            </summary>
            <param name="sourceZone">The source zone.</param>
            <param name="sz">Subzone preset</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Konstruktor za dvodimenziono podesavanje
            </summary>
            <param name="__width"></param>
            <param name="__height"></param>
            <param name="__leftRightMargin"></param>
            <param name="__topBottomMargin"></param>
            <param name="__leftRightPadding"></param>
            <param name="__topBottomPadding"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZone.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            konstruktor za jednolinijsko podesavanje
            </summary>
            <param name="__width"></param>
            <param name="__leftRightMargin"></param>
            <param name="__leftRightPadding"></param>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorZoneBuilder">
            <summary>
            Helps with constructing subzones inside target zone
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneBuilder.#ctor(imbSCI.Core.reporting.zone.cursorZone)">
            <summary>
            Builder to create subzones in speficied target. Target is <see cref="T:imbSCI.Core.reporting.zone.cursorZoneBuilder"/> class
            </summary>
            <param name="__target">The target.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneBuilder.buildColumns(System.Int32,System.Int32[])">
            <summary>
            Builds the columns in targeted zone - respecting provided relative withs
            </summary>
            <param name="numberOfColumns">Number of columns to build inside the zone. Use small numbers.</param>
            <param name="relWidth">Relative width ratio for each column. If less is provided than <c>numberOfColumns</c> the rest of columns will have relWidth=1</param>
            <remarks>
            <para>Widths are relative to each other. If you want first column to be double in width than each of the other two use:  2,1,1</para>
            </remarks>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneBuilder.c">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneBuilder.target">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorZoneCollection">
            <summary>
            Collection of zones
            </summary>
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneCollection.Add(imbSCI.Core.reporting.zone.cursorZoneRole,imbSCI.Core.reporting.zone.cursorZone)">
            <summary>
            Adds a zone into collection. Null <c>zone</c> will be ignored.
            </summary>
            <remarks>
            <para>If role is supports multiple items (column, section) on existing zone for the role it will create indexed key.</para>
            <para>If its a singular (footer, header, master) role it will replace any existing.</para>
            <para>If <c>master</c> zone is set, all zones will have the <c>master</c> zone set as parent.</para>
            <para>You may set the <c>master</c> zone with constructor or any time later with Add() call - it will automatically set parent for existing zones</para>
            </remarks>
            <param name="role">The role for the zone</param>
            <param name="zone">The zone to add into collection</param>
            <returns>Key that was finally used for the zone. Possibly important in case of roles supporting multiple entries</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneCollection.getBoundaryOf(imbSCI.Core.reporting.zone.cursorZoneRole,imbSCI.Core.reporting.zone.textCursorZone)">
            <summary>
            Gets the boundary rectangle to hold all subzones with the specified role.
            </summary>
            <param name="role">The role of subzone or subzones to select</param>
            <param name="scope">The scope to look into for each subzone</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneCollection.Item(imbSCI.Core.reporting.zone.cursorZoneRole,System.Int32)">
            <summary>
            Gets the <see cref="T:imbSCI.Core.reporting.zone.cursorZone"/> with the specified role. If the role supports multiple entries then specify index to choose what zone to get.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.reporting.zone.cursorZone"/>.
            </value>
            <param name="role">The role.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorZoneExecutionSettings">
            <summary>
            Settings about behaviour of cursor inside a zone
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneExecutionSettings.pageScopeInZone">
            <summary>
            zone to be applied upod entering or creating new document
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneExecutionSettings.cursorMode">
            <summary>
            Way that cursor should hangle vertical spacing
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneExecutionSettings.pageScopeInMove">
            <summary>
            Cursor move once new or existing page is scoped
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneExecutionSettings.scopeInMove">
            <summary>
            What movement of cursor it should do <c>just before</c> scoping inside child MetaContent
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneExecutionSettings.scopeOutMove">
            <summary>
             What movement of cursor it should do <c>just before</c> scoping <c>outside</c> child MetaContent
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneExtensions.getPresetSpatialSettings(imbSCI.Core.reporting.zone.cursorZoneSpatialPreset)">
            <summary>
            Gets the preset spatial settings based on preset
            </summary>
            <param name="preset">The preset.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneExtensions.setPresetSpatialSettings(imbSCI.Core.reporting.zone.cursorZoneSpatialSettings,imbSCI.Core.reporting.zone.cursorZoneSpatialPreset)">
            <summary>
            Deplozs spatial settings from named preset
            </summary>
            <param name="output">The output.</param>
            <param name="preset">The preset.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.cursorZoneExtensions.setZoneStructure(imbSCI.Core.reporting.zone.cursorZone,imbSCI.Core.reporting.zone.cursorZoneLayoutPreset,System.Boolean)">
            <summary>
            Builds the zone.
            </summary>
            <param name="layoutPreset">The layout preset.</param>
            <param name="spatialPreset">The spatial preset.</param>
            <param name="target">The target.</param>
            <returns>Resulting zone</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If Layout presed never implemented</exception>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorZoneRole">
            <summary>
            Role that a zone may have inside another zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneRole.master">
            <summary>
            The parent zone for all zones
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneRole.header">
            <summary>
            The header - top most section with given height
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneRole.footer">
            <summary>
            The footer - bottom most section with given height
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneRole.section">
            <summary>
            The section - horizontal division of a zone where height is defined as part of parent zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneRole.column">
            <summary>
            The column - vertical division of a zone where width is defined as part of parent zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneSpatialPreset.sheetNormal">
            <summary>
            The sheet normal: t=1, wc=12, hc=120, sp=160px
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneSpatialPreset.sheetSquareCell">
            <summary>
            20x20px cell dimension
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneSpatialPreset.textPage">
            <summary>
            The text page - t=8, wc=100, hc=60, sp=10
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneSpatialPreset.console">
            <summary>
            The console - wc85 x hc43, t=4
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneSpatialPreset.wideConsole">
            <summary>
            The wide console - wc=160, hc=78
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.cursorZoneSpatialPreset.a4OnFont10pt">
            <summary>
            The a4 on font size 10pt
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings">
            <summary>
            Zone setup for spacing and sizing
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.zone.textFormatSetupBase" />
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.spatialUnit">
            <summary>
            Gets or sets the spatial unit (width): width of one Cell Unit
            </summary>
            <value>
            The spatial unit.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.spatialUnitRatioYPerX">
            <summary>
            Gets or sets the spatial unit ratio y per x.
            </summary>
            <value>
            The spatial unit ratio y per x.
            </value>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.spatialUnitMarginRatio">
            <summary>
            ratio to calculate margin spacing unit from standard spatial unit
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.spatialUnitPaddingRatio">
            <summary>
            ratio to calculate padding spacing unit from standard spatial unit
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.spatialUnitHeight">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.spatialUnitMargin">
            <summary>
            recalculated margin spatial unit, based on ratio
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.spatialUnitPadding">
            <summary>
            recalculated padding unit
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.cursorZoneSpatialSettings.tabPerCellUnit">
            <summary>
            Number of cell units per one tab
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.innerWidth">
            <summary>
            Width - padding - margin: sirina u koju se upisuje sadrzaj
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.innerLeftPosition">
            <summary>
            Pozicija od koje pocinje upisivanje sadrzaja
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.innerRightPosition">
            <summary>
            Pozicija do koje se upisuje sadrzaj (width - padding.right, margin.right)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.innerBoxedWidth">
            <summary>
            Sirina na kojoj se ispisuje pozadina (width-margin)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.innerHeight">
            <summary>
            Visina na kojoj se ispisuje sadrzaj> height - padding - margin
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.innerBoxedHeight">
            <summary>
            Visina na kojoj se ispisuje pozadina> height - margin
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.width">
            <summary>
            maksimalna spoljna sirina formata (innerWidth+padding+margin = Windows.width)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.height">
            <summary>
            maksimalna spoljna visina formata (innerHeight+padding+margin=Windows.Height)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.outerBottomPosition">
            <summary>
            Pozicija na kojoj se zavrsava sav sadrzaj ovog bloka: Y+margin+padding+innerHeight
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.ISupportsBasicCursor.outerRightPosition">
            <summary>
            Pozicija sa sve marginom> x+margin.left+padding.left+innerWidth+padding.right+margin.right
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.selectRange">
            <summary>
            2D selection information
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRange.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>
            Unique string to identify unique values
            </returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRange.x">
            <summary>
            x position
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRange.y">
            <summary>
            y positon
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRange"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRange"/> class.
            </summary>
            <param name="__x">The x.</param>
            <param name="__y">The y.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.selectRangeArea">
            <summary>
            Selection area> with its starting poing, ending point and size. It automatically calculates> x, y, width and height fields
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.ToString(System.String)">
            <summary>
            Four placemaker format expected for: {x}, {y}, {width}, {height}
            </summary>
            <seealso cref="F:imbSCI.Core.reporting.zone.selectRangeArea.FORMAT_SPACESEPARATER"/>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.selectRangeArea.FORMAT_SPACESEPARATER">
            <summary>
            Format preset: x,y,w,h
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.GetCornerPoint(imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Returns coordinates of a corner, within the area. <see cref="T:imbSCI.Core.reporting.zone.textCursorZoneCorner"/>
            </summary>
            <param name="corner">The corner.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.GetVerticalAxis(System.Int32,System.Int32)">
            <summary>
            Gets the vertical axis.
            </summary>
            <param name="atX">At x.</param>
            <param name="atW">At w.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.GetHorizontalAxis(System.Int32,System.Int32)">
            <summary>
            Gets the horizontal axis.
            </summary>
            <param name="atY">At y.</param>
            <param name="atH">At h.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.selectRangeArea._topLeft">
            <summary>
            The top left - starting point
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.selectRangeArea._bottomRight">
            <summary>
            Down right - end point
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeArea.yCenter">
            <summary>
            Gets the y (vertical) center of area.
            </summary>
            <value>
            The y center.
            </value>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.resize(System.Int32,System.Int32)">
            <summary>
            Resizes the area to specified width and height. Negative values will be ignored. Use -1 to keep a dimension unchanged.
            </summary>
            <param name="__width">The width. Negative value will be ignored. Use -1 to keep it unchanged.</param>
            <param name="__height">The height. Negative value will be ignored. Use -1 to keep it unchanged.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.reset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets new position and optionally new size
            </summary>
            <param name="__x">The x.</param>
            <param name="__y">The y.</param>
            <param name="__width">The width - leave -1 to keep it unchanged</param>
            <param name="__height">The height - leave -1 to keep it unchanged</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.setToChanged">
            <summary>
            Sets to changed state
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.isInside(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified x,y coordinates are showing to position within this area.
            </summary>
            <param name="tX">The t x.</param>
            <param name="tY">The t y.</param>
            <returns>
              <c>true</c> if x,y is inside, and not on the edge
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.isInsideOrEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether x,y coordinates are inside or within edge of this area.
            </summary>
            <param name="tX">The t x.</param>
            <param name="tY">The t y.</param>
            <param name="edge">The edge thickness. It is applied in both direction: inside and outside from border zone</param>
            <returns>
              <c>true</c> when x,y are inside area + area extended by the edge. If edge is 1 than exact size of area is tested.
            </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.isNearAnyCornerOrEdge(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if x,y is near to an edge, corner or center of this area - respecting specified limit distance.
            </summary>
            <param name="tX">X (horizontal position) to test</param>
            <param name="tY">Y (vertical position) to test </param>
            <param name="nearLimit">Absolute distance considered to be near.</param>
            <returns>Edge, corner or center that is near to x,y. <see cref="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.none"/> is returned if nothing is near within <c>nearLimit</c> range </returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.getDistanceFromCorner(System.Int32,System.Int32,imbSCI.Core.reporting.zone.textCursorZoneCorner)">
            <summary>
            Absolute distance from corner or edge
            </summary>
            <param name="tX"></param>
            <param name="tY"></param>
            <param name="edgeOrCorner"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.isNearToCorner(System.Int32,System.Int32,imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Int32)">
            <summary>
            Determines whether x,y coordinates are near to the specified corner or edge of the area
            </summary>
            <param name="tX">X (horizontal position) to test</param>
            <param name="tY">Y (vertical position) to test </param>
            <param name="edgeOrCorner">The edge or corner to test against</param>
            <param name="nearLimit">Absolute distance considered to be near</param>
            <returns>
              <c>true</c> if [is near to corner] [the specified t x]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbSCI.Core.reporting.zone.selectRangeArea.isOnEdge(System.Int32,System.Int32)" -->
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.expandToWrap(imbSCI.Core.reporting.zone.selectRangeArea)">
            <summary>
            Expands this rangeArea to have specified rangeArea inside its boundaries
            </summary>
            <param name="areaToWrap">The area to wrap.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.expand(imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Int32)">
            <summary>
            Expands in the specified direction for given number of steps
            </summary>
            <param name="direction">The direction.</param>
            <param name="step">The step.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.expand(imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Boolean)">
            <summary>
            Expands the specified direction.
            </summary>
            <param name="direction">The direction of expansion</param>
            <param name="stepCriteria">If <c>true</c> it will expand one step</param>
            <returns>Size of expansion</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.expand(imbSCI.Core.reporting.zone.textCursorZoneCorner,System.Int32,System.Boolean[])">
            <summary>
            Expands in the specified direction for number of boolean arguments being true
            </summary>
            <param name="direction">The direction.</param>
            <param name="stepCriterias">The step criterias.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.getCrossection(imbSCI.Core.reporting.zone.selectRangeArea)">
            <summary>
            Gets the crossection / overlap area / with <c>operant</c>
            </summary>
            <param name="operand">The operand to get overlap with</param>
            <returns>Area of overlap between this and <c>operand</c> area</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.#ctor(imbSCI.Core.reporting.zone.selectRange,imbSCI.Core.reporting.zone.selectRange)">
            <summary>
            Two-point constructor: Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRangeArea"/> struct.
            </summary>
            <param name="topLeft">The top left.</param>
            <param name="bottomRight">The bottom right.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.#ctor(imbSCI.Core.reporting.zone.selectRange,System.Int32,System.Int32)">
            <summary>
            Starting point, width and height. Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRangeArea"/> struct.
            </summary>
            <param name="start">The start.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRangeArea"/> class.
            </summary>
            <param name="x_end">Width</param>
            <param name="y_end">Height</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeArea.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Absolute coordinate constructor: TopLeft + BottomRight. Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRangeArea"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="x_end">The x end.</param>
            <param name="y_end">The y end.</param>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.selectRangeAreaDictionary">
            <summary>
            Memory of saved ranges
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithChildSelector" />
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.getLastClosed(System.Int32)">
            <summary>
            Gets a entry <c>n</c>additions <c>ago</c> from back/end, counting only ones that are <c>isClosed</c>=true.
            </summary>
            <param name="ago">The ago. If 1 it will return the last closed entry. 0 or less will throw exception</param>
            <returns>Last selectRangeAreaNamed that is closed</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ago - Must be between 0 and infinity. If it is above Count() - the first is returned</exception>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.getLastUnclosed(System.Int32)">
            <summary>
            Gets the last or <c>N-th</c> that must be unclosed.
            </summary>
            <param name="ago">The ago.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.getLastAny(System.Int32)">
            <summary>
            Gets the last  or <c>N-th</c> - without isClosed criteria.
            </summary>
            <param name="ago">The ago.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.getLast(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Gets the last.
            </summary>
            <param name="mustBeUnclosed">if set to <c>true</c> [must be unclosed].</param>
            <param name="allowUnclosed">if set to <c>true</c> [allow unclosed].</param>
            <param name="ago">The ago.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ago - Must be between 0 and infinity. If it is above Count() - the first is returned</exception>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.Add(imbSCI.Core.reporting.zone.selectRangeAreaNamed)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.Add(System.String,imbSCI.Core.reporting.zone.selectRangeArea,System.Boolean)">
            <summary>
            Adds the specified path.
            </summary>
            <param name="__path">The path.</param>
            <param name="item">The item.</param>
            <param name="doClose">if set to <c>true</c> [do close].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Adds the specified path.
            </summary>
            <param name="__path">The path.</param>
            <param name="x_st">The x st.</param>
            <param name="y_st">The y st.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRangeAreaDictionary"/> class.
            </summary>
            <param name="__name">Name of this dictionary</param>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified path.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.name">
            <summary>
            Dictionary name
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.items">
            <summary>
            Members
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.Count">
            <summary>
            Number of child items
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaDictionary.indexOf(imbSCI.Data.interfaces.IObjectWithChildSelector)">
            <summary>
            Index of supplied child - in his collection
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.selectRangeAreaNamed">
            <summary>
            Named entry of selectRangeArea, saved for lager use
            </summary>
            <seealso cref="T:imbSCI.Core.reporting.zone.selectRangeArea" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithPath" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeAreaNamed.name">
            <summary>
            name, last part of path
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeAreaNamed.path">
            <summary>
            its full path, including name
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaNamed.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.reporting.zone.selectRangeAreaNamed"/> class.
            </summary>
            <param name="__path">The path.</param>
            <param name="x_st">The x st.</param>
            <param name="y_st">The y st.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaNamed.setStart(System.Int32,System.Int32)">
            <summary>
            Sets the start of Area
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.selectRangeAreaNamed.setEnd(System.Int32,System.Int32)">
            <summary>
            Sets the end of Area and marks it as closed
            </summary>
            <param name="x_end">The x end.</param>
            <param name="y_end">The y end.</param>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.selectRangeAreaNamed.isClosed">
            <summary>
            TRUE if this area is closed, ready to be applied
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.selectZone">
            <summary>
            Defines selection zone
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.selectZone.x">
            <summary>
            Horizontalna pozicija
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.selectZone.y">
            <summary>
            Vertikalna pozicija
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.selectZone.width">
            <summary>
            Sirina
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.selectZone.height">
            <summary>
            Visina
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.textCursorMode">
            <summary>
            Primena ogranicenja kursora
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.textCursorZone">
            <summary>
            Zona kretanja kursora
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZone.innerZone">
            <summary>
            Zona ogranicena padding + margin
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZone.innerBoxedZone">
            <summary>
            Zona ogranicena marginom
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZone.outterZone">
            <summary>
            Zona celog prikaza
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZone.unknownZone">
            <summary>
            zona nije zadata - ovo ne bi smelo da ostane drugo kao vrednost
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.default_corner">
            <summary>
            The default corner
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.UpLeft">
            <summary>
            Up left
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.UpRight">
            <summary>
            Up right
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.DownLeft">
            <summary>
            Down left
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.DownRight">
            <summary>
            Down right
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.Top">
            <summary>
            The top
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.Bottom">
            <summary>
            The bottom
            </summary>
        </member>
        <member name="F:imbSCI.Core.reporting.zone.textCursorZoneCorner.center">
            <summary>
            The center - center of the zone, div, cell...
            </summary>
        </member>
        <member name="T:imbSCI.Core.reporting.zone.textFormatSetupBase">
            <summary>
            Block formatting base
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Konstruktor za dvodimenziono podesavanje
            </summary>
            <param name="__width"></param>
            <param name="__height"></param>
            <param name="__leftRightMargin"></param>
            <param name="__topBottomMargin"></param>
            <param name="__leftRightPadding"></param>
            <param name="__topBottomPadding"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            konstruktor za jednolinijsko podesavanje
            </summary>
            <param name="__width"></param>
            <param name="__leftRightMargin"></param>
            <param name="__leftRightPadding"></param>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.autoHeight(System.Boolean,System.Int32)">
            <summary>
            postavlja automatsku visinu
            </summary>
            <param name="ifLess"></param>
            <param name="contentHeight"></param>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerWidth">
            <summary>
            Width - padding - margin: sirina u koju se upisuje sadrzaj
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerLeftPosition">
            <summary>
            Pozicija od koje pocinje upisivanje sadrzaja
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerRightPosition">
            <summary>
            Pozicija do koje se upisuje sadrzaj (width - padding.right, margin.right)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerBoxedLeftPosition">
            <summary>
            Pozicija za leve strane - marget.left
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerBoxedRightPosition">
            <summary>
            Pozicija na desnoj strani - witdh - margin.right
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerBoxedWidth">
            <summary>
            Sirina na kojoj se ispisuje pozadina (width-margin)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerHeight">
            <summary>
            Visina na kojoj se ispisuje sadrzaj> height - padding - margin
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerBoxedHeight">
            <summary>
            Visina na kojoj se ispisuje pozadina> height - margin
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerTopPosition">
            <summary>
            Prva vertikalna pozicija u kojoj moze da pise sadrzaj
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerBottomPosition">
            <summary>
            Krajnja vertikalna pozicija na kojoj moze da pise sadrzaj
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerBoxedTopPosition">
            <summary>
            Prva vertikalna pozicija - bez paddinga
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.innerBoxedBottomPosition">
            <summary>
            Krajnja vertikalna pozicija na kojoj moze da pise sadrzaj
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.margin">
            <summary>
            margina za liniju koja se ne boji pozadinskim sablonom
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.padding">
            <summary>
            padding za koji se sadrzaj odvaja od ivice pozadne
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.outerBottomPosition">
            <summary>
            Pozicija na kojoj se zavrsava sav sadrzaj ovog bloka: Y+margin+padding+innerHeight
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupBase.outerRightPosition">
            <summary>
            Pozicija sa sve marginom> x+margin.left+padding.left+innerWidth+padding.right+margin.right
            </summary>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.left(imbSCI.Core.reporting.zone.textCursorZone)">
            <summary>
            Left position for specified zone.
            </summary>
            <param name="currentZone">Zone to test against</param>
            <returns>Requested position</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.right(imbSCI.Core.reporting.zone.textCursorZone)">
            <summary>
            Right position for specified zone.
            </summary>
            <param name="currentZone">Zone to test against</param>
            <returns>Requested position</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.top(imbSCI.Core.reporting.zone.textCursorZone)">
            <summary>
            Top position for specified zone.
            </summary>
            <param name="currentZone">Zone to test against</param>
            <returns>Requested position</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.bottom(imbSCI.Core.reporting.zone.textCursorZone)">
            <summary>
            Bottom position for specified zone.
            </summary>
            <param name="currentZone">Zone to test against</param>
            <returns>Requested position</returns>
        </member>
        <member name="M:imbSCI.Core.reporting.zone.textFormatSetupBase.getHeight(imbSCI.Core.reporting.zone.textCursorZone)">
            <summary>
            Heights the specified current zone.
            </summary>
            <param name="currentZone">The current zone.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupSize.width">
            <summary>
            maksimalna spoljna sirina formata (innerWidth+padding+margin = Windows.width)
            </summary>
        </member>
        <member name="P:imbSCI.Core.reporting.zone.textFormatSetupSize.height">
            <summary>
            maksimalna spoljna visina formata (innerHeight+padding+margin=Windows.Height)
            </summary>
        </member>
        <member name="T:imbSCI.Core.screenOutputControl">
            <summary>
            Centralized output control - in future it will enable multi-user-interface options (like: self-served and/or remote served Web UI)
            </summary>
        </member>
        <member name="P:imbSCI.Core.screenOutputControl.logToConsoleControl">
            <summary>
            The log to console control
            </summary>
        </member>
        <member name="T:imbSCI.Core.style.color.ColorGradient">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorGradient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.color.ColorGradient"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorGradient.#ctor(System.String,System.String,imbSCI.Core.style.color.ColorGradientFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.color.ColorGradient"/> class.
            </summary>
            <param name="HexA">The hexadecimal a.</param>
            <param name="HexB">The hexadecimal b.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorGradient.GetHexColor(System.Double,System.Boolean)">
            <summary>
            Gets the color of the hexadecimal.
            </summary>
            <param name="ratio">The ratio: from 0 to 1</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorGradient.GetHexColorDictionary(System.Int32,System.Boolean)">
            <summary>
            Gets the hexadecimal color dictionary - where Key is color, Double is upper limit for the color segment
            </summary>
            <param name="colorSegments">The color segments.</param>
            <param name="withAlpha">if set to <c>true</c> [with alpha].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.style.color.ColorGradientDictionary">
             <summary>
            
             </summary>
             <seealso cref="!:System.Collections.Generic.Dictionary&lt;System.String, System.Double&gt;" />
        </member>
        <member name="T:imbSCI.Core.style.color.ColorHSVPoint">
            <summary>
            HSV
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorHSVPoint.GetRange(imbSCI.Core.style.color.ColorHSVPoint)">
            <summary>
            Gets the range version --- values are allowed to be negative
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorHSVPoint.GetRangeMultiplied(System.Double)">
            <summary>
            Performs multiplication without <see cref="M:imbSCI.Core.style.color.ColorHSVPoint.DeployValues"/> call
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.style.color.ColorWorks">
            <summary>
            Dictionary with color enum index
            </summary>
        </member>
        <member name="P:imbSCI.Core.style.color.ColorWorks.HumanTextualNameDictionary">
            <summary>
            Auto-initiated dictionary with all Color names vs color enumeration
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorWorks.SliceString(System.String)">
            <summary>
            Slices the specified hexadecimal.
            </summary>
            <param name="hex">The hexadecimal.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.style.color.ColorWorks._select_isHexColorString">
            <summary>
            Regex select HexColorString : ([0-9A-F]{6})
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorWorks.isHexColorString(System.String)">
            <summary>
            Test if input matches ([0-9A-F]{6})
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isHexColorString</returns>
        </member>
        <member name="F:imbSCI.Core.style.color.ColorWorks._select_isSelectColorInText">
            <summary>
            Regex select SelectColorInText : \[(\w*)\]
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorWorks.isSelectColorInText(System.String)">
            <summary>
            Test if input matches \[(\w*)\]
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isSelectColorInText</returns>
        </member>
        <member name="F:imbSCI.Core.style.color.ColorWorks._select_isMatchParameterValuePair">
            <summary>
            Regex select MatchParameterValuePair : ([\w]{1})=([\d]*)
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorWorks.isMatchParameterValuePair(System.String)">
            <summary>
            Test if input matches ([\w]{1})=([\d]*)
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isMatchParameterValuePair</returns>
        </member>
        <member name="F:imbSCI.Core.style.color.ColorWorks._select_isExtractParameters">
            <summary>
            Regex select ExtractParameters : \[([\d\w\=\,\s]*)\]
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorWorks.isExtractParameters(System.String)">
            <summary>
            Test if input matches \[([\d\w\=\,\s]*)\]
            </summary>
            <param name="input">String to test</param>
            <returns>IsMatch against _select_isExtractParameters</returns>
        </member>
        <member name="F:imbSCI.Core.style.color.ColorWorks.defaultColor">
            <summary>
            The default color - color to be returned when no color recognized by <see cref="M:imbSCI.Core.style.color.ColorWorks.GetColor(System.String)"/> or <see cref="M:imbSCI.Core.style.color.ColorWorks.GetColorSafe(System.Object)"/>
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorWorks.GetColorSafe(System.Object)">
            <summary>
            Gets color from unknown object. Supports Color and String, otherwise returns <see cref="F:imbSCI.Core.style.color.ColorWorks.defaultColor"/>
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.color.ColorWorks.GetColor(System.String)">
            <summary>
            Converts HEX code, human name for color or ARGB definition (eg. Color [A=0, R=153, G=153, B=153]), into <see cref="T:System.Drawing.Color"/>
            </summary>
            <param name="hex">The hexadecimal.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.style.color.HSLColor">
            <summary>
            HSL Color
            </summary>
            <remarks>
            Original author: https://richnewman.wordpress.com/about/code-listings-and-diagrams/hslcolor-class/
            </remarks>
        </member>
        <member name="P:imbSCI.Core.style.color.HSLColor.hue">
            <summary>
            The hue - unscaled
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.color.HSLColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.color.HSLColor"/> class.
            </summary>
            <param name="_hue">The hue.</param>
            <param name="_saturation">The saturation.</param>
            <param name="_luminosity">The luminosity.</param>
        </member>
        <member name="T:imbSCI.Core.style.css.cssCollection">
            <summary>
            Represents collection of <see cref="T:imbSCI.Core.style.css.cssEntryDefinition"/>
            </summary>
        </member>
        <member name="T:imbSCI.Core.style.css.cssCollection.cssEntryPolicy">
            <summary>
            Policy on managing entries that already exist
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssCollection.cssEntryPolicy.replace">
            <summary>
            Replace completly existing entry
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssCollection.cssEntryPolicy.setIfNotExisting">
            <summary>
            The set if not existing
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssCollection.cssEntryPolicy.merge">
            <summary>
            Merge with existing entry: adding new attributes and replaces the overlapping attributes
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssCollection.REGEX_ENTRYSELECTOR">
            <summary>
            The regex entryselector: group[1] is name, group[2] contains the attribute pairs
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssCollection.FORMAT_ENTRYFORMAT">
            <summary>
            The format entryformat
            </summary>
        </member>
        <member name="P:imbSCI.Core.style.css.cssCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:imbSCI.Core.style.css.cssEntryDefinition"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Core.style.css.cssEntryDefinition"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.Get(System.String)">
            <summary>
            Gets css entry definition for item with <c>name</c>. Name may have class or id prefix: . or #. If it has multiple names, separated by comma: it will select the first
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.Set(imbSCI.Core.style.css.cssEntryDefinition,imbSCI.Core.style.css.cssCollection.cssEntryPolicy)">
            <summary>
            Sets the specified entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.Set(System.String,System.String,System.String)">
            <summary>
            Sets the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.Load(System.String,imbSCI.Core.style.css.cssCollection.cssEntryPolicy)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="policy">The policy.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.FromString(System.String,imbSCI.Core.style.css.cssCollection.cssEntryPolicy)">
            <summary>
            Phrases CSS string source code
            </summary>
            <param name="cssCode">The CSS code.</param>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.ToString(imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat)">
            <summary>
            To the string.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.Save(System.String)">
            <summary>
            Saves the css collection to specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssCollection.Save(imbSCI.Core.files.folders.folderNode,System.String,System.String)">
            <summary>
            Saves the specified folder.
            </summary>
            <param name="folder">The folder.</param>
            <param name="filename">The filename.</param>
            <param name="description">The description.</param>
        </member>
        <member name="P:imbSCI.Core.style.css.cssCollection.items">
            <summary>
            Collection of preset definitions
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:imbSCI.Core.style.css.cssEntryDefinition">
            <summary>
            Dictionary maintaining style inline data/parameters - used by SVG, mxGraph, HTML and other XML based outputs
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:imbSCI.Core.style.css.cssEntryDefinition.Item(System.String)">
            <summary>
            Universal get and set indexer
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.Set(System.String,System.String)">
            <summary>
            Sets the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.Append(System.String,System.String,System.String)">
            <summary>
            Appends value at specified key.(or adds new entry)
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="separator">The separator - added between existing and new content.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.Get(System.String)">
            <summary>
            Universal get
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.style.css.cssEntryDefinition.mainFormat">
            <summary>
            Format set as default for this dictionary
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="T:imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat">
            <summary>
            In-line string format
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat.htmlStyleFormat">
            <summary>
            The HTML style format: [property]:[value];
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat.cssFileFormat">
            <summary>
            The CSS file format: block with entry name and \{ \} wrapper
            </summary>
        </member>
        <member name="F:imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat.htmlStyleFormatInline">
            <summary>
            The HTML style format inline: only value for style attribute and without newlines
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.GetPairRegex(imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat)">
            <summary>
            Gets the pair regex.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.GetPairFormat(imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat)">
            <summary>
            Gets the pair format.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.#ctor">
            <summary>
            Dictionary for parameters given as inline string
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.#ctor(imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.css.cssEntryDefinition"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.css.cssEntryDefinition" /> class.
            </summary>
            <param name="cssName">CSS entry name</param>
            <param name="cssCode">The CSS code, block within { } .</param>
        </member>
        <member name="F:imbSCI.Core.style.css.cssEntryDefinition.REGEX_ENTRYSELECTOR">
            <summary>
            The regex entryselector: group[1] is name, group[2] contains the attribute pairs
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.fromString(System.String,imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat)">
            <summary>
            Populates parameters from inline string values, given in <see cref="T:imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat"/>
            </summary>
            <param name="input">The input.</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:imbSCI.Core.style.css.cssEntryDefinition.ToString(imbSCI.Core.style.css.cssEntryDefinition.syntaxFormat)">
            <summary>
            Renders entry definition to string format
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.style.css.cssEntryDefinition.parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:imbSCI.Core.style.NamespaceDoc">
            <summary>
            Color gradients and manipulation, color format conversion (from hex to <see cref="T:System.Drawing.Color"/> and vice versa), HSL/HSV transformation... CSS style file format parsing, data annotation presets
            </summary>
            <remarks>
            It will host all color manipulation and general style-theme management used for different types of reporting
            </remarks>
        </member>
        <member name="T:imbSCI.Core.style.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.style.preset.NamespaceDoc">
            <summary>
            <para>
            Non-dynamic, property data annotation, property name-based preset system.
            </para>
            </summary>
            <remarks>
            <para>
            Classes in this namespace are used to provide preset functionality in property data annotations, used for documentation construction and data reporting
            </para>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.style.preset.propertyAnnotationPreset">
            <summary>
            Preset with static formatting / styling column/property data annotation definitions
            </summary>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPreset.name">
            <summary>
            Data annotation preset name
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPreset.description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.Save(imbSCI.Core.files.folders.folderNode,System.String)">
            <summary>
            Saves the specified folder.
            </summary>
            <param name="folder">The folder.</param>
            <param name="filenameOverride">The filename override.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.Load(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads preset from the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <param name="log">The log.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPreset.supportedEnumTypes">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.#ctor">
            <summary>
            Constructor required for XML Serialization
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPreset"/>, and runs <see cref="M:imbSCI.Core.style.preset.propertyAnnotationPreset.SetFrom(System.Type,System.Boolean)"/> with specified type
            </summary>
            <param name="type">Type to learn data annotations from</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPreset"/>, and runs <see cref="M:imbSCI.Core.style.preset.propertyAnnotationPreset.SetFrom(System.Data.DataTable,System.Boolean)"/> with specified table.
            </summary>
            <param name="table">Table to learn data annotations from</param>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPreset.items">
            <summary>
            Items collection - for serialization
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPreset.defaultItem">
            <summary>
            DataAnnotation to be deployed for property or data column that is not expliclitly defined by the preset
            </summary>
            <value>
            The default item.
            </value>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.DeployTo(System.Data.DataTable,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Deploys contained <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItem"/> to specified <c>table</c>
            </summary>
            <param name="table">The table.</param>
            <param name="skipExisting">if set to <c>true</c> it will not overwrite formatting properties that were already defined.</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.SetFrom(System.Data.DataTable,System.Boolean)">
            <summary>
            Sets or updates the preset using data annotations from <c>table</c>
            </summary>
            <param name="table">The table.</param>
            <param name="skipExistingAnnotations">if set to <c>true</c>, it will not update already defined data annotation rule of a property.</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.SetFrom(System.Type,System.Boolean)">
            <summary>
            Sets or updates the preset using data annotations from <c>type</c>
            </summary>
            <param name="type">Type to read data annotation attributes from</param>
            <param name="skipExistingAnnotations">if set to <c>true</c>, it will not update already defined data annotation rule of a property.</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.SetFrom(System.Data.DataColumn,System.Boolean)">
            <summary>
            Sets or creates new preset item, with data annotations taken from the specified column
            </summary>
            <param name="column">The column.</param>
            <param name="skipExistingAnnotations">if set to <c>true</c> [skip existing annotations].</param>
            <returns>Created or updated preset item</returns>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.SetFrom(imbSCI.Core.data.settingsPropertyEntry,System.Boolean)">
            <summary>
            Sets or creates new preset item, with data annotations taken from the specified column
            </summary>
            <param name="property">The property entry to learn from.</param>
            <param name="skipExistingAnnotations">if set to <c>true</c> [skip existing annotations].</param>
            <returns>Created or updated preset item</returns>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.AddAnnotationPresetItem(System.String,System.String,System.String)">
            <summary>
            Manual creation of new preset item definition
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="displayName">The display name for the property.</param>
            <param name="description">The description, attached to the property</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.GetAnnotationPresetItem(System.String)">
            <summary>
            Gets the annotation preset item for specified <c>id</c>.
            </summary>
            <remarks>
            If no direct match is found, the method will try with lower case and no space version, and finally it will return <see cref="P:imbSCI.Core.style.preset.propertyAnnotationPreset.defaultItem"/> if no match found
            </remarks>
            <param name="id">The identifier.</param>
            <returns>Preset with matched id, or default: <see cref="P:imbSCI.Core.style.preset.propertyAnnotationPreset.defaultItem"/></returns>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPreset.GetAnnotationPresetItem(System.Data.DataColumn)">
            <summary>
            Gets the annotation preset item for specified <c>column</c>.
            </summary>
            <remarks>
            If no direct match is found for column name and caption, the method will try with lower case and no space version, and finally it will return <see cref="P:imbSCI.Core.style.preset.propertyAnnotationPreset.defaultItem"/> if no match found
            </remarks>
            <param name="id">The identifier.</param>
            <returns>Preset with matched id, or default: <see cref="P:imbSCI.Core.style.preset.propertyAnnotationPreset.defaultItem"/></returns>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPreset._index_lock">
            <summary>
            Lock object - used for tread-safe index lazy initialization
            </summary>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPreset.index">
            <summary>
            Lazy initialized index
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="T:imbSCI.Core.style.preset.propertyAnnotationPresetItem">
            <summary>
            Wrapped serializable indexed collection item
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItem"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.#ctor(System.Data.DataColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItem"/>, with data annotations copied from the column
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItem"/>, with data annotations copied from the property
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.SetFrom(System.Data.DataColumn,System.Boolean)">
            <summary>
            Sets data annotation from the column
            </summary>
            <param name="column">The column.</param>
            <param name="skipExisting">if set to <c>true</c> [skip existing].</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.SetFrom(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Sets data annotation from the column
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.SetFrom(imbSCI.Core.data.settingsPropertyEntry,System.Boolean)">
            <summary>
            Sets data annotation from the column
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.BuildPCE(System.Data.DataColumn,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Builds a <see cref="T:imbSCI.Core.data.settingsPropertyEntry"/> from contained data
            </summary>
            <param name="column">The column.</param>
            <param name="skipExisting">if set to <c>true</c> [skip existing].</param>
            <param name="log">The log.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.DeployTo(System.Data.DataColumn,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Deploys contained definitions onto DataColumn
            </summary>
            <param name="column">The column.</param>
            <param name="skipExisting">if set to <c>true</c> [skip existing].</param>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPresetItem.definitions">
            <summary>
            Data annotation definitions,
            </summary>
            <value>
            The definitions.
            </value>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItem"/> class.
            </summary>
            <param name="_name">The name.</param>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPresetItem.name">
            <summary>
            Name of property or column, that should receive data annotation preset
            </summary>
        </member>
        <member name="T:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions">
            <summary>
            Collection with preset item definitions
            </summary>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions.keyValuePairs">
            <summary>
            Gets or sets the key value pairs.
            </summary>
            <value>
            The key value pairs.
            </value>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions.Add(System.Object,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions.op_Implicit(imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions)~System.Data.PropertyCollection">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions"/> to <see cref="T:System.Data.PropertyCollection"/>.
            </summary>
            <param name="definitions">The definitions.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions.op_Implicit(System.Data.PropertyCollection)~imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Data.PropertyCollection"/> to <see cref="T:imbSCI.Core.style.preset.propertyAnnotationPresetItemDefinitions"/>.
            </summary>
            <param name="definitions">The definitions.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:imbSCI.Core.style.preset.propertyAnnotationPresetItemTuple">
            <summary>
            Preset item tuple
            </summary>
        </member>
        <member name="P:imbSCI.Core.style.preset.propertyAnnotationPresetItemTuple.resolvedKey">
            <summary> Key in proper enum type</summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.ISyntaxDeclarationElement">
            <summary>
            Declaration element - any
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclaration">
            <summary>
            Deklaracija jednog bloka
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclaration.role">
            <summary>
            uloga koju ima ovaj blok
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclaration.lines">
            <summary>
            lines defined inside block
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclaration.render">
            <summary>
            Režim renderovanja
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclarationCollection">
            <summary>
            Collection of block declaration
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclarationCollection.addNewBlock(System.String[])">
            <summary>
            Creates new block inside collection - role: supported -- adds aliases
            </summary>
            <param name="__alias"></param>
            <returns>Reference to newly created block declaration</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclarationCollection.addNewBlockWithAlias(System.String)">
            <summary>
            Declares new block for "supported" role and assignes it with an array of alias names
            </summary>
            <param name="__alias">Alias names separated by |. Like> hit|grid|circle</param>
            <returns>Reference to newly created block declaration</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockDeclarationCollection.addNewBlock(System.String,imbSCI.Core.syntax.codeSyntax.syntaxBlockRenderMode)">
            <summary>
            Instancira nov permanentni blok
            </summary>
            <param name="__name">Ime bloka</param>
            <param name="__render">Vid prikaza</param>
            <returns>Reference to newly created block declaration</returns>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclaration">
            <summary>
            Declaration of one parameter, instruction, comment, empty line
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclaration.className">
            <summary>
            name of lineclass declaration
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclaration.tokens">
            <summary>
            deklaracija tokena (parametara)
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclaration.render">
            <summary>
            Type of render template
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclarationCollection">
            <summary>
            Collection of block line declarations. Used by> block, groups, section..
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclarationCollection.addNewLine">
            <summary>
            Creates new line - that is empty
            </summary>
            <returns>Reference to newly created line</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclarationCollection.addNewLine(System.String,System.String)">
            <summary>
            Creates new special line -- for custom formatting
            </summary>
            <param name="__name">Value placeholder name</param>
            <param name="__customFormat">Format/Template for this line</param>
            <returns>Reference to newly created line</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclarationCollection.addNewLine(System.String,System.String,System.String)">
            <summary>
            Explicit typed parameter line declaration: name:typename=format
            </summary>
            <param name="__name">Parameter name</param>
            <param name="__typename">Type name</param>
            <param name="__valueFormat">Value export format</param>
            <returns>Reference to newly created line</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclarationCollection.addNewLine(System.String)">
            <summary>
            Inline parameter declaration> cs_y0:Decimal = #.00000;
            </summary>
            <param name="__name">cs_y0:Decimal = #.00000;</param>
            <returns>Reference to newly created line</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineDeclarationCollection.addNewLines(System.String)">
            <summary>
            Processes string with multiple lines
            </summary>
            <param name="__lines">Multi-line string input - it will break it and process line by line</param>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineType">
            <summary>
            Type of blockline
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineType.normal">
            <summary>
            Primenjuje standardni template
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineType.comment">
            <summary>
            Primenjuje comment template
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineType.label">
            <summary>
            Predstalja naslovnu liniju
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineType.custom">
            <summary>
            Predstavlja custom template liniju
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockLineType.emptyLine">
            <summary>
            Prestavlja razmak
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxBlockRenderMode">
            <summary>
            Mode for block rendering
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockRenderMode.complete">
            <summary>
            Kompletan prikaz bloka
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockRenderMode.inner">
            <summary>
            Direktan prikaz samo unutrasnjosti bloka
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockRole.permanent">
            <summary>
            Ako je permanent onda se prikazuje svaki put - automatski se popunjava
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxBlockRole.supported">
            <summary>
            Deklarise ga kao blok koji se moze pojaviti ili ne
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration">
            <summary>
            Deserijalizovan opis sintakse: header, templates,
            </summary>
            <remarks>
            Tokom primene softvera (production) koristi se samo za čitanje već definisanih deklaracija.
            Tokom razvoja softvera (development) koristi se za in-code pravljenje prototipova
            </remarks>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.header">
            <summary>
            syntax meta data header
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.types">
            <summary>
            List of special types
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.structure">
            <summary>
            rendering structure
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.doSkipUndeclaredBlocks">
            <summary>
            if TRUE: during source code processing it will ignore undeclared blocks
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.doSkipUndeclaredLines">
            <summary>
            if TRUE: it will ignore undeclared property lines / instructions
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.fileTemplate">
            <summary>
            struktura kompletnog fajla
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.blockTemplate">
            <summary>
            struktura jednog bloka
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.lineDefaultTemplate">
            <summary>
            podrazumevan template za liniju
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.commentDefaultTemplate">
            <summary>
            podrazumevan template za komentar
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.blocks">
            <summary>
            syntax blocks declarations
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.blockClass">
            <summary>
            class for block selection
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclaration.lineClasses">
            <summary>
            Line classes declaration
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationElementCollection`1.find(System.String)">
            <summary>
            Find declaration by name or by alias
            </summary>
            <param name="nameOrAlias"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationItemBase">
            <summary>
            osnovna klasa - zajednicka svim syntaxDeclaration elementima
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationItemBase.name">
            <summary>
            ime sintaksnog elementa
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationItemBase.isNameOrAlias(System.String)">
            <summary>
            Tests if this element matches query. Testing: 1. name, 2. alias list, and then if alias list contains willcard *
            </summary>
            <param name="nameOrAlias"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationItemBase.setAlias(System.String)">
            <summary>
            set alias using one string definition. i.e.> name1|alias1|alias2|alias3|*
            </summary>
            <remarks>
            Using * will create willcard> this element will become default class for all non mached elements
            </remarks>
            <param name="__alias"></param>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationItemBase.setAlias(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets name and aliases for the element
            </summary>
            <param name="__alias"></param>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationItemBase.aliasList">
            <summary>
            List of alias names can be used. (does not contain name). Don's use this for alias check! This property is public only because of XML serialization.
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationStructureType">
            <summary>
            Vrsta strukture sindakse
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationStructureType.lines">
            <summary>
            Nakon naslova> niz linija sa param/parovima, nema strukture
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationStructureType.linesWithGroups">
            <summary>
            Niz linija koji moze sadrzati grupisane pod linije
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationStructureType.blocks">
            <summary>
            Sadrzaj je grupisan u blokove - kao JSON, ali otvorenog tipa
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationStructureType.table">
            <summary>
            Sadrzaj je dat u vidu CSV / tekstualnog prikaza tabele
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationStructureType.codeHierarchy">
            <summary>
            Sadrzaj je strogo hijearhijski dat - slicno> JSON, XML ili source code formatu
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxDeclarationStructureType.text">
            <summary>
            Sadrzaj je pre svega testualnog tipa - strukturiran u pasose i liste radi lakseg citanja.
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration">
            <summary>
            Syntax meta description
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.getFilename">
            <summary>
            creating filename out of vendor name, versionID and syntaxDeclaration extension
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Header constructor - with the most important parameters
            </summary>
            <param name="versionName"></param>
            <param name="__vendor"></param>
            <param name="__description"></param>
            <param name="__fileExtension"></param>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.structure">
            <summary>
            Type of syntax structure
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.name">
            <summary>
            Display name for this syntax
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.vendor">
            <summary>
            Naziv proizvodjaca sintakse
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.versionId">
            <summary>
            identifikacija konkretne implementacije
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.description">
            <summary>
            Description of this syntax
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.fileExtension">
            <summary>
            file extension or list of file extensions
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxHeaderDeclaration.encoding">
            <summary>
            Encoding to be applied
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxLineClassDeclaration">
            <summary>
            Declaration of a line class.
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxLineClassDeclaration.nameToken">
            <summary>
            Index of token with name
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxLineClassDeclaration.getRegex">
            <summary>
            Gets REGEX for this line class
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxLineClassDeclaration.lineType">
            <summary>
            type of line
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxLineClassDeclaration.template">
            <summary>
            template for output genetarion. Supports> ~nl for system specific new line sub string
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxLineClassDeclaration.tokenQuery">
            <summary>
            REGEX query that selects tokens
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.codeSyntax.syntaxLineClassDeclarationCollection.getClass(System.String)">
            <summary>
            Returns lineclass declaration using classname. If failed, returns first class in the collection.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxRenderUnit.elementName">
            <summary>
            Name of block or line to be rendered
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxRenderUnit.mode">
            <summary>
            Way to render element
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxTokenDeclaration">
            <summary>
            Deklaracija jednog tokena
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxTokenDeclaration.type">
            <summary>
            Vrsta tokena
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxTokenDeclaration.typeName">
            <summary>
            Property type name
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxTokenDeclaration.valueFormat">
            <summary>
            Formatiranje vrednosti
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxTokenDeclarationCollection">
            <summary>
            Kolekcija tokena u jednoj liniji / komandi itd
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.codeSyntax.syntaxTokenType">
            <summary>
            Type of token content
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxTokenType.empty">
            <summary>
            Prazan token
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxTokenType.unknown">
            <summary>
            Nepoznata vrsta tokena
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxTokenType.numeric">
            <summary>
            Clean numeric value like> 5  5.43   -4.76
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxTokenType.alfabet">
            <summary>
            Clean alfabet label like> e-mac  tool    Default
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxTokenType.keyNumberic">
            <summary>
            Numeric starting with key letter: b40 X500  X-25.34 ...
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.codeSyntax.syntaxTokenType.alfanumeric">
            <summary>
            Mixed numeric and alphabet
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxTypeName.name">
            <summary>
            short type name
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.codeSyntax.syntaxTypeName.fullname">
            <summary>
            full path type name
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.code">
            <summary>
            Klasa koja sadrži apstraktnu instancu strukturiranog koda
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.code.code.#ctor(imbSCI.Core.syntax.codeSyntax.syntaxDeclaration)">
            <summary>
            Code DOM instance - using supplied declaration
            </summary>
            <param name="__syntax"></param>
        </member>
        <member name="P:imbSCI.Core.syntax.code.code.flatBlocks">
            <summary>
            kolekcija blokova koji su u flat prikazu
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.code.unresolvedElements">
            <summary>
            Code source elements that were not resolved yet
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.code.code.build(System.String)">
            <summary>
            Building DOM from source code string
            </summary>
            <param name="__source">Source code string</param>
        </member>
        <member name="P:imbSCI.Core.syntax.code.code.declaration">
            <summary>
            Original syntax declaration
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBlock.declaration">
            internal syntaxBlockDeclaration _syntax; // = "";
             <summary>
             Referenca prema deklaraciji sintakse
             </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeBuilder">
            <summary>
            Klasa koja izgradjuje code DOM objekat, tumaci source code i renderuje source code
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBuilder.syntax">
            <summary>
            Syntax declaration
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBuilder.regexBlock">
            <summary>
            regex query to select all blocks from the source
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBuilder.regexLine">
            <summary>
            regex query to select line content
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBuilder.regexProperty">
            <summary>
            regex query to select properties in line
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBuilder.rootedBlocks">
            <summary>
            references to the blocks that are obligatory defined and that are rendered as document it self (no title, no structure - properties are directly shown)
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBuilder.obligatoryBlocks">
            <summary>
            collection of blocks that are allways defined in the file
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeBuilder.declaredBlocks">
            <summary>
            collection of declared but not automatically instanced blocks
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeBuilderTools">
            <summary>
            Tools used by codeBuilder class
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeElementBase">
            <summary>
            Osnovna klasa za sve elemente code DOM-a date instance
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeElementBase.baseSetup(System.String,System.String,imbSCI.Core.syntax.codeSyntax.ISyntaxDeclarationElement)">
            <summary>
            Sets name, source and declarationBase --- sets only non-empty/null parameters
            </summary>
            <param name="__name"></param>
            <param name="__source"></param>
            <param name="__declarationBase"></param>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.declarationBase">
            <summary>
            Ref to syntax declaration base
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.parent">
            <summary>
            Ref to code element having this element as parent
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.index">
            <summary>
            Index at parent collection --- returns -1 if no parent, or parent collection not ready
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.root">
            <summary>
            ref to root code element - the one without parent
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.name">
            <summary>
            name or key of the code element (if has any)
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.source">
            <summary>
            Source code loaded from the file - or - prepared for save
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.objectValue">
            <summary>
            Value or object attached to this code element
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementBase.children">
            <summary>
            sub blocks and other code elements
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeElementCollection">
            <summary>
            Kolekcija elemenata koda - može da sadrži propertije ili pod blokove
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementCollection.parent">
            <summary>
            Ref to object containing this collection - parent
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementCollection.items">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementCollection.current">
            <summary>
            Pointer to the current element
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeElementCollection._register(imbSCI.Core.syntax.code.ICodeElement)">
            <summary>
            Adds element in the collectiona and sets it as current element
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeElementCollection.IndexOf(imbSCI.Core.syntax.code.ICodeElement)">
            <summary>
            Index of provided element
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeElementCollection.Add(imbSCI.Core.syntax.code.ICodeElement)">
             <summary>
            
             </summary>
             <param name="item"></param>
             <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeElementCollection.findElement(System.String)">
            <summary>
            Pretrazuje i Alias listu
            </summary>
            <param name="nameOrAlias"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementCollection.isReady">
            <summary>
            Returns if Ready: items collection is declared, parent object defined
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementCollection.isEmpty">
            <summary>
            Returns if Empty : TRUE if not Ready or if collection containes only one child
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeElementCollection.isOneChild">
            <summary>
            Returns if OneChild : TRUE if collection containes only one child, FALSE if not ready or counts more or 0
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeLine">
            <summary>
            Izvorna i interpretirana linija koda
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLine.deployDeclaration(imbSCI.Core.syntax.codeSyntax.syntaxDeclaration)">
            <summary>
            Populates content using declaration data and syntax
            </summary>
            <param name="syntax"></param>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeLine.declaration">
            <summary>
            ref to token syntax declaration
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLine.render(imbSCI.Core.syntax.codeSyntax.syntaxDeclaration)">
            <summary>
            Generates source code string for this line
            </summary>
            <param name="syntax"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLineExtensions.tokenizeCodeLine(System.String,System.Boolean)">
            <summary>
            Tokenizuje ulazni source code - koristi univerzalnu tokenizaciju
            </summary>
            <param name="code">Izvodni kod koji obradjuje</param>
            <param name="removeEmptyTokens">Da li da izbaci prazne tokene?</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeLineToken">
            <summary>
            Element linije koda
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeLineToken.tokenType">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeLineToken.declaration">
            <summary>
            ref to token syntax declaration
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeLineTokenCollection">
            <summary>
            Jedna linija koda --- ABORTED
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeLineTokenCollection.originalSourceCode">
            <summary>
            izvorni kod kojim je napravljena ova kolekcija
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeLineTokenCollection.firstToken">
            <summary>
            Prvi token u nizu
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLineTokenCollection.ToString">
            <summary>
            Vraca code
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLineTokenCollection.#ctor(System.String)">
            <summary>
            Token kolekcija na osnovu izvodnog
            </summary>
            <param name="__sourceCode"></param>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLineTokenCollection.addParam(imbSCI.Core.syntax.code.codeLineToken,System.Int32)">
            <summary>
            Ubacuje novi parametar u niz, i podesava mu index vrednost
            </summary>
            <param name="newPar"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLineTokenCollection.getParamByIndex(System.Int32)">
            <summary>
            Vraca parametar po indeksu
            </summary>
            <param name="ind"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLineTokenCollection.getParamByKey(System.String)">
            <summary>
            Vraca parametar prema slovnom kljucu
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.code.codeLineTokenCollection.getParamByKeyOrIndex(System.String)">
            <summary>
            Pokusava prvo preko kljuca a onda i preko indeksa
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeLineTokenCollection.isModified">
            <summary>
            Proverava da li se razlikuje izvorni source code od koda koji generise sa trenutnim podesavanjima
            </summary>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.syntax.code.codeLineTokenCollection.keyToIndexMap">
            <summary>
            Mapa koja povezuje slovni kljuc sa rednim mestom u listi
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeSourceElement">
            <summary>
            Gradivni element koda
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElement.subElements">
            <summary>
            Dictionary with sub elements - contained in this source
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElement.tokens">
            <summary>
            Lista tokena
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElement.type">
            <summary>
            type of code source element
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElement.name">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElement.declaration">
            <summary>
            Syntax declaration for this element
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElement.lineClass">
            <summary>
            Detected line class
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElement.source">
            <summary>
            Content of the source element
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.code.codeSourceElementCollection">
            <summary>
            sadrzi elemente source codea
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElementCollection.codeElements">
            <summary>
            Referenca prema elementima koda - pravilan redosled
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElementCollection.items">
            <summary>
            all items - where blocks are called by {} template willcard
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.code.codeSourceElementCollection.blocks">
            <summary>
            dict. name vs inner source code
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.converter.core.conversionRule.ProcessLine(System.String)">
            <summary>
            Processes the line.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.converter.javaToCSharp">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Core.syntax.converter.core.conversionRuleSet" />
        </member>
        <member name="M:imbSCI.Core.syntax.data.commonNCDataSetBase.processLine(System.String,System.Int32)">
            <summary>
            Obradjuje jednu liniju
            </summary>
            <param name="_line"></param>
            <param name="i"> </param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.data.core.configEntry">
            <summary>
            Opis jedne konfiguracione varijable - ne sadrzi vrednost
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.configEntry.name">
            <summary>
            Short flag name of configuration entry
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.configEntry.address">
            <summary>
            Int32 adresa u SYNCHRO, VT ili TECO registru
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.configEntry.description">
            <summary>
            Opis varijable
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.configEntry.flags">
            <summary>
            Primenjene oznake
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.core.inlineParams.#ctor(System.String,System.Int32)">
            <summary>
            Od linije sa parametrima pravi kolekciju
            </summary>
            <param name="__paramline"></param>
            <param name="__minimumParams"></param>
        </member>
        <member name="M:imbSCI.Core.syntax.data.core.inlineParams.getParamValue(System.String,System.String)">
            <summary>
            Vraca vrednost parametra. Ako ne nadje pod tim imenom pokusava ToUpper i ToLower varijante. Ako ne uspe vraca notFound vrednost
            </summary>
            <param name="paramName">Ime parametra koji se trazi. Automatski ce uraditi trim.</param>
            <param name="_notFound">Vrednost koju treba da vrati ako nije nadjen</param>
            <returns>Trimovana vrednost parametra</returns>
        </member>
        <member name="T:imbSCI.Core.syntax.data.core.line">
            <summary>
            Objekat sa linijom koda koja zna gde se nalazi
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.line.number">
            <summary>
            Broj linije na kojoj je pronadjena
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.line.content">
            <summary>
            Sadrzaj linije
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.data.core.paramNestedPairs">
            <summary>
            Nestovana grupa parametara
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.paramNestedPairs.groupName">
            <summary>
            naziv grupe parametara
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.paramPair.isComment">
            <summary>
            Da li je u pitanju komentar
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.paramPair.name">
            <summary>
            ime parametra
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.paramPair.value">
            <summary>
            vrednost parametra
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.core.paramPair.config">
            <summary>
            Config meta definicija
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.data.core.paramPairs">
            <summary>
            Skup parametara
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.core.paramPairs.getParamValue(System.String,System.String)">
            <summary>
            Vraca vrednost parametra. Ako ne nadje pod tim imenom pokusava ToUpper i ToLower varijante. Ako ne uspe vraca notFound vrednost
            </summary>
            <param name="paramName">Ime parametra koji se trazi. Automatski ce uraditi trim.</param>
            <param name="_notFound">Vrednost koju treba da vrati ako nije nadjen</param>
            <returns>Trimovana vrednost parametra</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.data.core.paramPairs.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:imbSCI.Core.syntax.data.files.base.fileDataSetBase">
            <summary>
            Polazna klasa za sve objekte koji su nastali citanjem fajlova
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.base.fileDataSetBase.path">
            <summary>
            source path
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.base.fileDataSetBase._checkPath(System.String)">
            <summary>
            Proverava da li je prosledjena putanja
            </summary>
            <param name="_path"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.base.IAceDataFile.path">
            <summary>
            source path
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.base.IAceDataFile.OnPropertyChanged(System.String)">
            <summary>
            Kreira event koji obaveštava da je promenjen neki parametar
            </summary>
            <remarks>
            Neće biti kreiran event ako nije spremna aplikacija: imbSettingsManager.current.isReady
            </remarks>
            <param name="name"></param>
        </member>
        <member name="T:imbSCI.Core.syntax.data.files.base.textDataSetBase">
            <summary>
            Polazna klasa za sve fajlove koji se sastoje od linija teksta
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.base.textDataSetBase.lines">
            <summary>
            sve ucitane linije
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.base.textDataSetBase.save(System.String)">
            <summary>
            Poziva beforeSave();
            </summary>
            <param name="_path"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.base.textDataSetBase.load(System.String)">
            <summary>
            Ucitavanje fajla
            </summary>
            <param name="_path"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.data.files.fileTargetList">
            <summary>
            List of files matching the target list
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.fileTargetList.runTask(imbSCI.Core.syntax.data.files.fileTargetListTask,imbSCI.Core.syntax.data.files.fileTargetListSettings,System.String)">
            <summary>
            Executes tasks on the list according to given fileTargetListTask and fileTargetListSettings
            </summary>
            <param name="task"></param>
            <param name="settings"></param>
            <param name="jobName">Name of related Job - used for reporting/diagnostic purposes only</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.fileTargetList.takeOneSample(imbSCI.Core.syntax.data.files.fileTargetSampleMode)">
            <summary>
            Vraca jedan fajl na osnocu moda
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetList.lastTake">
            <summary>
            Fajl path koji je poslednji put vratio
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetList.targetList">
            <summary>
            Ciljana lista fajlova
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.fileTargetList.scanFiles(imbSCI.Core.syntax.data.files.fileTargetListSettings,System.Boolean)">
            <summary>
            Skenira putanju - prema podesavanjima
            </summary>
            <param name="settings"></param>
            <param name="doClearExistingInList">Da li prazni listu fajlova koju trenutno ima u memoriji</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.data.files.fileTargetListSettings">
            <summary>
            Settings on targeting and preprocessing of matched files that are subject of the Ace Application
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetListSettings.path">
            <summary>
            Path to directory with NC files. Subdirectories are included if doIncludeSubFolders is True
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetListSettings.outputPath">
            <summary>
            Path where to save processed NC files
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetListSettings.outputUnmatchPath">
            <summary>
            Path for unmatched .NC files - the ones not matching line selection criterias
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetListSettings.doIncludeSubFolders">
            <summary>
            If True it will search all subfolders inside path
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetListSettings.fileExtension">
            <summary>
            NC files extension - to be searched for
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.fileTargetListSettings.backup">
            <summary>
            Policy for selected files backup
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.data.files.fileTargetListTask">
            <summary>
            Komande koje moze da izvrsi fileTargetList
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.data.files.fileTargetListTask.scan">
            <summary>
            skenira fajlove
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.data.files.fileTargetListTask.backup">
            <summary>
            skenira i pokrece backup
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.data.files.fileTargetListTask.showList">
            <summary>
            skenira i vraca listu pronadjenih v
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.data.files.fileTargetListTask.saveList">
            <summary>
            snima listu
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.data.files.fileTargetListTask.done">
            <summary>
            zatvara menu
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.data.files.fileTargetSampleMode">
            <summary>
            Nacin na koji uzima test fajl za test run
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.data.files.fileTargetSampleMode.firstAndNextFile">
            <summary>
            Pri test run-u uzima prvi fajl, pri svakom sledecem run-u uzima sledeci sa liste
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.data.files.fileTargetSampleMode.randomFile">
            <summary>
            Pri svakom test runu odabira fajl random patternom
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.data.files.standardParamDataSet">
            <summary>
            Podrzava ucitavanje> bat, e-mac.mch, t-punch.cfg
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.textDataSetWithComments`1.processLines">
            <summary>
            Obradjuje sve linije
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.data.files.textDataSetWithComments`1.processLine(System.String,System.Int32)">
            <summary>
            Obradjuje jednu liniju
            </summary>
            <param name="_line"></param>
            <param name="i"> </param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.textDataSetWithComments`1.headerComments">
            <summary>
            Skup komentara na pocetku fajla
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.files.textDataSetWithComments`1.loadedParams">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.nestedParamDataSet.groups">
            <summary>
            lista pronadjenih grupa nestovanih parametara
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.data.nestedParamDataSet.currentGroup">
            <summary>
            trenutna grupa
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.data.nestedParamDataSet.processLines">
            <summary>
            Obradjuje sve linije
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.data.nestedParamDataSet.processLine(System.String,System.Int32)">
            <summary>
            Obradjuje jednu liniju
            </summary>
            <param name="_line"></param>
            <param name="i"> </param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.generator.ClassGenerationExtensions.GetUsingForProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.List{System.String})">
            <summary>
            Gets the using for properties.
            </summary>
            <param name="properties">The properties.</param>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.generator.ClassGenerationExtensions.GetUsingForFlags(imbSCI.Core.reporting.render.builders.PropertyAppendFlags,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the using for flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="addBasic">if set to <c>true</c> [add basic].</param>
            <param name="output">The output.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.NamespaceDoc">
            <summary>
            (OBSOLETE - will be removed soon)
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:imbSCI.Core.syntax.NamespaceGroupDoc">
            <inheritdoc/>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.line.ncLine">
            <summary>
            Jedna NC linija koja zna gde je, koji su joj parametri i kako treba da izgleda
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLine.collection">
            <summary>
            referenca prema kolekciji u kojoj se nalazi linija
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLine.index">
            <summary>
            pozicija u kolekciji
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLine.flag">
            <summary>
            Line flag
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLine.command">
            <summary>
            Naziv komande
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLine.#ctor(System.String,imbSCI.Core.syntax.nc.line.ncLineCollection)">
            <summary>
            Pravi NC liniju iz linije koda
            </summary>
            <param name="codeLine"></param>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.line.ncLineCollection">
            <summary>
            Kolekcija ncLinija
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.writeNcLineDescription(imbSCI.Core.syntax.nc.line.ncLine,System.Boolean,System.Boolean)">
            <summary>
            Vraca liniju koda sa kontekstualnim informacijama: broj linije, sta je bilo pre toga, sta je bilo posle
            </summary>
            <param name="line"></param>
            <param name="includeLineBeforeAndAfter"></param>
            <param name="includePrefixAndSufixDots"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.getRelativeLine(imbSCI.Core.syntax.nc.line.ncLine,System.Int32)">
            <summary>
            Pronalazi liniju koja je na poziciji indexStep u odnosu na relativeTo liniju
            </summary>
            <param name="relativeTo">Linija od koje pocinje pretragu</param>
            <param name="indexStep">1 = next line, -1 = prev line, -5 = 5 lines before, 5 = 5 lines after, 0 = this line</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.getLines(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Vraca liz ninija - nije vazno da li je fromIndex veci ili manji - automatski ce ih poredjati
            </summary>
            <param name="fromIndex"></param>
            <param name="toIndex"></param>
            <param name="includingLast"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.getLineAt(System.Int32,System.Boolean)">
            <summary>
            Vraca liniju na indexu - vraca null ako je kolekcija prazna, ili ako je indeks van opsega a returnLast=False
            </summary>
            <param name="index"></param>
            <param name="returnLast">Ako je TRUE onda vraca poslednji clan kolekcija u pravcu gde je indeks izasao iz opsega</param>
            <returns>Null ili ncLine na trazenoj liniji</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.getSelection(imbSCI.Core.syntax.nc.line.ncLineCriteria)">
            <summary>
            Pravi kolekciju selektovanih linija na osnovu prosledjenog kriterijuma koji moze biti selektor ili obican kriterijum
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.selectLines(imbSCI.Core.syntax.nc.line.ncLineCriteria,System.Collections.Generic.IEnumerable{imbSCI.Core.syntax.nc.line.ncLine})">
            <summary>
            Vraca sve linije koje ispunjavaju prost linijski kriterijum
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.testLineRelativeCriteria(imbSCI.Core.syntax.nc.line.ncLine,imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria)">
            <summary>
            Testira lineRelativeCriteria uslov
            </summary>
            <param name="line"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.filterSelectedLines(imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria,System.Collections.Generic.IEnumerable{imbSCI.Core.syntax.nc.line.ncLine})">
            <summary>
            Filtrira listu linija na osnovu relativnog kriterijuma
            </summary>
            <param name="criteria"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCollection.selectLinesBySelector(imbSCI.Core.syntax.nc.line.ncLineSelector)">
            <summary>
            Selektuje linije na optimizocan nacin - prvo mainCriteria, pa onda redom relCriteria dok prvi ne pukne
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.line.ncLineCriteria">
            <summary>
            Kriterijum kojim bira liniju
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineCriteria.commandCriteria">
            <summary>
            What command should line starts with: [custom] to use customCommand variable, [any] to return YES on any command
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineCriteria.customCommand">
            <summary>
            If Command is set to [custom] it will look at this value. Letter-case is ignored. If empty it will return YES on any command - same as Command = [any]
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCriteria.getCommandCriteria">
            <summary>
            vraca command criteria - custom ili predefined
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineCriteria.testLineCriteria(imbSCI.Core.syntax.nc.line.ncLine,System.Boolean)">
            <summary>
            Testira da li je ispunjen kriterijum komande.
            </summary>
            <param name="line"></param>
            <param name="inverseLogic"></param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.syntax.nc.line.ncLineFlag.WITHLABEL">
            <summary>
            ima samo jedan parametar i to je Label tipa
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria">
            <summary>
            Criteria, relative to the primary criteria
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria.relativePosition">
            <summary>
            Targeting relative position from the current ncLine. [0] is disabled, 1 is line after, -1 is line before, 5 is five lines after
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria.relativeType">
            <summary>
            Type of relative criteria:
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineRelativeCriteriaCollection.OnPropertyChanged(System.String)">
            <summary>
            Kreira event koji obaveštava da je promenjen neki parametar
            </summary>
            <remarks>
            Neće biti kreiran event ako nije spremna aplikacija: imbSettingsManager.current.isReady
            </remarks>
            <param name="name"></param>
        </member>
        <member name="F:imbSCI.Core.syntax.nc.line.ncLineRelativeCriteriaType.disabled">
            <summary>
            Iskljucen je relativni kriterijum
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.nc.line.ncLineRelativeCriteriaType.onExactPosition">
            <summary>
            Na tacno zadatoj relativnoj poziciji
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.nc.line.ncLineRelativeCriteriaType.anywhereWithin">
            <summary>
            Bilo gde unutar targetirane zone
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.line.ncLineSelectedCollection">
            <summary>
            Kolekcija selektovanih linija
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelectedCollection.#ctor(imbSCI.Core.syntax.nc.line.ncLineCollection,imbSCI.Core.syntax.nc.line.ncLineCriteria,System.Collections.Generic.IEnumerable{imbSCI.Core.syntax.nc.line.ncLine})">
            <summary>
            Pasivni konstruktor - nista ne kalkulise samo definise
            </summary>
            <param name="__source"></param>
            <param name="__criteria"></param>
            <param name="selected"></param>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelectedCollection.writeInlineDescription">
            <summary>
            Vraca jednolinijski opis kolekcije
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineSelectedCollection.source">
            <summary>
            Izvorna kolekcija
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineSelectedCollection.criteria">
            <summary>
            selektor ili prost kriterijum koji je napravio ovu kolekciju
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineSelector.relativeCriterias">
            <summary>
            kolekcija relativnih kriterijuma
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.IndexOf(imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.Insert(System.Int32,imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineSelector.Item(System.Int32)">
            <summary>
            Pristup relativnim kriterijumima
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.#ctor(System.Int32)">
            <summary>
            Dodaje relativne kriterijume u skladu sa brojem
            </summary>
            <param name="nRelative"></param>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineSelector.mainCriteria">
            <summary>
            pristup glavnom kriterijumu kao ncLineCriteria
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.System#Collections#Generic#IEnumerable{imbSCI#Core#syntax#nc#line#ncLineRelativeCriteria}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.Add(imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.Contains(imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.CopyTo(imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.line.ncLineSelector.System#Collections#Generic#ICollection{imbSCI#Core#syntax#nc#line#ncLineRelativeCriteria}#Remove(imbSCI.Core.syntax.nc.line.ncLineRelativeCriteria)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineSelector.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.line.ncLineSelector.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.ncFile">
            <summary>
            E-mac NC compatibile
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.ncFile.ncLines">
            <summary>
            kolekcija NC linija
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.ncFile.lineFlagCount">
            <summary>
            Broj razlicitih flagova koji se poljavjuju
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.ncFile.afterLoad">
            <summary>
            Konvertuje string linije u ncLine objekte
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.ncFile.writeDescription">
            <summary>
            Generise izvestaj
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.ncFileJob`1.explainJob">
            <summary>
            Generise string izvestaj o trenutnom poslu
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.ncFileJob`1.lineSelector">
            <summary>
            sele
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.ncFileJob`1.paramModifiers">
            <summary>
            Collection of param modifiers
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.ncFileTool">
            <summary>
            Alat sa svim logickim operacijama nad NC fajlovima
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.ncFileTool.setDefaultCurrentJob(System.String)">
            <summary>
            Podesava default current job
            </summary>
            <param name="jobName"></param>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.param.ncParamModify">
            <summary>
            How parameter should be modified
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.param.ncParamModify.parameterTarget">
            <summary>
            Key or ordinal zero-index (0 for the first parameter) pointing to parameter to change
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.param.ncParamModify.modificationType">
            <summary>
            Way of parameter modification
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.param.ncParamModify.modificationValue">
            <summary>
            Value to apply for modification
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.param.ncParamModify.doEnforceFormat">
            <summary>
            Should parameter accept format from Value?
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.nc.param.ncParamModify.doAddOnMissing">
            <summary>
            If parameter not found on Target key/index - it will be added
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.param.ncParamModifyCollection">
            <summary>
            Kolekcija sa ncParamModify objektima
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.param.ncParamModifyCollection.applyToLine(imbSCI.Core.syntax.nc.line.ncLine,System.Boolean)">
            <summary>
            Primenjuje sva modify podesavanja
            </summary>
            <param name="line">Linija NC koda</param>
            <param name="doLog">Da li vraca beleske</param>
            <returns>Beleske - ako je doLog=False onda je empty string</returns>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.param.ncParamModifyCollection.#ctor(System.Int32)">
            <summary>
            Creates collection witn ncParamModify items
            </summary>
            <param name="nParams">How many ncParamModify items to setup automatically</param>
        </member>
        <member name="M:imbSCI.Core.syntax.nc.param.ncParamModifyCollection.OnPropertyChanged(System.String)">
            <summary>
            Kreira event koji obaveštava da je promenjen neki parametar
            </summary>
            <remarks>
            Neće biti kreiran event ako nije spremna aplikacija: imbSettingsManager.current.isReady
            </remarks>
            <param name="name"></param>
        </member>
        <member name="T:imbSCI.Core.syntax.nc.platform.ncPlatform">
            <summary>
            Podesavanja specificna za platformu za koju se razvija
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.param.ncParam">
            <summary>
            Opisuje jednu instancu NC parametra koja ima svoj format, svoje mesto u liniji i mozda svoje slovo
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.param.ncParam.ToString">
            <summary>
            Vraca String vrednost parametra
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.param.ncParam.setFromString(System.String,System.Int32)">
            <summary>
            Podesava parametar uz pomoc ulaznog stringa. Pokretati pre ubacivanja u kolekciju - da bi parametar bio dostupan preko string kljuca
            </summary>
            <param name="inputString">Moze imati space na pocetku i na kraju. Moze biti brojni ili string</param>
            <param name="__index">Redni broj parametra, ostaviti -1 ako ne treba da modifikuje indeks</param>
        </member>
        <member name="P:imbSCI.Core.syntax.param.ncParam.index">
            <summary>
            Indeks u kolekciji
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.ncParam.key">
            <summary>
            Pronadjen kljuc
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.ncParam.valueType">
            <summary>
            tip nc param value
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.ncParam.strValue">
            <summary>
            smestanje string vrednosti
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.ncParam.decValue">
            <summary>
            smestanje decimalne vrednosti
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.ncParam.originalSourceCode">
            <summary>
            izvodni kod
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.ncParam.format">
            <summary>
            Format kojim je bio zapisan parametar
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.param.ncParamValueType.empty">
            <summary>
            Parametar je prazan - sigurno je neka greska
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.param.ncParamValueType.numeric">
            <summary>
            Numericka vrednost
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.param.ncParamValueType.label">
            <summary>
            oznaka
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.param.ncParamValueType.error">
            <summary>
            greska
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.param.paramValueModificationType">
            <summary>
            Vrsta promene nekog parametra
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.param.typedParam">
            <summary>
            Parametar sa dodeljenom vrednoscu
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParam.getString(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the string representation of the parameter.
            </summary>
            <param name="declaration">if set to <c>true</c> it adds the Type declaration.</param>
            <param name="addDotComma">if set to <c>true</c> it adds dot comma character at the end.</param>
            <returns></returns>
        </member>
        <member name="F:imbSCI.Core.syntax.param.typedParam._value">
            <summary>
            Dodeljena vrednost - obradjen
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.typedParam.value">
            <summary>
            Dodeljena vrednost - obradjen
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.param.typedParam._info">
            <summary>
            info
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.typedParam.info">
            <summary>
            info
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.param.typedParamCollection">
            <summary>
            Kolekcija parametara sa dodeljenom vrednoscu
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.param.typedParamCollection._info">
            <summary>
            Information about params
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.typedParamCollection.info">
            <summary>
            Information about params
            </summary>
        </member>
        <member name="F:imbSCI.Core.syntax.param.typedParamCollection.PARAMFORMAT_DoubleDot">
            <summary>
            Each Match is one parameter declaration
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamCollection.setFromDeclaration(System.String)">
            <summary>
            Sets from declaration line like: word:String;steps=5:Integer;
            </summary>
            <param name="declaration">The declaration.</param>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamCollection.#ctor(System.String)">
            <summary>
            Deklaracija parametara na osnovu string opisa
            </summary>
            <param name="declaration">The declaration.</param>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamCollection.setValue(System.String,System.String)">
            <summary>
            Sets the value for param according the name
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="valueString">The value string.</param>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamCollection.setValues(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the values - ordinarly
            </summary>
            <param name="valueStrings">The value strings.</param>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamCollection.setValues(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Sets the values, returns error message if error occured
            </summary>
            <param name="paramNames">The parameter names.</param>
            <param name="valueStrings">The value strings.</param>
            <returns>Empty string if param input passed the validation</returns>
        </member>
        <member name="T:imbSCI.Core.syntax.param.typedParamInfo">
            <summary>
            Struktura koja opisuje parametar - ali ne i njegovu trenutku vrednost
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamInfo.#ctor(System.String,System.String)">
            <summary>
            Creates typedParamInfo from string description
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="paramType">Type of the parameter.</param>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamInfo.#ctor(System.String,imbSCI.Data.enums.typedParamDeclarationType)">
            <summary>
            Konstruktor na osnovu string deklaracije - koristi setFromString metod
            </summary>
            <param name="input"></param>
            <param name="declaration"></param>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamInfo.#ctor">
            <summary>
            Podrazumevani konstruktor koji postavlja type na string a ime preskace
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamInfo.getToString(imbSCI.Data.enums.typedParamDeclarationType)">
            <summary>
            Makes string declaration of the param;
            </summary>
            <param name="declaration">Declaration format</param>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamInfo.setFromString(System.String,imbSCI.Data.enums.typedParamDeclarationType)">
            <summary>
            Declares name and value type (class) from string declaration, formated as defined by the declaration
            </summary>
            <param name="input">String declaration of the param. Example: "numericParam:Int32;textMessage:String"</param>
            <param name="declaration">What format is used for string representation</param>
        </member>
        <member name="P:imbSCI.Core.syntax.param.typedParamInfo.name">
            <summary>
            Naziv parametra
            </summary>
        </member>
        <member name="P:imbSCI.Core.syntax.param.typedParamInfo.type">
            <summary>
            Tip vrednosti koji se upisuje u parametar
            </summary>
        </member>
        <member name="T:imbSCI.Core.syntax.param.typedParamInfoCollection">
            <summary>
            Skup typedParamInfo deklaracija (bez dodeljenih vrednosti).
            </summary>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamInfoCollection.getToString(imbSCI.Data.enums.typedParamDeclarationType)">
            <summary>
            Makes string declaration of the param;
            </summary>
            <param name="declaration">Declaration format</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Core.syntax.param.typedParamInfoCollection.setFromString(System.String,imbSCI.Data.enums.typedParamDeclarationType)">
            <summary>
            Deprecated
            </summary>
            <param name="paramList"></param>
            <param name="declaration"></param>
            <returns></returns>
        </member>
    </members>
</doc>
