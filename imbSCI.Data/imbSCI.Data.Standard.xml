<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imbSCI.Data</name>
    </assembly>
    <members>
        <member name="T:imbSCI.Data.collection.aceCollection`1">
            <summary>
            Tipizirana kolekcija
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollection`1._autoInit">
            <summary>
            Inicijalizacija koja se pokrece sama nakon instanciranja
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:imbSCI.Data.collection.aceCollectionLimitSafe`1">
            <summary>
            Encapsulated List collection that will automatically keep Int32 key at limit value if it goes out of range
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.Generic.IList`1" />
            <seealso cref="T:imbSCI.Data.data.imbBindable" />
        </member>
        <member name="P:imbSCI.Data.collection.aceCollectionLimitSafe`1.items">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Data.collection.aceCollectionLimitSafe`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.aceCollectionLimitSafe`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.resolveKey(System.Int32)">
            <summary>
            Resolves the key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:imbSCI.Data.collection.aceCollectionLimitSafe`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:imbSCI.Data.collection.aceCollectionLimitSafe`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> with the specified key.
            </summary>
            <value>
            The <see cref="!:T"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.Add(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.Contains(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.CopyTo(System.Collections.Generic.KeyValuePair{System.String,`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.Remove(System.Collections.Generic.KeyValuePair{System.String,`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:imbSCI.Data.collection.aceDictionaryCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.Add(System.String,`0)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:imbSCI.Data.collection.aceDictionaryCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:imbSCI.Data.collection.aceDictionaryCollection`1.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:imbSCI.Data.collection.aceDictionaryCollection`1.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:imbSCI.Data.collection.aceDictionaryCollection`1.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graph`1">
            <summary>
            Universal wrapped-graph-tree structure - the class of the root element in a graph-tree structure
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <seealso cref="!:graphWrapgraphWrapNode&lt;TItem&gt;" />
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphAnalysisPair">
            <summary>
            Analytical entry, describing relation ship between version of the same node, in two different graphs
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphAnalysisPair.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphAnalysisPair"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphAnalysisPair.#ctor(imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.graphChangeType)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphAnalysisPair"/> class.
            </summary>
            <param name="node_a">The node a.</param>
            <param name="node_b">The node b.</param>
            <param name="_result">The result.</param>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphAnalysisPair.node_A">
            <summary>
            Gets or sets the node a.
            </summary>
            <value>
            The node a.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphAnalysisPair.node_B">
            <summary>
            Gets or sets the node b.
            </summary>
            <value>
            The node b.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphAnalysisPair.result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphAnalysisPair.path_at_A">
            <summary>
            Gets or sets the path at a.
            </summary>
            <value>
            The path at a.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphAnalysisPair.path_at_B">
            <summary>
            Gets or sets the path at b.
            </summary>
            <value>
            The path at b.
            </value>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphAnalysisPairCollection">
            <summary>
            Collection of analysis pairs
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbSCI.Data.collection.graph.graphAnalysisPair&gt;" />
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphAnalysisPairCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphAnalysisPairCollection"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphAnalysisPairCollection.Add(imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Creates new analysis pair - sets <see cref="T:imbSCI.Data.collection.graph.graphChangeType"/> for the pair, as: added, removed or noChange.
            </summary>
            <param name="node_A">The node a.</param>
            <param name="node_B">The node b.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphAxisEnum">
            <summary>
            Axes of multidimensional graph (planned feature)
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.x">
            <summary>
            The x: horizontal
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.y">
            <summary>
            The y: vertizal
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.z">
            <summary>
            The z: 3-rd dimension
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.w">
            <summary>
            The w: 4th
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.v">
            <summary>
            The v: 5th
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.u">
            <summary>
            The u: 6th
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.t">
            <summary>
            The t: 7th
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphAxisEnum.s">
            <summary>
            The s: 8th
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphChangeAnalysis">
            <summary>
            Utility class used to detect difference or change between two directed graphs A and B
            </summary>
            <seealso cref="T:imbSCI.Data.collection.graph.graphAnalysisPairCollection" />
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphChangeAnalysis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphChangeAnalysis"/> class - and does nothing
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphChangeAnalysis.#ctor(imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphChangeAnalysis"/> class - and calls <see cref="M:imbSCI.Data.collection.graph.graphChangeAnalysis.Perform"/> method immediatly
            </summary>
            <param name="graphA">The graph a.</param>
            <param name="graphB">The graph b.</param>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphChangeAnalysis.sorted">
            <summary>
            Pairs sorted according to <see cref="T:imbSCI.Data.collection.graph.graphChangeType"/>
            </summary>
            <value>
            The sorted.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphChangeAnalysis.Perform">
            <summary>
            Executes the analysis and populates collection with resulting pairs
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphChangeType">
            <summary>
            Kind of graph structural change, that was observed during analysis
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphChangeType.removed">
            <summary>
            Graph node was removed
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphChangeType.moved">
            <summary>
            Graph node was moved
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphChangeType.added">
            <summary>
            Graph node is added
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphChangeType.noChange">
            <summary>
            Nothing changed
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphChangeType.expanded">
            <summary>
            The node has more children then before
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphChangeType.contracted">
            <summary>
            The node lost some children
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphDataPackage`1">
            <summary>
            XML Serializable container for <see cref="T:imbSCI.Data.collection.graph.graphWrapNode`1" /> structure. Use <see cref="M:imbSCI.Data.collection.graph.graphDataPackage`1.Store(imbSCI.Data.collection.graph.graphWrapNode{`0},System.String)" /> to add node into package.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <seealso cref="!:imbSCI.Data.data.package.dataPackage&lt;TItem, imbSCI.Data.collection.graph.graphWrapNode&lt;TItem&gt;&gt;" />
            <seealso cref="!:imbSCI.Data.data.package.dataPackage&lt;TItem, aceCommonTypes.collection.nested.graphWrapNode&lt;TItem&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphDataPackage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphDataPackage`1"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphDataPackage`1.Store(imbSCI.Data.collection.graph.graphWrapNode{`0},System.String)">
            <summary>
            Stores the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphDataPackage`1.GetDataPackageID(imbSCI.Data.collection.graph.graphWrapNode{`0})">
            <summary>
            Utility method that returns Unique path to the specified node
            </summary>
            <param name="wrapper">Object that holds the instance</param>
            <returns>
            ID
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphDataPackage`1.GetInstanceToPack(imbSCI.Data.collection.graph.graphWrapNode{`0})">
            <summary>
            Takes data item instance from the wrapper
            </summary>
            <param name="wrapper">Object that holds the instance</param>
            <returns>
            item that was held by the instance
            </returns>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphMultiRoot`1">
            <summary>
            Invisible (not part of the node <see cref="P:imbSCI.Data.collection.graph.IGraphNode.path"/>) root node for multiple, separate, graph trees.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String, T&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphMultiRoot`1"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphMultiRoot`1.pathSeparator">
            <summary>
            Gets the path separator used in this path format - if its not set it will look for parent's default path separator to set it. If there is no parent, it will use <see cref="!:defaultPathSeparator"/>
            </summary>
            <value>
            The path separator.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphMultiRoot`1.path">
            <summary>
            Putanja objekta
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.Remove(System.String)">
            <summary>
            Removes by the key specified
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphMultiRoot`1.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.Add(`0)">
            <summary>
            Adds the specified <c>newChild</c>, if its name is not already occupied
            </summary>
            <param name="newChild">The new child.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.AddOrGetByPath(System.String,System.String)">
            <summary>
            Builds graph defined by <c>path</c> or selecte existing graphnode, as pointed by path
            </summary>
            <param name="path">Path to construct from.</param>
            <param name="splitter">The splitter - by default: directory separator.</param>
            <returns>Leaf instance</returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.Count">
            <summary>
            Counts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.Get(System.String,System.Boolean)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="autocreate">if set to <c>true</c> [autocreate].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.Add(System.String,`0)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphMultiRoot`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphMultiRoot`1.items">
            <summary>
            Dictionary of the rooted nodes
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphNode">
            <summary>
            Universal T-Graph structure with nodes having unique <see cref="!:name"/> property. To be used without <see cref="T:imbSCI.Data.collection.graph.graph`1"/> class.
            </summary>
            <seealso cref="T:System.Collections.IEnumerable" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;aceCommonTypes.collection.nested.graphNode&gt;" />
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNode.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNode.System#Collections#Generic#IEnumerable{imbSCI#Data#collection#graph#IGraphNode}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNode.Add(imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Adds the specified <c>newChild</c>, if its name is not already occupied
            </summary>
            <param name="newChild">The new child.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNode.forTreeview">
            <summary>
            Name format used for textual tree view representation
            </summary>
            <value>
            For treeview.
            </value>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphNodeBase">
            <summary>
            Base class for custom <see cref="T:imbSCI.Data.collection.graph.graphNode"/> implementation
            </summary>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;imbSCI.Data.collection.graph.IGraphNode&gt;" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithParent" />
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.Add(imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Adds the specified child.
            </summary>
            <param name="child">The child.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.isLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf.
            </summary>
            <value>
              <c>true</c> if this instance is leaf; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.level">
            <summary>
            Gets the depth level, where 1 is the root
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.parent">
            <summary>
            Referenca prema parent objektu
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.name">
            <summary>
            Ime koje je dodeljeno objektu
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.pathSeparator">
            <summary>
            Gets the path separator used in this path format - if its not set it will look for parent's default path separator to set it. If there is no parent, it will use <see cref="F:imbSCI.Data.collection.graph.graphNodeBase.defaultPathSeparator"/>
            </summary>
            <value>
            The path separator.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.path">
            <summary>
            Putanja objekta
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.root">
            <summary>
            Gets the root.
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeBase.imbSCI#Data#interfaces#IObjectWithParent#parent">
            <summary>
            Referenca prema parent objektu
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.getChildNames">
            <summary>
            Gets the child names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.getFirst">
            <summary>
            Gets the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.Remove(System.String)">
            <summary>
            Removes by the key specified
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.RemoveByKey(System.String)">
            <summary>
            Removes child matching the specified key, on no match returns <c>false</c>
            </summary>
            <param name="key">The key to match children against</param>
            <returns>
            True if a child removed, false if no child matched by the key
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeBase.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all children with matching <see cref="!:graphNode.name" />
            </summary>
            <param name="keys">The keys to match children with</param>
            <returns>
            Number of child nodes matched and removed
            </returns>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphNodeCustom">
            <summary>
            Graph structure to inherit for custom graph node type
            </summary>
            <seealso cref="T:imbSCI.Data.collection.graph.graphNodeBase" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;imbSCI.Data.collection.graph.IGraphNode&gt;" />
            <seealso cref="T:imbSCI.Data.collection.graph.IGraphNode" />
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeCustom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphNodeCustom"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeCustom.doAutorenameOnExisting">
            <summary>
            Turns on the autorenaming, when new child is inserted into this node - it will autorename it to have unique name
            </summary>
            <value>
              <c>true</c> if [do autorename on existing]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeCustom.doAutonameFromTypeName">
            <summary>
            Turns on autonaming, based on type name of this node
            </summary>
            <value>
              <c>true</c> if [do autoname from type name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeCustom.CreateChildItem(System.String)">
            <summary>
            Creates new child item and sets the name, but still do not add it. Used internally by <see cref="!:Add(String pathWithName)"/>
            </summary>
            <param name="nameForChild">The name for child.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeCustom.Add(System.String)">
            <summary>
            Adds the specified path with name.
            </summary>
            <param name="pathWithName">Name of the path with.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeCustom.makeAutoName">
            <summary>
            Makes the name of the automatic.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeCustom.Add(imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Adds the specified <c>newChild</c>, if its name is not already occupied
            </summary>
            <param name="newChild">The new child.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeCustom.GetIndex">
            <summary>
            Returns the index of this node at its parent node. If no parent: returns -1
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeCustom.GetSibling(System.Int32)">
            <summary>
            Gets the sibling, relative to this node, positioned at <c>n</c> places defined by <c>direction</c>. It is range-safe, in sense: if node index + <c>direction</c> is higher then number of siblings, it will return the last sibling.
            </summary>
            <remarks>
            <para>If there is no parent: it will return <c>null</c></para>
            <para>If direction + index is less then zero, it will return sibling at zero</para>
            </remarks>
            <param name="direction">The direction, relative to index of this node. If it is 0, it will return this node</param>
            <returns>Sibling node, relative to index of this and <c>direction</c> specified</returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeCustom.Item(System.Int32)">
            <summary>
            Returns node by ordinal index
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeCustom.Item(System.String)">
            <summary>
            Accessing the child nodes using child node name
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeCustom.forTreeview">
            <summary>
            String representetation of the node
            </summary>
            <value>
            For treeview.
            </value>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphNodeSet">
            <summary>
            Set of <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/> instances, used temporarly in process of common-root graph construction
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbSCI.Data.collection.graph.IGraphNode&gt;" />
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeSet.#ctor(imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.graph.graphNodeSet"/> class.
            </summary>
            <param name="localRoot">The local root.</param>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeSet.#ctor(System.Collections.Generic.IEnumerable{imbSCI.Data.collection.graph.IGraphNode},imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Constructs a graph from specified set of <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/>s, with common root node <c>localRoot</c>
            </summary>
            <param name="source">The source collection</param>
            <param name="localRoot">Local root node, to be used</param>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphNodeSet.root">
            <summary>
            Common root of the set - if exists
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphNodeSet.CreateGraphFromLocalRoot``1(System.String)">
            <summary>
            Creates normal directed graph, by connecting contained graph nodes at common root nodes. If there are no common nodes it can be added optionally by specifying local root name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="localRootName">Name of the local root - in case there is no common <c>root</c> for the set</param>
            <returns>Reference to the root node of newly created graph</returns>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphNodeSetCollection">
            <summary>
            Collection of <see cref="T:imbSCI.Data.collection.graph.graphNodeSet"/>s, used internally by <see cref="M:imbSCI.Data.collection.graph.graphTools.GetFirstNodeWithLeafs``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbSCI.Data.collection.graph.graphNodeSet&gt;" />
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphOperationFlag">
            <summary>
            Options for graph operations
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphOperationFlag.mergeOnSameName">
            <summary>
            The merge on same name: when retreating or otherwise changing parent of the <see cref="T:imbSCI.Data.collection.graph.graphNode"/>, it will merge it's own children with new parent's children
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.graph.graphOperationFlag.overwriteOnSameName">
            <summary>
            The overwrite on same name: when changing parent of the <see cref="T:imbSCI.Data.collection.graph.graphNode"/>, it will replace any existing node with the same name
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphTools">
            <summary>
            Extensions for <see cref="T:imbSCI.Data.collection.graph.graphNode"/> , <see cref="T:imbSCI.Data.collection.graph.graphWrapNode`1"/> and other graphNode derivatives
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.BuildGraphFromPaths``1(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Builds the graph from paths.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputList">The input list.</param>
            <param name="splitter">The splitter.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.ConvertPathToGraph``1(``0,System.String,System.Boolean,System.String)">
            <summary>
            Builds graph defined by <c>path</c> or selecte existing graphnode, as pointed by path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent">Parent graph.</param>
            <param name="path">Path to construct from.</param>
            <param name="isAbsolutePath">if set to <c>true</c> [is absolute path].</param>
            <param name="splitter">The splitter - by default: directory separator.</param>
            <returns>Leaf instance</returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.GetParents``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Gets first level parents of the source collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="keepRootsFromSource">if set to <c>true</c>: the output will also contain any root (node without parent) node from the specified source collection.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.GetNodeSetWithLeafs``1(``0,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Collects all leaf nodes from the <c>parent</c> node, and pack it into graphNodeSet.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent">The parent.</param>
            <param name="leafNames">The leaf names.</param>
            <param name="min">The minimum.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.GetFirstNodeWithLeafs``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32)">
            <summary>
            Iterative procedure, returning <see cref="T:imbSCI.Data.collection.graph.graphNodeSetCollection"/> with <see cref="T:imbSCI.Data.collection.graph.graphNodeSet"/>s rooted at node that has leafs (all or <c>min)</c> with <c>leafNames</c>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source - starting leaf or other branch nodes.</param>
            <param name="leafNames">The leaf names.</param>
            <param name="min">The minimum.</param>
            <param name="maxIterations">The maximum iterations.</param>
            <param name="extraIterations">The extra iterations.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.GetAllRoots``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets all roots.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="maxIterations">The maximum iterations.</param>
            <param name="extraIterations">The extra iterations.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.MakeUniqueChildName(imbSCI.Data.collection.graph.IGraphNode,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Makes the unique name for a child, based on proposal and counter, formatted by limit digit width: e.g. if <c>limit</c> is 100, format is: D3, producing: <c>proposal</c>+001, +002, +003...
            </summary>
            <param name="parent">The parent for whom the child name is made</param>
            <param name="proposal">The proposal form, neither it already exist or not</param>
            <param name="limit">The limit: number of cycles to terminate the search</param>
            <param name="toSkip">To skip.</param>
            <param name="addNumberSufixForFirst">if set to <c>true</c> it adds number sufix even if it is the first child with proposed name</param>
            <returns>
            Unique name for new child in format: <c>proposal</c>001 up to <c>limit</c>
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.RetreatToParent(imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.graphOperationFlag)">
            <summary>
            If the graph <c>target</c> has parent, it will move to its level (one level closer to the root)
            </summary>
            <param name="target">The graph that is moving</param>
            <param name="flags">The operation flags</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.MoveTo(imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.graphOperationFlag)">
            <summary>
            Moves to new parent node <c>moveInto</c>
            </summary>
            <param name="graphToMove">The graph to move.</param>
            <param name="moveInto">The move into (future parent graph)</param>
            <param name="flags">The operation flags</param>
            <returns>Resulting graph, relevant in case of merging</returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphTools.MergeWith(imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.IGraphNode,imbSCI.Data.collection.graph.graphOperationFlag)">
            <summary>
            Graph node <c>graphToMerge</c> transfers all child nodes to <c>graphToMergeWith</c> and disconnects from its parent
            </summary>
            <param name="graphToMerge">The graph to merge.</param>
            <param name="graphToMergeWith">The graph to merge with.</param>
            <param name="flags">The operation flags</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.collection.graph.graphWrapNode`1">
            <summary>
            Graph structure that wrapps custom object specified by {TItem}
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;aceCommonTypes.collection.nested.graphWrapNode&lt;TItem&gt;&gt;" />
            <seealso cref="!:imbSCI.Core.interfaces.IObjectWithParent" />
            <seealso cref="!:imbSCI.Core.interfaces.IObjectWithPath" />
            <seealso cref="!:aceCommonTypes.interfaces.IObjectWithName" />
            <seealso cref="!:aceCommonTypes.interfaces.IObjectWithPathAndChildren" />
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphWrapNode`1.children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphWrapNode`1.item">
            <summary>
            The object associated with the graph
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphWrapNode`1.isNullNode">
            <summary>
            Gets a value indicating whether this instance is empty graph node, containing no wrapped item node.
            </summary>
            <value>
            <c>true</c> if this instance is null node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphWrapNode`1.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:imbSCI.Data.collection.graph.graphWrapNode`1"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.graph.graphWrapNode`1"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphWrapNode`1.name">
            <summary>
            Ime koje je dodeljeno objektu
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.graphWrapNode`1.parent">
            <summary>
            Referenca prema parent objektu
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphWrapNode`1.Add(`0)">
            <summary>
            Adds the specified item into graph structure
            </summary>
            <param name="__item">The item.</param>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphWrapNode`1.Add(System.String)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="__name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphWrapNode`1.Add(System.String,`0)">
            <summary>
            Adds new node or nodes to correspond to specified path or name. <c>pathOrName</c> can be path like: path1\\path2\\path3
            </summary>
            <param name="pathWithName">Name of the path with.</param>
            <param name="__item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphWrapNode`1.Add(imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Adds the specified <c>newChild</c>, if its name is not already occupied
            </summary>
            <param name="newChild">The new child.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.graphWrapNode`1.ToStringPathList">
            <summary>
            To the string path list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.collection.graph.IGraphNode">
            <summary>
            Interface for <see cref="T:imbSCI.Data.collection.graph.graphNode"/> and <see cref="T:imbSCI.Data.collection.graph.graphWrapNode`1"/>
            </summary>
            <seealso cref="T:System.Collections.IEnumerable" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithParent" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithPath" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithPathAndChildren" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithTreeView" />
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.graph.IGraphNode"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.IGraphNode.RemoveByKey(System.String)">
            <summary>
            Removes child matching the specified key, on no match returns <c>false</c>
            </summary>
            <param name="key">The key to match children against</param>
            <returns>True if a child removed, false if no child matched by the key</returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.IGraphNode.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all children with matching <see cref="!:graphNode.name"/>
            </summary>
            <param name="keys">The keys to match children with</param>
            <returns>Number of child nodes matched and removed</returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.IGraphNode.Add(imbSCI.Data.collection.graph.IGraphNode)">
            <summary>
            Adds the specified <c>newChild</c>, if its name is not already occupied
            </summary>
            <param name="newChild">The new child.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.level">
            <summary>
            Gets the depth level, where 1 is the root
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.forTreeview">
            <summary>
            Name format used for textual tree view representation
            </summary>
            <value>
            For treeview.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.parent">
            <summary>
            Referenca prema parent objektu
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.name">
            <summary>
            Ime koje je dodeljeno objektu
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.pathSeparator">
            <summary>
            Gets the path separator used in this path format
            </summary>
            <value>
            The path separator.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.path">
            <summary>
            Putanja objekta
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.root">
            <summary>
            Gets the root.
            </summary>
            <value>
            The root.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.graph.IGraphNode.getChildNames">
            <summary>
            Gets the child names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.IGraphNode.getFirst">
            <summary>
            Gets the first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.graph.IGraphNode.Count">
            <summary>
            Counts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.graph.IGraphNode.isLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf.
            </summary>
            <value>
              <c>true</c> if this instance is leaf; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbSCI.Data.collection.graph.NamespaceDoc">
            <summary>
            <para>Directed tree-graph data-structures</para>
            </summary>
            <remarks>
            <para>Universal graph-tree data-structures (single-parent), simple <see cref="T:imbSCI.Data.collection.graph.graphNode"/> and custom type wrapper <see cref="T:imbSCI.Data.collection.graph.graphWrapNode`1"/></para>
            <list type="bullet">
                <listheader>Introduces new directed graph structures and related utility classes</listheader>
                <item>
                    <term>graphAnalysis</term>
                    <description>Utility class for comparison between two graphs</description>
                </item>
                <item>
                    <term>graphMultiRoot</term>
                    <description>Hidden root node(not seen in path) supporting multiple roots/trees/graphs</description>
                </item>
            </list>
            </remarks>
            <seealso cref="T:imbSCI.Data.extensions.data.imbPathExtensions" />
            <seealso cref="T:imbSCI.Data.imbGraphExtensions" />
        </member>
        <member name="M:imbSCI.Data.collection.IAceCollection`1._autoInit">
            <summary>
            Inicijalizacija koja se pokrece sama nakon instanciranja
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.layers.layerCollection">
            <summary>
            Instance of layer inside <see cref="T:imbSCI.Data.collection.layers.layerStack"/>
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="!:aceCommonTypes.interfaces.IObjectWithName" />
            <seealso cref="!:System.Collections.Generic.IList&lt;System.Object&gt;" />
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerCollection.#ctor(System.String,System.String,imbSCI.Data.collection.layers.layerStack,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.layers.layerCollection"/> class.
            </summary>
            <param name="__name">The name.</param>
            <param name="__description">The description.</param>
            <param name="__parent">The parent.</param>
            <param name="__id">The identifier.</param>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerCollection.ToString">
            <summary>
            To the string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerCollection.isEmpty">
            <summary>True when the layer is empty</summary>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerCollection.Push``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Pushes the specified items, and returns the items refused (already inside - or - by other criterion)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerCollection.Push``1(``0)">
            <summary>
            If already contained returns false
            </summary>
            <typeparam name="T"></typeparam>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerCollection.Pull``1(System.Int32)">
            <summary>
            Pulls the content (and removes it from the layer) specified pull limit.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pullLimit">The pull limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerCollection.PullAll``1">
            <summary>
            Pulls all.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerCollection.parent">
            <summary>Reference to parent stack </summary>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerCollection.id">
            <summary>ID of the layer, 0 is the surface</summary>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerCollection.items">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerCollection.name">
            <summary>
            Name for this instance
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerCollection.description">
            <summary>
            Human-readable description of object instance
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.layers.layerStack">
            <summary>
            Contains multiple <see cref="T:imbSCI.Data.collection.layers.layerCollection"/>
            </summary>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.layers.layerStack"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.Push``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Pushes the specified items, and returns the items refused (already inside - or - by other criterion)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="layer_id">The layer identifier.</param>
            <param name="leakToLower">if set to <c>true</c> it will try to Push the items into next lower layer.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerStack.layer_id">
            <summary>
            Last layer pull
            </summary>
            <value>
            The layer identifier.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.Pull``1(System.Int32,System.Boolean)">
            <summary>
            Pulls the content from the best (topmost) layer and removes taken elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pullLimit">The pull limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.PullAll``1">
            <summary>
            Pulls all elements in the collections
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.Clear">
            <summary>
            Clears all layers from any instances
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerStack.Count">
            <summary>
            Gets the count of layers
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerStack.CountAll">
            <summary>
            Gets the total count of all elements in the layers
            </summary>
            <value>
            The count all.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerStack.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:imbSCI.Data.collection.layers.layerCollection"/> with the specified identifier.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.layers.layerCollection"/>.
            </value>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerStack.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbSCI.Data.collection.layers.layerCollection"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.layers.layerCollection"/>.
            </value>
            <param name="__name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.AddLayer(System.String,System.String)">
            <summary>
            Adds the layer - defines new layer within the stack
            </summary>
            <param name="__name">The name.</param>
            <param name="__description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.WhereIs(System.Object)">
            <summary>
            Where is the specified <c>item</c>, returns -1 if it is not in the layer stack
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.layers.layerStack.Remove(System.Object)">
            <summary>
            Removes the specified item. Returns <c>false</c> if the specified <c>item</c> was not found in any layer of the stack
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.layers.layerStack.layers">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Data.collection.math.aceInt2DStackedMatrix">
            <summary>
            2D matrix of integer values, where Y is not preset but contains stacked values. Thread-safe version
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;System.Int32&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrix.#ctor">
            <summary>
            Constructor for serialization, do not use directly
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrix.AddRange(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds the range.
            </summary>
            <param name="xStart">The x start.</param>
            <param name="xEnd">The x end.</param>
            <param name="value">The value.</param>
            <param name="uniqueByY">if set to <c>true</c> [unique by y].</param>
            <param name="includingXEnd">if set to <c>true</c> [including x end].</param>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrix.RemoveRange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Removes the value or all values from start to end.
            </summary>
            <param name="xStart">The x start.</param>
            <param name="xEnd">The x end.</param>
            <param name="value">Value to remove, or -1 to remove all</param>
            <param name="includingXEnd">if set to <c>true</c> [including x end].</param>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrix.GetByX(System.Int32)">
            <summary>
            Gets the Y stack by X. It creates automatically new List instance if X was empty. Use this better than <see cref="T:System.Collections.Generic.List`1"/> indexer.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrix.SetWidth(System.Int32)">
            <summary>
            Sets the width.
            </summary>
            <param name="x">The x.</param>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.math.aceInt2DStackedMatrix"/> class.
            </summary>
            <param name="x">The x.</param>
        </member>
        <member name="T:imbSCI.Data.collection.math.aceInt2DStackedMatrixConcurrent">
            <summary>
            2D matrix of integer values, where Y is not preset but contains stacked values. Thread-safe version
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;System.Int32&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrixConcurrent.#ctor">
            <summary>
            Constructor for serialization, do not use directly
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrixConcurrent.AddRange(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds the range.
            </summary>
            <param name="xStart">The x start.</param>
            <param name="xEnd">The x end.</param>
            <param name="value">The value.</param>
            <param name="uniqueByY">if set to <c>true</c> [unique by y].</param>
            <param name="includingXEnd">if set to <c>true</c> [including x end].</param>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrixConcurrent.RemoveRange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Removes the value or all values from start to end.
            </summary>
            <param name="xStart">The x start.</param>
            <param name="xEnd">The x end.</param>
            <param name="value">Value to remove, or -1 to remove all</param>
            <param name="includingXEnd">if set to <c>true</c> [including x end].</param>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrixConcurrent.GetByX(System.Int32)">
            <summary>
            Gets the Y stack by X. It creates automatically new List instance if X was empty. Use this better than <see cref="!:List&lt;T&gt;"/> indexer.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrixConcurrent.SetWidth(System.Int32)">
            <summary>
            Sets the width.
            </summary>
            <param name="x">The x.</param>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceInt2DStackedMatrixConcurrent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.math.aceInt2DStackedMatrix"/> class.
            </summary>
            <param name="x">The x.</param>
        </member>
        <member name="T:imbSCI.Data.collection.math.aceRelationMatrix`3">
             <summary>
            
             </summary>
             <typeparam name="TXAxis">The type of the x axis.</typeparam>
             <typeparam name="TYAxis">The type of the y axis.</typeparam>
             <typeparam name="TRelation">The type of the relation.</typeparam>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},`2)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.math.aceRelationMatrix`3"/> class.
            </summary>
            <param name="__axisX">The axis x.</param>
            <param name="__axisY">The axis y.</param>
            <param name="__init">The initialize.</param>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.IndexXOf(`0)">
            <summary>
            Indexes the x of.
            </summary>
            <param name="itemX">The item x.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.IndexYOf(`1)">
            <summary>
            Indexes the y of.
            </summary>
            <param name="itemY">The item y.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.MapToX(System.Collections.Generic.List{`2})">
            <summary>
            Maps to x.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.MapToY(System.Collections.Generic.List{`2})">
            <summary>
            Maps to y.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.GetMatrix">
            <summary>
            Gets the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.GetTriple(System.Int32,System.Int32)">
            <summary>
            Gets the triple.
            </summary>
            <param name="xi">The xi.</param>
            <param name="yi">The yi.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrix`3.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:imbSCI.Data.collection.math.aceRelationMatrixTriple`3"/> with the specified xi.
            </summary>
            <value>
            The <see cref="T:imbSCI.Data.collection.math.aceRelationMatrixTriple`3"/>.
            </value>
            <param name="xi">The xi.</param>
            <param name="yi">The yi.</param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrix`3.Item(`0,`1)">
            <summary>
            Gets or sets the <see cref="!:TRelation"/> with the specified xi.
            </summary>
            <value>
            The <see cref="!:TRelation"/>.
            </value>
            <param name="xi">The xi.</param>
            <param name="yi">The yi.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.math.aceRelationMatrix`3.deploy(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},`2)">
            <summary>
            Deploys the specified axis x.
            </summary>
            <param name="__axisX">The axis x.</param>
            <param name="__axisY">The axis y.</param>
            <param name="__init">The initialize.</param>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrix`3.values">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrix`3.axisX">
            <summary> </summary>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrix`3.axisY">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Data.collection.math.aceRelationMatrixTriple`3">
             <summary>
            
             </summary>
             <typeparam name="TXAxis">The type of the x axis.</typeparam>
             <typeparam name="TYAxis">The type of the y axis.</typeparam>
             <typeparam name="TRelation">The type of the relation.</typeparam>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrixTriple`3.itemX">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrixTriple`3.itemY">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Data.collection.math.aceRelationMatrixTriple`3.Value">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Data.collection.math.aceRelationValue`3">
            <summary>
            Delegate that determinate value for a relationship between two items in the <see cref="T:imbSCI.Data.collection.math.aceRelationMatrix`3"/>
            </summary>
            <typeparam name="TXAxis">The type of the x axis.</typeparam>
            <typeparam name="TYAxis">The type of the y axis.</typeparam>
            <typeparam name="TRelation">The type of the relation.</typeparam>
            <param name="itemX">The item x.</param>
            <param name="itemY">The item y.</param>
            <returns>An object or value that describes the relation between <c>itemX</c> and <c>itemY</c></returns>
        </member>
        <member name="T:imbSCI.Data.collection.math.ConcurrentEnumerator`1">
            <summary>
            Concurrent Enumerator by Brian Murphy-Booth @ stackoverflow
            </summary>
            <remarks>
            <para>Original source for this class: https://stackoverflow.com/a/23446622/4034192 </para>
            <para>Author: Brian Murphy-Booth, https://stackoverflow.com/users/3023288/brian-murphy-booth </para>
            </remarks>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IList`1" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:imbSCI.Data.collection.math.ConcurrentList`1">
            <summary>
            Concurrent List by Brian Murphy-Booth @ stackoverflow
            </summary>
            <remarks>
            <para>Original source for this class: https://stackoverflow.com/a/23446622/4034192 </para>
            <para>Author: Brian Murphy-Booth, https://stackoverflow.com/users/3023288/brian-murphy-booth </para>
            </remarks>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IList`1" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:imbSCI.Data.collection.nested.aceConcurrentBag`1">
            <summary>
            Concurrent Bag with implicit conversion
            </summary>
            <typeparam name="T">Item to store</typeparam>
            <seealso cref="T:System.Collections.Concurrent.ConcurrentBag`1" />
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceConcurrentBag`1.op_Implicit(imbSCI.Data.collection.nested.aceConcurrentBag{`0})~System.Collections.Generic.List{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:imbSCI.Data.collection.nested.aceConcurrentBag`1"/> to <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="F:imbSCI.Data.collection.nested.aceConcurrentBag`1.AddLock">
            <summary>
            The add lock
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceConcurrentBag`1.AddUnique(`0)">
            <summary>
            Adds the unique.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:imbSCI.Data.collection.nested.aceDictionary2D`3">
            <summary>
            2D dictionary with automatic dimension dictionary management.
            </summary>
            <typeparam name="TD1Key">The type of the d1 key - the key of the first dimension.</typeparam>
            <typeparam name="TD2Key">The type of the d2 key - the key of the second dimension.</typeparam>
            <typeparam name="TValue">The type of the value - the value stored in 2D matrix</typeparam>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.ContainsKey(`0)">
            <summary>
            Determines whether the specified key1 contains key.
            </summary>
            <param name="key1">The key1.</param>
            <returns>
              <c>true</c> if the specified key1 contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionary2D`3.width">
             <summary>
             Gets the width: number of columns (second dimension)
             </summary>
             <value>
             The width.
             </value>
            
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.Any">
            <summary>
            If contains at least 1 x 1 data entries
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionary2D`3.height">
            <summary>
            Gets the height: number of rows (second dimension)
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionary2D`3.Count">
            <summary>
            Gets the count of the first dimension entries
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.ContainsKey2InKey1(`0,`1)">
            <summary>
            Determines whether contains key in second dimension of Key2, returns false if even key1 is not contained
            </summary>
            <param name="key1">The key1.</param>
            <param name="key2">The key2.</param>
            <returns>
              <c>true</c> if [contains key d2] [the specified key1]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.ContainsKey2AnyKey1(`1)">
            <summary>
            Determines whether [contains key2 any key1] [the specified key2].
            </summary>
            <param name="key2">The key2.</param>
            <returns>
              <c>true</c> if [contains key2 any key1] [the specified key2]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionary2D`3.Item(`0,`1)">
            <summary>
            Access to stored 2D value. Returns <see cref="!:TValue"/> default value if not defined within the matrix
            </summary>
            <value>
            The <see cref="!:TValue"/>.
            </value>
            <param name="key1">The key1.</param>
            <param name="key2">The key2.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.Get2ndKeys(`0)">
            <summary>
            Get2nds the keys.
            </summary>
            <param name="key1">The key1.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.Get1stKeys">
            <summary>
            Get1sts the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionary2D`3.Item(`0)">
            <summary>
            Accessing whole nested dimension. Get will return dictionary with reference, Set will not replace existing dimension but update if with all <see cref="T:System.Collections.Generic.KeyValuePair`2"/> pairs.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.getOrMakeForKey1(`0)">
            <summary>
            Gets the or make for key1.
            </summary>
            <param name="key1">The key1.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.getForKeys(`0,`1)">
            <summary>
            Gets for keys.
            </summary>
            <param name="key1">The key1.</param>
            <param name="key2">The key2.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionary2D`3.setForKeys(`0,`1,`2)">
            <summary>
            Sets for keys.
            </summary>
            <param name="key1">The key1.</param>
            <param name="key2">The key2.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionary2D`3.items">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1">
            <summary>
            Dictionary with first letter indexing, usefull for large collections
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1"/> class.
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.Item(System.String)">
            <summary>
            Gets the <see cref="!:List&lt;T&gt;"/> with the specified key.
            </summary>
            <value>
            The <see cref="!:List&lt;T&gt;"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.Add(System.String,`0,System.Boolean)">
            <summary>
            Adds the item
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <param name="allowReplace">if set to <c>true</c> [check for duplicates].</param>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.Get(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.Count">
            <summary>
            Counts indexed first letters
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.CountAll">
            <summary>
            Counts all instances saved in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.GetSignature">
            <summary>
            Gets the signature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet`1.items">
            <summary> </summary>
        </member>
        <member name="T:imbSCI.Data.collection.nested.aceDictionarySet`2">
            <summary>
            Based on aceConcurrentBag
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="T"></typeparam>
            <seealso cref="!:System.Collections.Concurrent.ConcurrentDictionary&lt;TEnum, aceCommonTypes.collection.nested.aceConcurrentBag&lt;T&gt;&gt;" />
        </member>
        <member name="T:imbSCI.Data.collection.nested.aceEnumDictionary`2">
            <summary>
            Recnik koji automatski popuni stavke svim TEnum enumeracijama - a value mu je new TObject();
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.nested.aceEnumListSet`2.haveChange">
            <summary>
            If TRUE any statistics child class may use shoud be recalculated
            </summary>
            <value>
              <c>true</c> if [have change]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceEnumListSet`2.AcceptChanges">
            <summary>
            Accepts the changes: it will update change hash, call this after recalculation of the statistics
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceEnumListSet`2.Add(`0,`1)">
            <summary>
            Support Flags and Enums
            </summary>
            <param name="flags">The flags.</param>
            <param name="link">The link.</param>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceEnumListSet`2.CountAll">
            <summary>
            Counts all items in all sub collections
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.nested.aceEnumListSet`2.Remove(`1)">
            <summary>
            Removes the specified item from all dictionaries
            </summary>
            <param name="link">The link.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3" -->
        <member name="M:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3.#ctor(`2)">
            <summary>
            Konstruktor koji postavlja podrazumevanu vrednost na svako polje
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="M:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3.define(`2,`0,`1[])">
            <summary>
            Defines the specified value.
            </summary>
            <param name="val">The value.</param>
            <param name="category">The category.</param>
            <param name="forItem">For item.</param>
        </member>
        <member name="M:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3.define(`2,`1[])">
            <summary>
            Sets fields of all categories  <c>val</c>
            </summary>
            <param name="val">The value.</param>
            <param name="forItem">For item.</param>
        </member>
        <member name="P:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3.categories">
            <summary>
            allCateogriesValues
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3.itemKeys">
            <summary>
            za sve iteme
            </summary>
        </member>
        <member name="T:imbSCI.Data.collection.nested.imbCollectionNestedEnumToString`2">
            <summary>
            The <see cref="T:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3"/> applied for String values. It is thread-safe.
            </summary>
            <typeparam name="TC">Enum type defining the first or X axis (aka: categories)</typeparam>
            <typeparam name="TI">Enum type defining the second or Y axis (aka: options)</typeparam>
            <remarks>
            <para>To access the value use indexers, i.e.: collection[X][Y] = "something"</para>
            <para>This application of the <see cref="T:imbSCI.Data.collection.nested.imbCollectionNestedEnum`3"/> allows you to set initial string value for each cell in the 2D matrix</para>
            </remarks>
        </member>
        <member name="M:imbSCI.Data.collection.nested.imbCollectionNestedEnumToString`2.#ctor(System.Boolean)">
            <summary>
            Konstruktor
            </summary>
            <param name="defaultToString">Da li da upiše ime enuma kao podrazumevanu vrednost polja ili da ostane prazan string</param>
        </member>
        <member name="T:imbSCI.Data.collection.special.circularSelector`1">
            <summary>
            Circular and/or random item provider based on index loop.
            </summary>
            <typeparam name="T">If is Enum - automatic member fill in is performed on constructor call</typeparam>
            <seealso cref="!:aceCommonTypes.primitives.imbBindable" />
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.#ctor(`0[])">
            <summary>
            New instance with a number of instances within. the <see cref="T:imbSCI.Data.collection.special.circularSelector`1"/> class.
            </summary>
            <param name="__items">The items.</param>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.reset">
            <summary>
            Moves the index into starting position
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.#ctor">
            <summary>
            If {T} is Enum it will automatically put all members into this collection.
            </summary>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.Count">
            <summary>
            items Count
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.collection.special.circularSelector`1.rnd">
            <summary>
            Gets the <see cref="T:System.Random"/> instance
            </summary>
            <value>
            The random.
            </value>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.random">
            <summary>
            Gets random instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.getAlternative(`0,System.Int32)">
            <summary>
            Gets the alternative item relative to <c>from</c> item for <c>altSteps</c>
            </summary>
            <param name="from">From.</param>
            <param name="altSteps">The alt steps.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.next(System.Int32)">
            <summary>
            Gets next item according to circular order
            </summary>
            <param name="steps">The steps.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.Add(`0)">
            <summary>
            Adds the specified new item into circular collection
            </summary>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.Add(`0[])">
            <summary>
            Adds the specified items
            </summary>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:imbSCI.Data.collection.special.circularSelector`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="F:imbSCI.Data.collection.special.circularSelector`1.index">
            <summary>
            Current index
            </summary>
        </member>
        <member name="F:imbSCI.Data.collection.special.circularSelector`1.items">
            <summary>
            The items in the collection
            </summary>
        </member>
        <member name="P:imbSCI.Data.collection.special.colorWhellForContent.header">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Data.collection.special.colorWhellForContent.footer">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Data.collection.special.colorWhellForContent.heading">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Data.collection.special.enumCounter`1">
            <summary>
            Brojac enumeracija
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.Data.collection.special.enumCounter`1.reset">
            <summary>
            postavlja sve brojace na 0
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.byteFlag">
            <summary>
            Struktura za flag vrednost
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.byteFlag.value">
            <summary>
            brojcana vrednost
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.changeBindableBase">
            <summary>
            Keeps record on properties whose values were changed since last call to <see cref="M:imbSCI.Data.data.changeBindableBase.Accept"/> method
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:imbSCI.Data.data.changeBindableBase.InvokeChanged">
            <summary>
            Sets current state of the object to be Changed (i.e. from now on the object will know it had some changes since last <see cref="M:imbSCI.Data.data.changeBindableBase.Accept"/> call);
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.changeBindableBase.GetChanges(System.Boolean)">
            <summary>
            Gets the changes.
            </summary>
            <param name="andAccept">if set to <c>true</c> [and accept].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.changeBindableBase.Accept">
            <summary>
            Clears all changes recorded since object creation or last Accept()
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.data.changeBindableBase.HasChanges">
            <summary>
            Gets a value indicating whether this instance has changes.
            </summary>
            <value>
            <c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:imbSCI.Data.data.changeBindableBase._Changes">
            <summary>
            The changes
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.changeBindableBase.Changes">
            <summary>
            Gets or sets the changes.
            </summary>
            <value>
            The changes.
            </value>
        </member>
        <member name="M:imbSCI.Data.data.changeBindableBase.OnPropertyChanged(System.String)">
            <summary>
            Kreira event koji obaveštava da je promenjen neki parametar
            </summary>
            <remarks>
            Neće biti kreiran event ako nije spremna aplikacija: imbSettingsManager.current.isReady
            </remarks>
            <param name="name"></param>
        </member>
        <member name="E:imbSCI.Data.data.changeBindableBase.PropertyChanged">
            <summary>
            Occurs when a property value is changed
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.dataBindableBase">
            <summary>
            Base class for objects implementing the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, thus making class ready for DataBinding
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:imbSCI.Data.data.dataBindableBase.OnPropertyChanged(System.String)">
            <summary>
            Called when a property is changed.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="E:imbSCI.Data.data.dataBindableBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.imbBindable">
            <summary>
            At this moment this is only alias to <see cref="T:imbSCI.Data.data.dataBindableBase"/>, use <see cref="T:imbSCI.Data.data.dataBindableBase"/> instead of this
            </summary>
            <seealso cref="T:imbSCI.Data.data.dataBindableBase" />
        </member>
        <member name="T:imbSCI.Data.data.maps.datamap.IMapShema">
            <summary>
            Univerzalni interfejs za sve mape
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.IMapShema.isActivated">
            <summary>
            Da li je shema aktivirana - nakon ucitavanja
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.IMapShema.unmatchedProperties">
            <summary>
            lista imena propertija koji nisu pronadjeni u tipu kojim je aktivirana shema
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.addMapItem(imbSCI.Data.data.maps.mapping.IImbMapItem)">
            <summary>
            Glavni metod za dodavanje kolona
            </summary>
            <param name="input"></param>
            <param name="item"> </param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.addMapItemCopy(imbSCI.Data.data.maps.mapping.IImbMapItem)">
            <summary>
            Pravi kopiju kolone i ubacuje je
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.setValues(System.Object,System.Collections.Generic.List{System.Object})">
            <summary>
            Postavlja vrednosti u objekat
            </summary>
            <param name="target">Objekat u koji treba da se upisu vrednosti</param>
            <param name="values">Lista sa istim redosledom kao i u mapi</param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.getValues(System.Object)">
            <summary>
            Preuzima mapirane vrednosti iz objekta - po redosledu kakav je u mapi
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.activateShema(System.Type,System.String[])">
            <summary>
            Vrsi "aktiviranje" sheme - u evaluationMapItem-e prebacuje podatke o mapiranim propertijima i belezi nepronadjene
            </summary>
            <param name="mappedType">Tip za koji se pravi shema</param>
            <param name="__fields">Spisak polja koja treba da formira - ako je null onda pretpostavlja da vec postoje, ako nije null onda brise postojeca polja i definise nova </param>
            <returns>Broj nepronadjenih propertija u mapi</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbSCI.Data.data.maps.datamap.IMapShema.setValues(System.Object,imbSCI.Data.data.maps.datamap.IValuePairs)" -->
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.getValueArray``1(System.Object)">
            <summary>
            Preuzima vlednosti iz objekta i smesta ih u tipiziran niz,
            </summary>
            <typeparam name="TV">Tip itema u nizu</typeparam>
            <param name="target">Objekat iz koga uzima vrednosti</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.getValueArrayCollection``1(System.Collections.IEnumerable)">
            <summary>
            Creates value array for Evaluator input/output
            </summary>
            <typeparam name="TV">Property required</typeparam>
            <param name="source">Collection with parent item</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.getValuePairs``1(System.Collections.IList)">
            <summary>
            Pravi propertyValuePair na osnovu niza vrednosti - redom mapira prema redosledu u mapi
            </summary>
            <typeparam name="TVP">tip propertyValuePair-a koji treba da se kreira</typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShema.setDataRow(System.Data.DataRow,imbSCI.Data.data.maps.datamap.IValuePairs,System.Boolean)">
            <summary>
            Upisivanje podataka u DataRow
            </summary>
            <param name="row"></param>
            <param name="values"></param>
            <param name="valueConversion"></param>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.IMapShemaBasic.mappedType">
            <summary>
            podaci o izvornom tipu
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IMapShemaBasic.checkProperty(System.Reflection.PropertyInfo)">
            <summary>
            Proverava da li propertz treba ubaciti u shemu 2014c
            </summary>
            <param name="pi"></param>
            <param name="sh"></param>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.IValuePairs.Keys">
            <summary>
            Pristup key kolekciji
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairs.setValues(System.Object,System.Boolean)">
            <summary>
            Postavlja vrednosti u objekat
            </summary>
            <param name="target">Objekat u koji treba da se upisu vrednosti</param>
            <param name="values">Lista sa istim redosledom kao i u mapi</param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairs.getValues(System.Object,System.Boolean)">
            <summary>
            Updataes data from the object. If fields defined does just update. If fields count is 0 - search all propertiesi in object
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairs.getValues">
            <summary>
            Vraca sve vrednosti parovima
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairs.getCrossSection(imbSCI.Data.data.maps.datamap.IValuePairs,imbSCI.Data.data.maps.datamap.crossSectionType)">
            bool ContainsKey(string name);
            
            
             <summary>
             Vraca pairs koji predstavljaju rezultat operacije nad skupom
             </summary>
             <remarks>
             Vraca vrednosti is second-a
             </remarks>
             <param name="second"></param>
             <param name="cst"></param>
             <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairs.getValues(System.Data.DataRow,System.Boolean)">
            <summary>
            Vraca vrednosti iz reda a koje se nalaze pod imenom u propertyValue paru - funkcija mapiranja ustvari
            </summary>
            <param name="row"></param>
            <param name="reset"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.data.maps.datamap.IValuePairsExtension">
            <summary>
            EKSTENZIJE za IVALUE PAIRS kolekcije
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairsExtension.getValues``1(imbSCI.Data.data.maps.datamap.IValuePairs,System.Collections.IDictionary)">
            <summary>
            Vraca IValuePair sa vrednostima koje je uzeo iz IDictionary dataSource-a -- ne sme da bude ekstenzija jer ce puci XmlSerijalizacija
            </summary>
            <typeparam name="TVP"></typeparam>
            <param name="selectedFields"></param>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairsExtension.getCrossSection``1(imbSCI.Data.data.maps.datamap.IValuePairs,imbSCI.Data.data.maps.datamap.IValuePairs,imbSCI.Data.data.maps.datamap.crossSectionType)">
            <summary>
            Vraca presek koji ce biti dostavljen u odabranom tipu kolekcije
            </summary>
            <typeparam name="TVP"></typeparam>
            <param name="source"></param>
            <param name="second"></param>
            <param name="cst"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.IValuePairsExtension.getCrossSection(imbSCI.Data.data.maps.datamap.IValuePairs,imbSCI.Data.data.maps.datamap.IValuePairs,imbSCI.Data.data.maps.datamap.crossSectionType)">
            <summary>
            Vraca presek u kolekciji koja ce biti istog tipa kao i source parametar
            </summary>
            <param name="source">kolekcija sa cijim se imenima poredi</param>
            <param name="second"></param>
            <param name="cst"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.data.maps.datamap.propertyMapItem">
            <summary>
            2014c> Collection item: evaluationMapItem, part of evaluationMapItemCollection
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.propertyMapItem.path">
            <summary>
            cela putanja - onako kako je prosledjeno prilikom definisanja
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.propertyMapItem.name">
            <summary>
            ujedno i naziv propertija
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.propertyMapItem.isActivated">
            <summary>
            Da li je map itemu dodeljeno pi
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.propertyMapItem.pi">
            <summary>
            property info
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.propertyMapItem.getMapItemLabel">
            <summary>
            Dijagnosticki ispis naziva ovog mapiranog itema
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.propertyValuePairs.origin">
            <summary>
            kako je instancirana kolekcija - sta je bio izvor strukture
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.propertyValuePairs.getCrossSection(imbSCI.Data.data.maps.datamap.IValuePairs,imbSCI.Data.data.maps.datamap.crossSectionType)">
            bool ContainsKey(string name);
            
            
             <summary>
             Vraca pairs koji predstavljaju rezultat operacije nad skupom
             </summary>
             <remarks>
             Vraca vrednosti is second-a
             </remarks>
             <param name="second"></param>
             <param name="cst"></param>
             <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbSCI.Data.data.maps.datamap.propertyValuePairs.getValues" -->
        <member name="T:imbSCI.Data.data.maps.datamap.propertyValuePairsBase`1">
             <summary>
             Osnovna kolekcija propertyValueParova -- kolekcija se ne oslanja na imbPropertyInfo, koristi obican String name
             </summary>
            
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.propertyValuePairsBase`1.getValues(System.Object,System.Boolean)">
            <summary>
            Updataes data from the object. If fields defined does just update. If fields count is 0 - search all propertiesi in object
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.propertyValuePairsBase`1.getDataDescription(System.String)">
            <summary>
            Kompaktni opis podataka
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.propertyValuePairsBase`1.setValues(System.Object,System.Boolean)">
            <summary>
            Kopira vrednosti iz sebe u target objekat. Izvrsava konverziju vrednosti ako je valueConversion ukljucen.
            </summary>
            <remarks>
            Dodeljuje vrednosti istoimenim propertijima. Parovi za koje nije pronasao propertije se preskacu.
            </remarks>
            <param name="target">Objekat u koji upisuje vrednosti</param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.propertyValuePairsBase`1.getValues(System.Data.DataRow,System.Boolean)">
            <summary>
            Vraca vrednosti iz reda a koje se nalaze pod imenom u propertyValue paru - funkcija mapiranja ustvari
            </summary>
            <param name="row"></param>
            <param name="reset"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.propertyValuePairsBase`1.checkInput(System.Object,System.String)">
            <summary>
            Proverava da li uneti objekat odgovara
            </summary>
            <param name="target"></param>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.data.maps.datamap.ValuePairsScore">
            <summary>
            2013c: LowLevel resurs
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.datamap.ValuePairsScore.score">
            <summary>
            Bindable property
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.ValuePairsScore.getTopScored">
            <summary>
            Vraća ključ koji ima najviše poena
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.ValuePairsScore.Add(System.String)">
            <summary>
            Dodaje novi string key u listu ili povecava broj bodova za postojeci
            </summary>
            <param name="stringKey"></param>
        </member>
        <member name="M:imbSCI.Data.data.maps.datamap.ValuePairsScore.Add(imbSCI.Data.data.maps.datamap.IValuePairs)">
            <summary>
            Dodaje pojene za prosleđene parove
            </summary>
            <param name="ivp"></param>
        </member>
        <member name="T:imbSCI.Data.data.maps.mapping.IImbMapItem">
            <summary>
            Zajednicke osobine razlicitih mapping itema
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.mapping.IImbMapItem.path">
            <summary>
            cela putanja - onako kako je prosledjeno prilikom definisanja
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.mapping.IImbMapItem.name">
            <summary>
            ime propertija ili map itema, uvek je unikatno
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.mapping.IImbMapItem.pi">
            <summary>
            Podaci o propertiju koji se cilja ovom mapom
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.mapping.IImbMapItem.getMapItemLabel">
            <summary>
            Dijagnosticki ispis naziva ovog mapiranog itema
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.data.maps.mapping.propertyMap">
            <summary>
            2014c> podesavanje mapiranja sa jedne klase na drugu
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.mapping.propertyMap.name">
            <summary>
            Naziv mapiranja - koristi se kod kesiranja klasa-to-klasa mapiranja
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.maps.mapping.propertyMapEntry">
            <summary>
            2014c> jedan property map unos
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.mapping.propertyMapEntry.isActive">
            <summary>
            Da li je aktivirano trenutno mapiranje
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.mapping.propertyMapEntry.sourceProperty">
            <summary>
            naziv propertija koji je izvor podatka
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.maps.mapping.propertyMapEntry.targetProperty">
            <summary>
            naziv propertija u koji se snima podatak
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.maps.mapping.propertyMappingTools">
            <summary>
            Tools to map relationship between two classes
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.maps.mapping.propertyMappingTools.getDictionaryFromMappedSource(System.Object,imbSCI.Data.data.maps.mapping.propertyMap,imbSCI.Data.data.maps.mapping.propertyMapNameSource)">
            <summary>
            Vraca recnik sa vrednostima iz objekta.
            </summary>
            <remarks>
            Recnik moze biti indeksiran prema imenima propertija za ciljani objekat ili za izvorni objekat
            </remarks>
            <param name="source">Objekat iz koga se preuzimaju vrednosti</param>
            <param name="map">Mapa iz koje preuzima vrednosti</param>
            <param name="targetNames">Whom property names to use for the dictionary?</param>
            <returns>Recnik sa imenima propertija i vrednostima</returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.mapping.propertyMappingTools.setValuesToMappedTarget(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object},imbSCI.Data.data.maps.mapping.propertyMap)">
            <summary>
            Postavlja vednosti iz recnika u dati ciljani objekat - da bi bilo kompatibilno niz mora biti u istom rasporedu kao i u property mapu
            </summary>
            <param name="target">Objekat koji prima vednosti</param>
            <param name="values">Recnik vrednosti koje treba da primeni na ciljani objekat.</param>
            <param name="map">Mapa koju treba da koristi za kopiranje vednosti - ako se prosledi primenice podesavanja isActive i kopirace samo one vednosti koje su navedene i u mapi i u prosledjenom recniku</param>
            <returns>Broj propertija koji su postavljeni</returns>
        </member>
        <member name="M:imbSCI.Data.data.maps.mapping.propertyMappingTools.setObjectByMappedSource(System.Object,System.Object,imbSCI.Data.data.maps.mapping.propertyMap)">
            <summary>
            Primenjuje prosledjenu property mapu
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <param name="map"></param>
            <returns>Broj propertija koji su postavljeni</returns>
        </member>
        <member name="T:imbSCI.Data.data.ObjectPathChangeMonitor">
            <summary>
            Helper class to monitor path change
            </summary>
            <seealso cref="T:imbSCI.Data.data.imbBindable" />
        </member>
        <member name="M:imbSCI.Data.data.ObjectPathChangeMonitor.#ctor(imbSCI.Data.interfaces.IObjectWithPath)">
            <summary>
            New instance with initial target
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:imbSCI.Data.data.ObjectPathChangeMonitor.getPathChange(System.Boolean)">
            <summary>
            TEels if scope path was changed than last call with <c>markAsUnchanged</c> set TRUE
            </summary>
            <param name="markAsUnchanged">if set to <c>true</c> if will change state to unchange</param>
            <returns>TRUE if scope-s path is different than last call with <c>markAsUnchanged</c> set TRUE</returns>
        </member>
        <member name="T:imbSCI.Data.data.ObjectPathParentAndRootMonitor">
            <summary>
            Monitors changes in scope - results are in State object
            </summary>
            <seealso cref="T:imbSCI.Data.data.imbBindable" />
        </member>
        <member name="M:imbSCI.Data.data.ObjectPathParentAndRootMonitor.#ctor(imbSCI.Data.interfaces.IObjectWithPathAndChildSelector,System.Boolean,System.Boolean)">
            <summary>
            Sets target and automatically Update - sets all switches if options used
            </summary>
            <param name="target">The target.</param>
            <param name="setSwitches">if set to <c>true</c> it will set state switches to <c>switchValueToSet</c> value</param>
            <param name="switchValueToSet">Value to set to switches, if <c>setSwitches</c> is <c>true</c></param>
        </member>
        <member name="M:imbSCI.Data.data.ObjectPathParentAndRootMonitor.getState(System.Boolean)">
            <summary>
            Returns state of changes and reset internal change switches if <c>acceptChange</c> is TRUE
            </summary>
            <param name="acceptChanges">if set to <c>true</c> [accept changes].</param>
            <returns>Changes report</returns>
        </member>
        <member name="M:imbSCI.Data.data.ObjectPathParentAndRootMonitor.update(imbSCI.Data.interfaces.IObjectWithPathAndChildSelector)">
            <summary>
            Checks for changes and records it into internal change switches
            </summary>
            <param name="target">Monitored object</param>
        </member>
        <member name="T:imbSCI.Data.data.ObjectScopeChangeReport">
            <summary>
            Describes changes found by ObjectPathParentAndRootMonitor
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.ObjectScopeChangeReport.IsPathChanged">
            <summary>
            Gets or sets a value indicating whether this instance is path changed.
            </summary>
            <value>
              <c>true</c> if this instance is path changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.ObjectScopeChangeReport.IsChanged">
            <summary>
            If any of properties was changed
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.package.dataItemContainer">
            <summary>
            Stored XML content, paired with ID
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.package.dataItemContainer.#ctor">
            <summary>
            Used by XmlSerialization
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.package.dataItemContainer.id">
            <summary>
            ID associated to the stored instance
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.package.dataItemContainer.instanceXml">
            <summary>
            XML code of stored instance
            </summary>
            <value>
            The instance XML.
            </value>
        </member>
        <member name="T:imbSCI.Data.data.package.dataPackage`2">
            <summary>
            Serializable data structure package container - base class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:imbSCI.Data.data.package.dataPackage`2.bagContent">
            <summary>
            Concurrent version of the <see cref="!:content"/>
            </summary>
            <value>
            The content of the bag.
            </value>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackage`2.GetDataPackageID(`1)">
            <summary>
            Makes or takes (unique or not) ID to assign to the item instance wrapped
            </summary>
            <param name="wrapper">Object that holds the instance</param>
            <returns>ID</returns>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackage`2.GetInstanceToPack(`1)">
            <summary>
            Takes data item instance from the wrapper
            </summary>
            <param name="wrapper">Object that holds the instance</param>
            <returns>item that was held by the instance</returns>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackage`2.AddDataItem(`1,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Serializes and stores an item into <see cref="!:content"/> collection. , before serialization it calls <see cref="M:imbSCI.Data.data.package.IDataPackageItem.OnBeforeSave"/>
            </summary>
            <param name="wrapper">The wrapper to use for <see cref="P:imbSCI.Data.data.package.dataItemContainer.id"/> and <see cref="P:imbSCI.Data.data.package.dataItemContainer.instanceXml"/> creation</param>
            <param name="xmlSer">The XML serializer to use instead of its own.</param>
            <remarks>Makes the container using <see cref="M:imbSCI.Data.data.package.dataPackage`2.GetInstanceToPack(`1)"/> and <see cref="M:imbSCI.Data.data.package.dataPackage`2.GetDataPackageID(`1)"/>. Calls <see cref="M:imbSCI.Data.data.package.IDataPackageItem.OnBeforeSave"/> between these two.</remarks>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackage`2.GetItem(imbSCI.Data.data.package.dataItemContainer)">
            <summary>
            Gets the item.
            </summary>
            <param name="iContainer">The i container.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackage`2.AddDataItems(System.Collections.Generic.IEnumerable{`1},System.Boolean)">
            <summary>
            Adds the data items.
            </summary>
            <param name="items">The items.</param>
            <param name="doInParaller">if set to <c>true</c> [do in paraller].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackage`2.GetDataItems(System.Boolean)">
            <summary>
            Deserializes stored data
            </summary>
            <param name="doInParaller">if set to <c>true</c> [do in paraller].</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.data.package.dataPackageBase">
            <summary>
            Package very foundation
            </summary>
            <seealso cref="T:imbSCI.Data.data.package.IDataPackage" />
        </member>
        <member name="P:imbSCI.Data.data.package.dataPackageBase.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.package.dataPackageBase.content">
            <summary>
            Content collection that is serialized
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="T:imbSCI.Data.data.package.dataPackageExtensions">
            <summary>
            Utility class with methods and extensions for easier work with <see cref="T:imbSCI.Data.data.package.dataPackage`2"/>
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackageExtensions.SaveDataPackage``1(``0,System.String)">
            <summary>
            Saves the data package.
            </summary>
            <typeparam name="TPackage">The type of the package.</typeparam>
            <param name="package">The package.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:imbSCI.Data.data.package.dataPackageExtensions.LoadDataPackage``1(System.String)">
            <summary>
            Loads the data package.
            </summary>
            <typeparam name="TPackage">The type of the package.</typeparam>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.data.package.IDataPackageItem">
            <summary>
            Interface for object instance that is used with <see cref="T:imbSCI.Data.data.package.dataPackage`2"/> serialization model
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.package.IDataPackageItem.OnBeforeSave">
            <summary>
            Called before item is saved
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.package.IDataPackageItem.OnLoaded">
            <summary>
            Called after item is loaded
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.package.instanceItemContainer`1">
            <summary>
            Temporary structure used for id/instance pair exchange
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:imbSCI.Data.data.package.NamespaceDoc">
            <summary>
            DataPackage serialization model provides simple tools for serialization of complex data structures like <see cref="!:graphWrapNode&lt;TItem&gt;"/>
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.sample.sampleTake`1">
            <summary>
            Portion of the population
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.List`1" />
        </member>
        <member name="M:imbSCI.Data.data.sample.sampleTake`1.#ctor(System.Collections.Generic.List{`0},imbSCI.Data.data.sample.samplingSettings)">
            <summary>
            Populates sample take according to settings
            </summary>
            <param name="_source">The source.</param>
            <param name="_settings">The settings.</param>
        </member>
        <member name="P:imbSCI.Data.data.sample.sampleTake`1.settings">
            <summary>
            Settings used for this take
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="T:imbSCI.Data.data.sample.samplingOrderEnum">
            <summary>
            Sample take order
            </summary>
        </member>
        <member name="F:imbSCI.Data.data.sample.samplingOrderEnum.ordinal">
            <summary>
            The ordinal: from <c>skip</c> to <c>skip</c> + <c>limit</c>
            </summary>
        </member>
        <member name="F:imbSCI.Data.data.sample.samplingOrderEnum.everyNth">
            <summary>
            The every NTH: ordinal, but every n-th element, including cycling,
            </summary>
        </member>
        <member name="F:imbSCI.Data.data.sample.samplingOrderEnum.randomSuffle">
            <summary>
            The random suffle: random suffle
            </summary>
        </member>
        <member name="T:imbSCI.Data.data.sample.samplingSettings">
            <summary>
            Configuration for <see cref="T:imbSCI.Data.data.sample.sampleTake`1"/>
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.sample.samplingSettings.skip">
            <summary> Number of items to skip </summary>
        </member>
        <member name="P:imbSCI.Data.data.sample.samplingSettings.limit">
            <summary>
            Total number of items allowed to get into sample
            </summary>
            <value>
            The limit.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.sample.samplingSettings.parts">
            <summary>
            Defines number of equal parts for sampling algorithms like: n-fold, every n-th
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.sample.samplingSettings.onlyUnique">
            <summary>
            It will return only unique instances to be collected, no overlap
            </summary>
            <value>
              <c>true</c> if [only unique]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbSCI.Data.data.text.NamespaceDoc">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbSCI.Data.data.text.regexMarker`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarker`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.data.text.regexMarker`1"/> class.
            </summary>
            <param name="regex">The regex.</param>
            <param name="__m">The m.</param>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarker`1.test">
            <summary>
            Gets or sets the test.
            </summary>
            <value>
            The test.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarker`1.marker">
            <summary>
            Gets or sets the marker.
            </summary>
            <value>
            The marker.
            </value>
        </member>
        <member name="T:imbSCI.Data.data.text.regexMarkerCollection`1">
            <summary>
            Collection of Regex markers
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="!:System.Collections.Generic.Dictionary&lt;T, aceCommonTypes.data.text.regexMarker&lt;T&gt;&gt;" />
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarkerCollection`1.replacementGenerator(System.Text.RegularExpressions.Match)">
            <summary>
            Generates the replacement string for the specified Regex Match
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarkerCollection`1.Add(imbSCI.Data.data.text.regexMarker{`0})">
            <summary>
            Adds new marker rule
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="F:imbSCI.Data.data.text.regexMarkerCollection`1.defaultMarker">
            <summary>
            The default marker to be applied to the unmatched parts of the text
            </summary>
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarkerCollection`1.process(System.String)">
            <summary>
            Processes the specified text input into <see cref="T:imbSCI.Data.data.text.regexMarkerResultCollection`1"/>
            </summary>
            <param name="input">The input text to be parsed</param>
            <returns>Collection with matched results</returns>
        </member>
        <member name="T:imbSCI.Data.data.text.regexMarkerForConsole">
            <summary>
            Regex marker applied to parse some markdown-like annotation in the text message to be displayed at Console Application output
            </summary>
            <seealso cref="!:aceCommonTypes.data.text.regexMarker&lt;aceCommonTypes.data.text.consoleStyleMarkerEnum&gt;" />
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerForConsole.foreground">
            <summary>
            Gets or sets the foreground color to be attached to the token matching the <see cref="P:imbSCI.Data.data.text.regexMarker`1.test"/>
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerForConsole.background">
            <summary>
            Gets or sets the background color attached to the token matching the <see cref="P:imbSCI.Data.data.text.regexMarker`1.test"/>
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarkerForConsole.#ctor(System.String,imbSCI.Data.enums.consoleStyleMarkerEnum,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.data.text.regexMarkerForConsole"/> parser rule
            </summary>
            <param name="regex">The regex test for tokens</param>
            <param name="__m">The style marker it represents</param>
            <param name="fore">The foreground color, <see cref="P:imbSCI.Data.data.text.regexMarkerForConsole.foreground"/></param>
            <param name="back">The background color, <see cref="P:imbSCI.Data.data.text.regexMarkerForConsole.background"/>.</param>
        </member>
        <member name="T:imbSCI.Data.data.text.regexMarkerResult">
            <summary>
            Single entry of regex marker result
            </summary>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResult.match">
            <summary>
            Regex result
            </summary>
            <value>
            The match.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResult.marker">
            <summary>
            Marker (rule) that created this result
            </summary>
            <value>
            The marker.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResult.content">
            <summary>
            Content wrapped
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResult.index">
            <summary>
            Starting point
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResult.length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarkerResult.#ctor(System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.data.text.regexMarkerResult"/> class.
            </summary>
            <param name="__content">The content.</param>
            <param name="__index">The index.</param>
            <param name="__marker">The marker.</param>
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarkerResult.#ctor(System.Text.RegularExpressions.Match,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.data.text.regexMarkerResult"/> class.
            </summary>
            <param name="m">The m.</param>
            <param name="__marker">The marker.</param>
        </member>
        <member name="T:imbSCI.Data.data.text.regexMarkerResultCollection`1">
            <summary>
            Single dimension marked map - the results created with <see cref="T:imbSCI.Data.data.text.regexMarkerCollection`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbSCI.Data.data.text.regexMarkerResultCollection`1.GetByOrder">
            <summary>
            Gets the marker results by order of appearance -- taking only first layer
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResultCollection`1.byMarker">
            <summary> Dictionary set by marker rule</summary>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResultCollection`1.byAllocation">
            <summary> Indexed by allocation </summary>
        </member>
        <member name="P:imbSCI.Data.data.text.regexMarkerResultCollection`1.length">
            <summary>
            Length of the complete result collection
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="F:imbSCI.Data.data.text.regexMarkerResultCollection`1.defaultMarker">
            <summary>
            Default marker to apply
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.appends.appendLinkType">
            <summary>
            Type of link/object to append
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendLinkType.link">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendLinkType.image">
            <summary>
            IMAGE
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendLinkType.anchor">
            <summary>
            Internal anchor
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendLinkType.styleLink">
            <summary>
            The style link - link to external style source
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendLinkType.scriptLink">
            <summary>
            The script link - link to external script source
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendLinkType.scriptPostLink">
            <summary>
            The script link - link to extrnal script source - to be placed at bottom of page
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.appends.appendTableBorderFlags">
            <summary>
            Describes a way to apply borders to cells
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableColumnOptionFlags.useBasicNumericFormat">
            <summary>
            Use basic numeric format - with thousant separator
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableColumnOptionFlags.useCurrencyFormat">
            <summary>
            Use currency format - with decimal places
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableColumnOptionFlags.useCurrencyNegativeRedFormat">
            <summary>
            Use currency negative red format
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableColumnOptionFlags.useColDescForHead">
            <summary>
            The use col desc for head
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.appends.appendTableFlag">
            <summary>
            Flagovi - appendTableFlag
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableFlag.addTableNameToID">
            <summary>
            da li dodaje ime tabele u ID tabele
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableFlag.addTableNameAsTitle">
            <summary>
            da li dodaje ime tabele u naslov
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableFlag.headerToUpper">
            <summary>
            Header tekst ide u UPPER
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableFlag.insertHeader">
            <summary>
            Ubacuje prvi red u tabeli koji sadr�i nazive kolona
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableFlag.insertSubHeader">
            <summary>
            Drugi red u tabeli sadr�i komentar -- u zavisnosti od implementacije
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableFlag.insertRowNumber">
            <summary>
            Prva kolona u tabeli sadr�i redni broj reda
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTableOptionFlags.useBetween">
            <summary>
            Use insert cell/character for pair/values
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.appends.appendType">
            <summary>
            Instruction set for IDocumentRender, ITextRender and IRender report rendering engines
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.regular">
            <summary>
            same as none but regular will not trigger secondary type checks like none does
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.bypass">
            <summary>
            do not escape
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.image">
            <summary>
            From file templated: file source path and delivery unit item
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_table">
            <summary>
            The c table: Table rendering
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_data">
            <summary>
            The c data: PropertyCollection pairs
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_pair">
            <summary>
            The c pair: key, value, between
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_section">
            <summary>
            The c section: title, content, footer
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_link">
            <summary>
            The c link> link - url
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_line">
            <summary>
            The c line> horizontal line
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_open">
            <summary>
            The c open - opens container
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.c_close">
            <summary>
            The c close - closes container
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_palette">
            <summary>
            The i palette - switches to pallete
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_alternate">
            <summary>
            S - alternating Odd and Even on Normal style
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_normal">
            <summary>
            The s normal - turns off the alternating mode
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_zone">
            <summary>
            applies zone to cursor: textCursorZone, cursorSubzoneFrame, cursorZoneRole (supported params)
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_directory">
            <summary>
            directory operation: create, zip, delete, moveInto, moveOut... dsa_dirOperation, dsa_scopeToNew, dsa_path
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_scopeIn">
            <summary>
            The x scope in: set current scope to provided object
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_scopeOut">
            <summary>
            The x scope out: set current scope to parent
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_openTool">
            <summary>
            Opens external tool
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_save">
            <summary>
            The x save - saving file
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_export">
            <summary>
            Calls for export of a resource
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_subcontent">
            <summary>
            Starts/ends a subcontent session
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.x_data">
            <summary>
            Calls execution context state data to be refreshed
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_dataSource">
            <summary>
            Inserts custom PropertyCollection into context data
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_dataInDocument">
            <summary>
            Inserts custom document data - if possible
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_document">
            <summary>
            The i document: new document
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_page">
            <summary>
            The i page: new page
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_style">
            <summary>
            The i style: new style definition
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_meta">
            <summary>
            The i meta: new meta entry
            </summary>
            <remarks>
                Used with <see cref="!:templateFieldBasic"/> <c>meta_</c> values to direct
            </remarks>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_chart">
            <summary>
            The i chart: new chart
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_external">
            <summary>
            include content from external file.
            </summary>
            <remarks>
            use with> d.dsa_recompile, dsa_innerAppend, dsa_path
            </remarks>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_load">
            <summary>
            Loads external file and adds it according to dsa_innerAppend: i_document, i_page or simple append
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_log">
            <summary>
            The i log:writes to log
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.i_function">
            <summary>
            The i function - inserts function into> field / cell ---
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_width">
            <summary>
            Sets width
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_variation">
            <summary>
            Sets forcebly current variationRole
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendType.s_settings">
            <summary>
            Applies behaviour settings
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTypeKind.none">
            <summary>
            The none - not for execution
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTypeKind.simple">
            <summary>
            The simple: simple string appends and headings
            Without prefix
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTypeKind.style">
            <summary>
            The style: generate style, variations... <c>s_</c> prefix
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTypeKind.complex">
            <summary>
            Starting with <c>c_</c>
            The complex: section, line...
            The data: DataTable, Pairs, Lists
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTypeKind.special">
            <summary>
            starting with <c>i_</c> and <c>x_</c>The special and  The structure: add page, add document, add...
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.appends.appendTypeKind.other">
            <summary>
            The other
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.consoleStyleMarkerEnum">
            <summary>
            Console marker style
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.cursorVariatorOddEvenFlags">
            <summary>
            Describes way of row background changes
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.directoryOperation">
            <summary>
            Operation on directories to be performed
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.selectOrBuild">
            <summary>
            The select or build directory on a path
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.compress">
            <summary>
            Compress into ZIP a directory on a path
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.delete">
            <summary>
            Delete directory
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.selectIfExists">
            <summary>
            Selects only if exists
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.selectParent">
            <summary>
            Select parent if not root
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.selectRoot">
            <summary>
            Select device/partition root
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.selectRuntimeRoot">
            <summary>
            Select runtime root
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.copy">
            <summary>
            Copies directory
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.directoryOperation.rename">
            <summary>
            Rename directory
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.displayOption">
            <summary>
            Opcije start-up prikazivanja
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.defaultDisplay">
            <summary>
            Podrazumevano podesavanje
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.primary">
            <summary>
            Primarni displej
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.hidden">
            <summary>
            Ostani sakriven
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.maximize">
            <summary>
            Povecaj window do maksimalne velicine
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.minimize">
            <summary>
            Otvori ali ostavlja minimizirano
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.display1">
            <summary>
            Prvi ekran
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.display2">
            <summary>
            Drugi ekran
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.display3">
            <summary>
            Treci ekran
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.displayOption.display4">
            <summary>
            Cetvrti ekran
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.externalTool">
            <summary>
            External tool to run. Call extension to open tool and specified file from <c>filepath</c>
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.firefox">
            <summary>
            Mozzila FireFox
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.chrome">
            <summary>
            Google Chrome
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.explorer">
            <summary>
            Internet Explorer
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.notepadpp">
            <summary>
            Notepad ++
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.dreamweaver">
            <summary>
            Adobe Dreamweaver
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.wamp">
            <summary>
            WAMP server
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.phpMyAdmin">
            <summary>
            phpMyAdmin
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.projectFolder">
            <summary>
            Windows Explorer da otvori folder gde se nalazi trenutni projekat
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.runtimeFolder">
            <summary>
            Windows Explorer da otvori folder gde je instalirana aplikacija
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.wampWWW">
            <summary>
            Windows Explorer da otvori WAMP www
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.wampLocalhost">
            <summary>
            WAMP localhost via Firefox
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.folderExplorer">
            <summary>
            Windows Explorer
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.photoshop">
            <summary>
            Adobe photoshop
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.graphVizDot">
            <summary>
            Gde se nalazi dot.exe
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.fusekiServer">
            <summary>
            Poziva kao command line
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.fusekiServerJava">
            <summary>
            Poziva kao JAR preko Java
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.fusekiLocalhost">
            <summary>
            Prikaz fuseki local hosta
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.freeRunner">
            <summary>
            Alatka za slobodno izvrsavanje
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.externalTool.autodetect">
            <summary>
            Forces the application to guess tool by extension
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldBasic">
            <summary>
            Set of basic report fields that are automatically created
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_softwareName">
            <summary>
            Title - recommanded by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_desc">
            <summary>
            Description - recommanded by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_subtitle">
            <summary>
            Subtitle - recommanded by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_author">
            <summary>
            Author - by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_organization">
            <summary>
            The meta organization - by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_keywords">
            <summary>
            The meta keywords - by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_copyright">
            <summary>
            The meta copyright - by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.meta_year">
            <summary>
            The meta year - by metaDocument model
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_folder">
            <summary>
            Path directorium
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_file">
            <summary>
            Path filename with extension
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_dir">
            <summary>
            Path directorium name
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_here">
            <summary>
            The path here
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_root">
            <summary>
            Path to delivery output folder
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_output">
            <summary>
            Path without file name
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_format">
            <summary>
            file format
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_ext">
            <summary>
            file extension
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.path_sub">
            <summary>
            The path sub
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.parent_index">
            <summary>
            Relative path to parent index.html
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.parent_dir">
            <summary>
            Relative path to parent folder
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.parent_type">
            <summary>
            Naziv parent objekta
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_id">
            <summary>
            id/pririty of this page - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_number">
            <summary>
            Real page number - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_count">
            <summary>
            The page count - counting content of parent
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_name">
            <summary>
            Page name - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_title">
            <summary>
            Page descriptive title  - derived from first page instance-> header in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_type">
            <summary>
            Page type name - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_next">
            <summary>
            path to prev page
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_prev">
            <summary>
            path to next page
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_index">
            <summary>
            path to index page
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_readme">
            <summary>
            Url to readme
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.page_relpath">
            <summary>
            Relative path to the first page in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_id">
            <summary>
            id/pririty of this page - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_number">
            <summary>
            Real page number - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_count">
            <summary>
            The page count - counting content of parent
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_name">
            <summary>
            Page name - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_title">
            <summary>
            Page descriptive title  - derived from first page instance-> header in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_desc">
            <summary>
            The document desc
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_type">
            <summary>
            Page type name - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_relpath">
            <summary>
            Relative path to first document in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.documentset_name">
            <summary>
            Page name - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.documentset_desc">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.documentset_title">
            <summary>
            Page descriptive title  - derived from first page instance-> header in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.documentset_type">
            <summary>
            Page type name - derived from first page instance in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.documentset_relpath">
            <summary>
             Relative path to first document in parent chain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.document_path">
            <summary>
            The document structure path
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.documentset_directory">
            <summary>
            The document set directory path
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_plc">
            <summary>
            placeholders count
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_plcl">
            <summary>
            all placeholders in csv line
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_format">
            <summary>
            selected format for file writing
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_type">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_tabl">
            <summary>
            Tab level
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_title">
            <summary>
            The self (object that calls) title
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_desc">
            <summary>
            The self (object that calls) desc
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.self_rflags">
            <summary>
            The self rflags
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.test_caption">
            <summary>
            imbFramework.test.testDefinition -> caption
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.test_description">
            <summary>
            imbFramework.test.testDefinition -> description
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.test_versionCount">
            <summary>
            Version of the test
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.test_runstamp">
            <summary>
            Current runstamp
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.test_runtime">
            <summary>
            How long it is running
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.test_runstart">
            <summary>
            When it started
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.test_status">
            <summary>
            The test status
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sci_projectname">
            <summary>
            Name of research project
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sci_projectpath">
            <summary>
            Path of project file
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sci_projecttype">
            <summary>
            Type name of the project
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.lang_eName">
            <summary>
            English name of the language loaded
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.lang_nName">
            <summary>
            Native name of the language
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.lang_iso">
            <summary>
            ISO code of the language
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_mem">
            <summary>
            Memory allocated
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_threads">
            <summary>
            Threads running
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_runtime">
            <summary>
            How long the app is running
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_app">
            <summary>
            Application name - domain desc
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_path">
            <summary>
            Execution dir path for the app
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_uid">
            <summary>
            Unique string UID
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_date">
            <summary>
            Current date
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_time">
            <summary>
            Current time
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_log">
            <summary>
            Global, system log content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sys_start">
            <summary>
            The system start time
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.sci_projectdesc">
            <summary>
            The sci project instance description
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldBasic.report_folder">
            <summary>
            The report folder: naziv foldera u kome je glavni deo izveštaja
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldCompanyProfile">
            <summary>
            set of high-level data points -- not related to object property name
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_companyName">
            <summary>
            Detected company name - data
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_address">
            <summary>
            Complete address block - or several blocks if detected
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_phone">
            <summary>
            Phone number or numbers
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_pib">
            <summary>
            VAT number
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_mbr">
            <summary>
            Number of registration
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_product">
            <summary>
            Product or products  - in line CSV
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_services">
            <summary>
            Servies
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_equipment">
            <summary>
            Detected equipment
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_staff">
            <summary>
            Detected personal contact
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldCompanyProfile.csp_events">
            <summary>
            Detected events
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldDataTable">
            <summary>
            Fields for DataTable Reports
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_tablename">
            <summary>
            The data tablename - table name for display
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_tabledesc">
            <summary>
            The data tabledesc - description footnote text about the table
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_tablenamedb">
            <summary>
            The data tablenamedb - table name in db shemata
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_dbname">
            <summary>
            The data dbname - name of database
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_dbhost">
            <summary>
            The data dbhost - host domain
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_dbuser">
            <summary>
            The data dbuser - in case of database access
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_rowcounttotal">
            <summary>
            Total number of rows in DataTable
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_rowcountselected">
            <summary>
            Number of rows returned on query
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_columncount">
            <summary>
            The data columncount - DataColumn count
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_dbengine">
            <summary>
            The data dbengine - what is the engine behind the data
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_tablescount">
            <summary>
            The number of tables in the report
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.shema_dbcount">
            <summary>
            The data dbcount - number of databases
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_query">
            <summary>
            The data query: SQL or other query
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_origin_type">
            <summary>
            The data origin type: objectTable, singleObject, multiTables,
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_origin_count">
            <summary>
            The data origin count: how many sources are aggregated here
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_aggregation_type">
            <summary>
            The data aggregation type: what type of aggregation created this table
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.shema_sourcename">
            <summary>
            The shema sourcename - instance name for collection or table name for DataTable
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.shema_classname">
            <summary>
            if shema derived from class - here it will contain Type.Name
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_id">
            <summary>
            The col identifier
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_name">
            <summary>
            The col name - data base name
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_caption">
            <summary>
            The col caption to display
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_type">
            <summary>
            The col Type for column data
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_desc">
            <summary>
            The col description
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_rel">
            <summary>
            The col relationship
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_even">
            <summary>
            The DataColumn is even, not odd
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_imbattributes">
            <summary>
            Imb attribute collection
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_attributes">
            <summary>
            All property attributes
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_namePrefix">
            <summary>
            The col name prefix (pre _)
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_nameClean">
            <summary>
            The col name clean (posle _)
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.col_directAppend">
            <summary>
            The col direct append
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.row_id">
            <summary>
            The row identifier - ID in DataTable.rows
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.row_even">
            <summary>
            The row even - the row is even
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.row_data">
            <summary>
            The row data collection
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldDataTable.data_accesslist">
            <summary>
            The data accesslist - imbDbAccess list
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldMetaBlock">
            <summary>
            Meta block templateFields
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldMetaBlock.block_id">
            <summary>
            The block identifier
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldMetaBlock.block_name">
            <summary>
            The block name
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldMetaBlock.block_desc">
            <summary>
            The block desc
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldMetaBlock.block_type">
            <summary>
            The block type
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldMetaBlock.block_priority">
            <summary>
            The block priority
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldStyling">
            <summary>
            Color pallete
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldStyling.text_rotation">
            <summary>
            The text rotation - <see cref="!:aceCommonTypes.reporting.style.enums.styleTextRotationEnum"/>
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldStyling.text_verticalAligment">
            <summary>
            The text vertical aligment - <see cref="!:aceCommonTypes.zone.printVertical"/>
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldStyling.text_horizontalAligment">
            <summary>
            The text horizontal aligment <see cref="!:aceCommonTypes.zone.printHorizontal"/>
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldStyling.text_aligment">
            <summary>
            The aligment - <see cref="!:aceCommonTypes.zone.textCursorZoneCorner"/> expected or string: "top", "center" "bottom"
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldStyling.color_paletteRole">
            <summary>
            The color palette role - <see cref="!:aceCommonTypes.colors.acePaletteRole"/>
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldStyling.color_variationRole">
            <summary>
            The color variation role - <see cref="!:aceCommonTypes.colors.acePaletteVariationRole"/>
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldSubcontent">
            <summary>
            HTML blocks
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.main">
            <summary>
            The main StringBuilder or content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.startOfFile">
            <summary>
            The start of file - the very first lines of the content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.endOfFile">
            <summary>
            The end of file - the very last lines of the content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.meta_keywords">
            <summary>
            Page keywords
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.meta_description">
            <summary>
            Page description
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.theme_styles">
            <summary>
            Place for heading style links
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.theme_code_headlinks">
            <summary>
            The theme code headlinks - code links to be included at beginning
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.theme_code_footlinks">
            <summary>
            The theme code footlinks - code links to be included at end
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.theme_code_ending">
            <summary>
            JS (or other) code to include around end or at end of the template
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_title">
            <summary>
            Title for HTML title
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_topnav">
            <summary>
            Top navigation
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_mainnav">
            <summary>
            Main navigation
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_header">
            <summary>
            Header content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_footer">
            <summary>
            Footer content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_debug">
            <summary>
            Debug information
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_page_content">
            <summary>
            Main content of the page
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldSubcontent.html_js">
            <summary>
            Java script to be inserted at end of page
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldTheme">
            <summary>
            Insert blocks generated by theme
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldTheme.theme_styles">
            <summary>
            CSS links
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldTheme.theme_plugins">
            <summary>
            links for included plugins
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldTheme.theme_js">
            <summary>
            Java script from theme JS template
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.fields.templateFieldWebPageReport">
            <summary>
            Template field names - Web Page profiling report
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.code_webRequest">
            <summary>
            Summary textt on webRequest
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.code_sourceHTML">
            <summary>
            Loaded source HTML
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.code_sourceTEXT">
            <summary>
            Extracted text of source
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.code_sourceMarkdown">
            <summary>
            Extracted markdown text of source
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.code_sourceHTML_norm">
            <summary>
            Normalized HTML source code - after loading
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_structureMetrics">
            <summary>
            Web structure metrics
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_pageStructureTree">
            <summary>
            XML structure tree
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_pageStructureTreeOpt">
            <summary>
            Optimised page structure tree
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_pageTemplateTree">
            <summary>
            Extracted template tree
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_pageTemplateTextContent">
            <summary>
            Extracted template text
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_pageStructureTokenized">
            <summary>
            XML output of tokenized page structure
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_pageDirectExtraction">
            <summary>
            Report on directly extracted information about company
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_pageSemanticExtraction">
            <summary>
            Report on semanticaly extracted information
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.csp_extractedKnowledge">
            <summary>
            Export of extracted knowledge
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.csp_enrichNBS">
            <summary>
            ... after loading NBS data
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.csp_enrichAPR">
            <summary>
            ... after processing APR data
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.csp_enrichCRM">
            <summary>
            ... after processing CRM data
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.csp_complete">
            <summary>
            RDF of Company Semantic Profile
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.log_systemLog">
            <summary>
            Current main imbVeles log content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.log_workflowLog">
            <summary>
            Log of parent workflow
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_linkSelection">
            <summary>
            Izveštaj o izboru unutrašnjih linkva za analizu templejta
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_template">
            <summary>
            Izvestaj o detektovanom templejtu
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_classification">
            <summary>
            Report on web type classification
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.fields.templateFieldWebPageReport.web_keypages">
            <summary>
            Report on key pages detection
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.getWritableFileMode">
            <summary>
            Mode of getWritableFile extension
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.none">
            <summary>
            The none - the function is disabled
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.unknown">
            <summary>
            The unknown - it will not affect any existing preference
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.newOrExisting">
            <summary>
            It will create new file if no existing detected, or get existing
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.existing">
            <summary>
            It will not create new file if no existing detected
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.overwrite">
            <summary>
            It will delete any existing file and provide newly created
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.autoRenameThis">
            <summary>
            It will automatically modify path with _Counter sufix so the new file has unique filename
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.autoRenameExistingOnOtherDate">
            <summary>
            The automatic rename the existing file if it was created on another date
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.autoRenameExistingToOld">
            <summary>
            It will rename any existing file with sufix _old
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.autoRenameExistingToBack">
            <summary>
            It will rename any existing file with sufix _backup
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.appendFile">
            <summary>
            It will just append existing file - partial implementation
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.getWritableFileMode.autoRenameExistingToOldOnce">
            <summary>
            It will allow just one backup of an existing file by adding just "_old" sufix, without making new filename unique
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.logOutputSpecial">
            <summary>
            Willmarks for special log output source
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.logOutputSpecial.devNotes">
            <summary>
            Development notes
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.logOutputSpecial.semanticEngine">
            <summary>
            The semantic engine log
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.logOutputSpecial.analyticEngine">
            <summary>
            The analytic engine log
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.logOutputSpecial.languageEngine">
            <summary>
            The language engine log.
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.logOutputSpecial.aceSubsystem">
            <summary>
            The ace subsistem log
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.printHorizontal">
            <summary>
            Horizontal orientation
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.reportElementLevel">
            <summary>
            Element level to operate
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reportElementLevel.none">
            <summary>
            Undefined element level
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reportElementLevel.delivery">
            <summary>
            The delivery
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reportElementLevel.documentSet">
            <summary>
            The document set
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reportElementLevel.servicepage">
            <summary>
            The servicepage
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reportElementLevel.document">
            <summary>
            The document
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reportElementLevel.page">
            <summary>
            The page
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reportElementLevel.block">
            <summary>
            The block
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.htmlClassForReport.defaultClass">
            <summary>
            Podrazumevani class za ovaj tip izvestaja
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.htmlTagName.th">
            <summary>
            Table header cell
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.htmlTagName.defaultTag">
            <summary>
            Podrazumevani tag za konkretan tip izvestaja
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.reporting.reportIncludeFileType">
            <summary>
            Tip prikljucenog fajla
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportIncludeFileType.cssStyle">
            <summary>
            U pitanju je cssStyle link
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportIncludeFileType.javaScriptFileSource">
            <summary>
            spoljni js fajl koji se kopira i poziva
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportIncludeFileType.javaScriptLinkedSource">
            <summary>
            spoljni js koji se poziva kao link iz meta dela
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportIncludeFileType.emailAttachmentStatic">
            <summary>
            Koristi se staticni fajl, nista se ne priprema
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportIncludeFileType.emailAttachmentDynamicFileName">
            <summary>
            Koristi se stalno isti fajl ali se vrsi rename prema sablonu
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportIncludeFileType.emailAttachmentDynamicFileSource">
            <summary>
            Fajlovi koji se salju su u jednom folderu odakle se preuzimaju, preimenuju prema sablonu i salju uz email
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportIncludeFileType.emailAttachmentGeneratedFile">
            <summary>
            Fajl koji se salje se generise "u letu"
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.reporting.reportOutputRoles">
            <summary>
            Uloga koju ima odredjen podatak/tag u izvestaju
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportOutputRoles.appendLine">
            <summary>
            dodaje se nova linija
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.reportOutputRoles.container">
            <summary>
            Novi odeljak - div
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.reporting.templateFieldStyleInserts">
            <summary>
            Template fields for Style
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_body">
            <summary>
            Style for body
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_h6">
            <summary>
            H6
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_p">
            <summary>
            Common p style
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_header">
            <summary>
            Style of header
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_section">
            <summary>
            Style of index navigation
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_nav">
            <summary>
            Style of navigation
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_footer">
            <summary>
            Style of footer
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_article">
            <summary>
            Style for main content
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_colora_css">
            <summary>
            Outter CSS block of colora
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_colorb_css">
            <summary>
            Outter CSS block on colorb
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_colorc_css">
            <summary>
            Outter CSS block on colorc
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_q">
            <summary>
            Style for quotation tag
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.reporting.templateFieldStyleInserts.style_lists">
            <summary>
            Style for ul and ol tags
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.tableReporting.dataTableDeliveryEnum">
            <summary>
            DataTable request rescription
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.tableReporting.dataTableDeliveryEnum.calculated">
            <summary>
            The calculated: instruct provider to perform calculations before making table
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.tableReporting.dataTableDeliveryEnum.comparative">
            <summary>
            The comparative: tells the provider to include more
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.tableReporting.dataTableIOFlags.firstRowColumnNames">
            <summary>
            The first row column names: the first row contains column names
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.tableReporting.dataTableSummaryRowEnum.theLast">
            <summary>
            The last value
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.tableReporting.dataTableSummaryRowEnum.theFirst">
            <summary>
            The first value entry
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.tableReporting.dataTreeDeliveryEnum">
            <summary>
            Enumeration ** proposal **
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.typedParamDeclarationType.nameDoubleDotType">
            <summary>
            Parametar deklarisan: paramname:typename --> name:String --- koristi se ; kada se navodi u nizu> count:Int32;name:String;
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.typedParamDeclarationType.cmdOperationBracketsStyle">
            <summary>
            -n[Job name]
            </summary>
        </member>
        <member name="F:imbSCI.Data.enums.typedParamDeclarationType.cmdOperationNoBracketsStyle">
            <summary>
            -n job:String
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.urlSegment">
            <summary>
            Segment URL-a koji treba da se izdvoji
            </summary>
        </member>
        <member name="T:imbSCI.Data.enums.urlShema">
            <summary>
            podrzane sheme za URL
            </summary>
        </member>
        <member name="T:imbSCI.Data.extensions.data.imbPathExtensions">
            <summary>
            Universal Tree-structure access extensions and Path tools
            </summary>
            \ingroup_disabled ace_ext_path
        </member>
        <member name="M:imbSCI.Data.extensions.data.imbPathExtensions.getCommonRoot(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Returns common part of the path - the root that both paths are sharing
            </summary>
            <param name="xPathA"></param>
            <param name="xPathB"></param>
            \ingroup_disabled ace_ext_xpath_highlight
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.extensions.data.imbPathExtensions.removeCommonRoot(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Removes common root from <c>xPathA</c> and returns result
            </summary>
            <param name="xPathA">The x path a.</param>
            <param name="xPathB">The x path b.</param>
            <param name="includeAbsolute">if set to <c>true</c> [include absolute].</param>
            <returns></returns>
            \ingroup_disabled ace_ext_xpath_highlight
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.addPrefixForRoot(System.String)">
            <summary>
            Adds path prefix for root member
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getOrdinalPathPart(System.String)">
            <summary>
            Gets the ordinal path part. If it is not ordinal path path> returns -1
            </summary>
            <param name="ordinalPart">The ordinal part.</param>
            <returns>Number from ordinal path sequence, or -1 if it is not ordinal path</returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getChildByPath(imbSCI.Data.interfaces.IObjectWithChildSelector,System.String)">
            <summary>
            Get member by resolving relative or absolute <c>path</c> over <c>shead</c> starting object.
            </summary>
            <remarks>
            Path supports: absolute (starts with <c>PATHSPLITER</c>, go to parent <c>..</c>, ordinal selectors <c>[1]</c> and sequential child <c>name</c> selection
            </remarks>
            <param name="shead">Start head - object to start from</param>
            <param name="path">The path: accepts go to parent syntax.</param>
            <returns></returns>
            <exception cref="T:System.Exception">getChild() STACK OVERFLOW [".o(c).a("] metaContentBase")</exception>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.detectParentChildLoopReference(System.Collections.Generic.List{imbSCI.Data.interfaces.IObjectWithPath})">
            <summary>
            Detects the parent child loop reference.
            </summary>
            <param name="suspects">The suspects.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getParentsViaExtension(imbSCI.Data.interfaces.IObjectWithPath,System.Int32)">
            <summary>
            Gets all parents. Prevents loop inherence.
            </summary>
            <param name="source">The object to start from. Excluded from result</param>
            <param name="parentDepthLimit">The parent depth limit.</param>
            <returns>
            List of all parents until root object or until looped node. Order of objects in the result is from <c>source</c> to <c>root</c>
            </returns>
            <exception cref="T:System.Exception"></exception>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithPath" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithRoot" />
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getPathViaExtension(imbSCI.Data.interfaces.IObjectWithPath,System.Boolean)">
            <summary>
            Gets the path string - including <c>source</c> at end of the path
            </summary>
            <param name="source">Object to get XPath for</param>
            <param name="useXPathFormat">if set to <c>true</c> if will return XPath format with / instead of backslash, otherwise it will use \\ as path separator member.</param>
            <returns>
            XPath string with the root backslash
            </returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getParentOrRoot(imbSCI.Data.interfaces.IObjectWithParent,System.String,System.Type,System.Int32)">
            <summary>
            Gets a member from parent-chain: a) Nth parent according to limit. b) parent on <c>targetPath</c>, c) parent of <c>target</c> type or simply d) root if no more parents.
            </summary>
            <param name="source">The source - objects to start search from</param>
            <param name="target">The target Type - what type will triger return of current head</param>
            <param name="limit">The limit of depth. For -1: unlimited, For 1: it will return source.parent, For 0: it will return source, for 50: it will return  50th parent in parent-chain.</param>
            <param name="targetPath">Once head reach this path it will trigger return of head. Disabled if empty or null.</param>
            <returns>Parent in parent chain or root</returns>
            \ingroup_disabled ace_ext_path
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getPathToParent(imbSCI.Data.interfaces.IObjectWithParent,imbSCI.Data.interfaces.IObjectWithParent,System.String,System.Int32)">
            <summary>
            Relative path to memeber in parent chain
            </summary>
            <param name="target">The target.</param>
            <param name="prefix">The prefix.</param>
            <returns>Propert relative path</returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getPathFromObject(imbSCI.Data.interfaces.IObjectWithPath)">
            <summary>
            Gets the path from object - just casting trick
            </summary>
            <param name="head">The head.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getPathTo(imbSCI.Data.interfaces.IObjectWithPathAndChildSelector,imbSCI.Data.interfaces.IObjectWithPathAndChildSelector)">
            <summary>
            Discovers relative path to <c>target</c> member of the structure
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>String that leads to target</returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getTyped``1(System.Collections.Generic.IEnumerable{imbSCI.Data.interfaces.IObjectWithName})">
            <summary>
            Gets the typed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getElementLevel(imbSCI.Data.interfaces.IObjectWithReportLevel)">
            <summary>
            Null safe way to get meta element level
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.isElementLevel(imbSCI.Data.interfaces.IObjectWithReportLevel,imbSCI.Data.enums.reportElementLevel)">
            <summary>
            Determines whether [is element level] [the specified element].
            </summary>
            <param name="obj">The object.</param>
            <param name="element">The element.</param>
            <returns>
              <c>true</c> if [is element level] [the specified element]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getParentOfLevel(imbSCI.Data.interfaces.IObjectWithParent,imbSCI.Data.enums.reportElementLevel,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Gets the parent of target element level or root if reached
            </summary>
            <param name="source">The source.</param>
            <param name="level">The level.</param>
            <param name="getLastParent">if set to <c>true</c> [get last parent].</param>
            <param name="nullForNotFound">if set to <c>true</c> [null for not found].</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getAllChildrenInType``1(``0,System.Text.RegularExpressions.Regex,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the type of all children in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent">The parent.</param>
            <param name="pathFilter">The path filter.</param>
            <param name="inverse">if set to <c>true</c> it inverses the filter</param>
            <param name="recursiveIndex">Index of the recursive calls (if orderByPath is true)</param>
            <param name="recursiveLimit">The recursive calls limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getAllChildren(imbSCI.Data.interfaces.IObjectWithPathAndChildren,System.Text.RegularExpressions.Regex,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets all children. If pathFilder defined, it uses it to select only children with appropriate path
            </summary>
            <param name="parent">The parent.</param>
            <param name="pathFilter">The path filter.</param>
            <param name="inverse">if set to <c>true</c> it inverses the filter</param>
            <param name="orderByPath">if set to <c>true</c> [order by path].</param>
            <param name="recursiveIndex">Index of the recursive calls (if orderByPath is true)</param>
            <param name="recursiveLimit">The recursive calls limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.removeFromParent(System.Collections.Generic.IEnumerable{imbSCI.Data.interfaces.IObjectWithPathAndChildren})">
            <summary>
            Removes all children from parent nodes
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getNames(System.Collections.Generic.IEnumerable{imbSCI.Data.interfaces.IObjectWithName},System.Boolean)">
            <summary>
            Gets the names.
            </summary>
            <param name="source">The source.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getPaths(System.Collections.Generic.IEnumerable{imbSCI.Data.interfaces.IObjectWithPath})">
            <summary>
            Gets paths of 1-st level children.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getDeepest(System.Collections.Generic.IEnumerable{imbSCI.Data.interfaces.IObjectWithPathAndChildren},System.Int32)">
            <summary>
            Gets the deepest.
            </summary>
            <param name="children">The children.</param>
            <param name="margine">The margine.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getOnLevel(System.Collections.Generic.IEnumerable{imbSCI.Data.interfaces.IObjectWithPathAndChildren},System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the on level.
            </summary>
            <param name="children">The children.</param>
            <param name="level">The level.</param>
            <param name="downMargin">Down margin.</param>
            <param name="upMargin">Up margin.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getFilterOut(System.Collections.Generic.IEnumerable{imbSCI.Data.interfaces.IObjectWithPathAndChildren},System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex)">
            <summary>
            Filters out the collection by path regex, <c>nameRegex</c> is optional AND criterion
            </summary>
            <param name="children">The children.</param>
            <param name="pathRegex">The path regex.</param>
            <param name="nameRegex">The name regex.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbGraphExtensions.getAllLeafs(imbSCI.Data.interfaces.IObjectWithPathAndChildren,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Gets all leafs, optionally applies Regex criteria used to child name [[[doesn't work]]]
            </summary>
            <param name="parent">The parent.</param>
            <param name="nameFilter">The name filter.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.imbSciEnumExtensions">
            <summary>
            Enum type extensions
            </summary>
        </member>
        <member name="M:imbSCI.Data.imbSciEnumExtensions.getEnumsDetectedInString``1(System.String)">
            <summary>
            Gets the enum values list from the same enum flags property
            </summary>
            <typeparam name="T">Enum type to test text against</typeparam>
            <param name="text">The text to test</param>
            <returns>List of detected enums</returns>
            <exception cref="T:System.ArgumentException">Type must be Enum! T = " + enumType.Name</exception>
        </member>
        <member name="M:imbSCI.Data.imbSciEnumExtensions.getEnumListFromFlags``1(System.Enum)">
            <summary>
            Gets the enum values list from the same enum flags property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbSciEnumExtensions.getEnumListFromFlags(System.Enum)">
            <summary>
            Untyped variation of <see cref="M:imbSCI.Data.imbSciEnumExtensions.getEnumListFromFlags``1(System.Enum)"/>
            </summary>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbSciEnumExtensions.getEnumList(System.Type)">
            <summary>
            Vraća vrednosti enumeraci
            </summary>
            <param name="EnumType"></param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.imbSciStringExtensions">
            <summary>
            Proširenja operacija nad stringovima
            </summary>
            \ingroup_disabled ace_ext_string
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.SplitOnce(System.String,System.String)">
            <summary>
            Splits the String by specified needle just ONCE. Needle is not included
            </summary>
            <param name="target">The target.</param>
            <param name="needle">The needle.</param>
            <returns>List with one (if no <c>needle</c> found, original string) or two strings (if <c>needle</c> found, left and right substrings</returns>
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.SplitSmart(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Splits the string or if no needle found in the string it returs <c>target</c> string
            </summary>
            <param name="target">The target.</param>
            <param name="needle">The needle.</param>
            <param name="targetDefault">If the target is null or empty it will use this value</param>
            <returns>
            List with one (if no <c>needle</c> found, original string) or two strings (if <c>needle</c> found, left and right substrings
            </returns>
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.isNullOrEmptyString(System.Object)">
            <summary>
            Proverava da li je input null, ako je string onda ga proverava kao string ako je neki drugi objekat onda ga predvara u string pa proverava
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.removeStartsWith(System.String,System.String)">
            <summary>
            Removes prefix if found at beginning of input
            </summary>
            <param name="input"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.ensureStartsWith(System.String,System.String)">
            <summary>
            Osigurava da ce string poceti sa input stringom
            </summary>
            <param name="output"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.removeEndsWith(System.String,System.String)">
            <summary>
            Ako se zavrsava sa sufixom onda uklanja sufix
            </summary>
            <param name="input"></param>
            <param name="sufix"></param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.ensureEndsWith(System.String,System.String)">
            <summary>
            Ensures the ends with.
            </summary>
            <param name="input">The input.</param>
            <param name="sufix">The sufix.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.imbSciStringExtensions.add(System.String,System.String,System.String)">
            <summary>
            Adds the specified input at end of <c>output</c> and puts <c>separator</c> between if <c>input</c> is not null or empty. Null safe operation.
            </summary>
            <remarks>
            Both <c>input</c> and <c>separator</c> may be null or empty.
            If <c>input</c> is null or empty it will not add separator to the resulting string
            </remarks>
            <param name="output">The output.</param>
            <param name="input">The input.</param>
            <param name="separator">The separator.</param>
            <returns>Appended version of the string</returns>
        </member>
        <member name="T:imbSCI.Data.interfaces.IAutosaveEnabled">
            <summary>
            Classes that support autosave registration
            </summary>
        </member>
        <member name="P:imbSCI.Data.interfaces.IAutosaveEnabled.VAR_RegisterForAutosave">
            <summary>
            Gets a value indicating whether the instance should be registered for autosave call on application close
            </summary>
            <value>
            <c>true</c> if [variable register for autosave]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbSCI.Data.interfaces.IAutosaveEnabled.VAR_FilenamePrefix">
            <summary>
            Gets the variable filename prefix to be used
            </summary>
            <value>
            The variable filename prefix.
            </value>
        </member>
        <member name="P:imbSCI.Data.interfaces.IAutosaveEnabled.VAR_FilenameBase">
            <summary>
            The root base of filename (without extension) for autosave.
            </summary>
            <remarks>
            This should be an abstract property in abstract base classes
            </remarks>
            <value>
            The variable filename base.
            </value>
        </member>
        <member name="P:imbSCI.Data.interfaces.IAutosaveEnabled.VAR_FilenameExtension">
            <summary>
            Gets the variable filename extension.
            </summary>
            <value>
            The variable filename extension.
            </value>
        </member>
        <member name="P:imbSCI.Data.interfaces.IAutosaveEnabled.VAR_FolderPathForAutosave">
            <summary>
            Gets the variable folder path for autosave.
            </summary>
            <value>
            Path (from app. root) to store the record on autosave. Also used as default on regular save call.
            </value>
        </member>
        <member name="P:imbSCI.Data.interfaces.IAutosaveEnabled.logContent">
            <summary>
            Gets the content of the log.
            </summary>
            <value>
            The content of the log.
            </value>
        </member>
        <member name="M:imbSCI.Data.interfaces.IDataRowSetter.buildDataTableShema(System.Boolean)">
            <summary>
            Builds the data table shema without any row
            </summary>
            <param name="onlyValues">if set to <c>true</c> it will create columns only for properties</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.IDataRowSetter.setDataRow(System.Data.DataTable)">
            <summary>
            Sets the data row -- non reflection row data set. Only if table has column with same name and only values are copied
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.IDataRowSetter.buildDataTableVertical">
            <summary>
            Builds the data table vertical.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.IDataTableBuilder.buildDataTableComparative``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Builds the data table comparative.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfSameType">Type of the items of same.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.IDataTableBuilder.buildDataTableHorizontal``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Builds the data table horizontal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfSameType">Type of the items of same.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.IDataTableBuilderCollection.getDataTableComparative">
            <summary>
            Builds the data table comparative.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfSameType">Type of the items of same.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.IDataTableBuilderCollection.getDataTableHorizontal">
            <summary>
            Builds the data table horizontal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="itemsOfSameType">Type of the items of same.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.interfaces.IGetCodeName">
            <summary>
            Object with getCodeName() method
            </summary>
        </member>
        <member name="M:imbSCI.Data.interfaces.IGetCodeName.getCodeName">
            <summary>
            Gets code name of the object. CodeName should be unique per each unique set of values of properties. In other words: if two instances of the same class have different CodeName that means values of their key properties are not same.
            </summary>
            <returns>Unique string to identify unique values</returns>
        </member>
        <member name="T:imbSCI.Data.interfaces.IGetToSetFromString">
            <summary>
            Data description classes having serialization capability over customizable declaration syntax
            </summary>
        </member>
        <member name="M:imbSCI.Data.interfaces.IGetToSetFromString.getToString(imbSCI.Data.enums.typedParamDeclarationType)">
            <summary>
            Makes string declaration of the param;
            </summary>
            <param name="declaration">Declaration format</param>
        </member>
        <member name="M:imbSCI.Data.interfaces.IGetToSetFromString.setFromString(System.String,imbSCI.Data.enums.typedParamDeclarationType)">
            <summary>
            Declares name and value type (class) from string declaration, formated as defined by the declaration
            </summary>
            <param name="input">String declaration of the param. Example: "numericParam:Int32;textMessage:String"</param>
            <param name="declaration">What format is used for string representation</param>
        </member>
        <member name="T:imbSCI.Data.interfaces.IHasDescribeMethod">
            <summary>
            Objekat ima svoj describe metod
            </summary>
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithChildSelector">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
        </member>
        <member name="M:imbSCI.Data.interfaces.IObjectWithChildSelector.indexOf(imbSCI.Data.interfaces.IObjectWithChildSelector)">
            <summary>
            Index of supplied child - in his collection
            </summary>
            <returns>-1 if not found</returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.IObjectWithChildSelector.Count">
            <summary>
            Number of child items
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbSCI.Data.interfaces.IObjectWithChildSelector.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified child name.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="childName">Name of the child.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithDescription">
            <summary>
            Class with <c>description</c> property
            </summary>
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithID">
            <summary>
            Objekat koji ima jedinstveni ID broj
            </summary>
        </member>
        <member name="P:imbSCI.Data.interfaces.IObjectWithID.id">
            <summary>
            Osnovni ID podatak
            </summary>
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithName">
            <summary>
            Objekat koji ima svoje ime - moze biti jedinstveno ali i ne mora
            </summary>
        </member>
        <member name="P:imbSCI.Data.interfaces.IObjectWithName.name">
            <summary>
            Ime koje je dodeljeno objektu
            </summary>
        </member>
        <member name="P:imbSCI.Data.interfaces.IObjectWithParent.parent">
            <summary>
            Referenca prema parent objektu
            </summary>
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithPath">
            <summary>
            Objekat koji ima jedinstveni ID broj
            </summary>
        </member>
        <member name="P:imbSCI.Data.interfaces.IObjectWithPath.path">
            <summary>
            Putanja objekta
            </summary>
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithPathAndChildren">
            <summary>
            Manje zahtevni interfejs za rad sa tree strukturama
            </summary>
            <seealso cref="!:imbSCI.Core.interfaces.IObjectWithPath" />
            <seealso cref="!:aceCommonTypes.interfaces.IObjectWithName" />
            <seealso cref="!:System.Collections.Generic.IEnumerable&lt;aceCommonTypes.interfaces.IObjectWithPathAndChildren&gt;" />
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithPathAndChildSelector">
            <summary>
            Objects withL name, path and this[] selector
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithName" />
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithPath" />
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithReportLevel">
            <summary>
            Reporting related object - that has the <see cref="T:imbSCI.Data.enums.reportElementLevel"/> property
            </summary>
            <seealso cref="T:imbSCI.Data.interfaces.IObjectWithParent" />
        </member>
        <member name="P:imbSCI.Data.interfaces.IObjectWithReportLevel.elementLevel">
            <summary>
            Indicates the element level of this object, in context of the reporting meta structure
            </summary>
            <value>
            The element level.
            </value>
        </member>
        <member name="T:imbSCI.Data.interfaces.IObjectWithUID">
            <summary>
            Object with universal identification string
            </summary>
        </member>
        <member name="P:imbSCI.Data.interfaces.IPerformanceTaker.name">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbSCI.Data.interfaces.IPerformanceTaker.secondsBetweenTakes">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Data.interfaces.IPerformanceTaker.checkTake">
            <summary>
            Makes take() if interval passed
            </summary>
        </member>
        <member name="M:imbSCI.Data.interfaces.IPerformanceTaker.GetDataTable(System.String)">
            <summary>
            Gets data table with all readings
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.interfaces.ISupportLoadSave">
            <summary>
            Objects that support Load and Save
            </summary>
        </member>
        <member name="M:imbSCI.Data.interfaces.ISupportLoadSave.LoadFrom(System.String)">
            <summary>
            Loads from specified absolute path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:imbSCI.Data.interfaces.ISupportLoadSave.SaveAs(System.String,imbSCI.Data.enums.getWritableFileMode)">
            <summary>
            Saves to specified absolute path
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="T:imbSCI.Data.NamespaceDoc">
            <summary>
            The namespace provides the core layer of shared: enumerations, interfaces and extensions as well as a number of thread-safe collections and data structures.
            </summary>
            <remarks>
            <para>The main purpose of this library is to basic set of building blocks, shared by wide range of imbVeles projects.</para>
            <para>Here are thread-safe multidimensional collections and dictionaries consumed on many layers of the imbSCI and imbACE frameworks.</para>
              <list type = "bullet" >
                <listheader>
                    <term>Namespace overview</term>
                    <description>Brief description on key features of the imbSCI.Core namespace</description>
                </listheader>
                <item>
                    <term>Extensions for: <see cref="!:String"/>s, <see cref="!:Enum"/>s, directed <see cref="!:graph"/>s, and paths (<see cref="!:imbPathExtensions"/>)</term>
                    <description>Very elementary extension methods, performing the most frequent operations.</description>
                </item>
                <item>
                    <term><see cref="N:imbSCI.Data.data"/>: fundamentals</term>
                    <description>Bindable primitives, <see cref="!:Regex"/>-based string parsers, complex data-structure load/save mechanism and <see cref="!:Type"/> to <see cref="!:Type"/> property auto-mappings</description>
                </item>
                <item>
                    <term><see cref="N:imbSCI.Data.collection"/>: multidimensional and thread-safe</term>
                    <description>Generic and non-generic directed graph, layered stacks, 2D+ relational matrices, dictionaries...</description>
                </item>
                <item>
                    <term>Common <see cref="N:imbSCI.Data.enums"/> and <see cref="N:imbSCI.Data.interfaces"/></term>
                    <description>Mostly revolving around reporting, data annotation and core framework options</description>
                </item>
            </list>
            </remarks>
            <example>
                Several extensions, combined for textual representation of all flags in specified Enum <c>en</c>.
                <code>
                String output = "";
                foreach (Enum eni in en.getEnumListFromFlags()) {
                    output = output.add(eni.toStringSafe().imbTitleCamelOperation(), ", ");
                }
                </code>
            </example>
            <seealso>
            <para>Few recommended namespace members to learn more about</para>
            <see cref="!:imbSCI.Data.imbSciEnumExtensions.getEnumListFromFlags(Enum)"/>
            <see cref="T:imbSCI.Data.collection.graph.graphWrapNode`1"/>
            <see cref="!:imbSCI.Data.imbGraphExtensions.getDeepest(IEnumerable&lt;interfaces.IObjectWithPathAndChildren&gt;, int)"/>
            <see cref="!:imbSCI.Data.imbGraphExtensions.getFilterOut(IEnumerable&lt;interfaces.IObjectWithPathAndChildren&gt;, System.Text.RegularExpressions.Regex, System.Text.RegularExpressions.Regex)"/>
            <see cref="!:imbSCI.Data.extensions.data.imbPathExtensions.getPathTo(interfaces.IObjectWithPathAndChildSelector, interfaces.IObjectWithPathAndChildSelector)"/>
            <see cref="T:imbSCI.Data.data.changeBindableBase"/>
            <see cref="M:imbSCI.Data.data.maps.mapping.propertyMappingTools.getValuesFromMappedSource(System.Object,imbSCI.Data.data.maps.mapping.propertyMap)"/>
            <see cref="T:imbSCI.Data.collection.nested.aceEnumDictionarySet2D`4"/>
            </seealso>
        </member>
        <member name="T:imbSCI.Data.primitives.coordinateXY">
            <summary>
            2D selection information
            </summary>
        </member>
        <member name="P:imbSCI.Data.primitives.coordinateXY.x">
            <summary>
            x position
            </summary>
        </member>
        <member name="P:imbSCI.Data.primitives.coordinateXY.y">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbSCI.Data.primitives.coordinateXY.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.primitives.coordinateXY"/> class.
            </summary>
        </member>
        <member name="M:imbSCI.Data.primitives.coordinateXY.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbSCI.Data.primitives.coordinateXY"/> class.
            </summary>
            <param name="__x">The x.</param>
            <param name="__y">The y.</param>
        </member>
    </members>
</doc>
